{"mappings":"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","sources":["node_modules/@svgdotjs/svg.js/dist/svg.esm.js","node_modules/@svgdotjs/svg.js/src/utils/methods.js","node_modules/@svgdotjs/svg.js/src/utils/utils.js","node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js","node_modules/@svgdotjs/svg.js/src/utils/window.js","node_modules/@svgdotjs/svg.js/src/types/Base.js","node_modules/@svgdotjs/svg.js/src/utils/adopter.js","node_modules/@svgdotjs/svg.js/src/modules/optional/arrange.js","node_modules/@svgdotjs/svg.js/src/modules/core/regex.js","node_modules/@svgdotjs/svg.js/src/modules/optional/class.js","node_modules/@svgdotjs/svg.js/src/modules/optional/css.js","node_modules/@svgdotjs/svg.js/src/modules/optional/data.js","node_modules/@svgdotjs/svg.js/src/modules/optional/memory.js","node_modules/@svgdotjs/svg.js/src/types/Color.js","node_modules/@svgdotjs/svg.js/src/types/Point.js","node_modules/@svgdotjs/svg.js/src/types/Matrix.js","node_modules/@svgdotjs/svg.js/src/modules/core/parser.js","node_modules/@svgdotjs/svg.js/src/types/Box.js","node_modules/@svgdotjs/svg.js/src/types/List.js","node_modules/@svgdotjs/svg.js/src/modules/core/selector.js","node_modules/@svgdotjs/svg.js/src/modules/core/event.js","node_modules/@svgdotjs/svg.js/src/types/EventTarget.js","node_modules/@svgdotjs/svg.js/src/modules/core/defaults.js","node_modules/@svgdotjs/svg.js/src/types/SVGArray.js","node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js","node_modules/@svgdotjs/svg.js/src/modules/core/attr.js","node_modules/@svgdotjs/svg.js/src/elements/Dom.js","node_modules/@svgdotjs/svg.js/src/elements/Element.js","node_modules/@svgdotjs/svg.js/src/modules/optional/sugar.js","node_modules/@svgdotjs/svg.js/src/modules/optional/transform.js","node_modules/@svgdotjs/svg.js/src/elements/Container.js","node_modules/@svgdotjs/svg.js/src/elements/Defs.js","node_modules/@svgdotjs/svg.js/src/elements/Shape.js","node_modules/@svgdotjs/svg.js/src/modules/core/circled.js","node_modules/@svgdotjs/svg.js/src/elements/Ellipse.js","node_modules/@svgdotjs/svg.js/src/elements/Fragment.js","node_modules/@svgdotjs/svg.js/src/modules/core/gradiented.js","node_modules/@svgdotjs/svg.js/src/elements/Gradient.js","node_modules/@svgdotjs/svg.js/src/elements/Pattern.js","node_modules/@svgdotjs/svg.js/src/elements/Image.js","node_modules/@svgdotjs/svg.js/src/types/PointArray.js","node_modules/@svgdotjs/svg.js/src/modules/core/pointed.js","node_modules/@svgdotjs/svg.js/src/elements/Line.js","node_modules/@svgdotjs/svg.js/src/elements/Marker.js","node_modules/@svgdotjs/svg.js/src/animation/Controller.js","node_modules/@svgdotjs/svg.js/src/utils/pathParser.js","node_modules/@svgdotjs/svg.js/src/types/PathArray.js","node_modules/@svgdotjs/svg.js/src/animation/Morphable.js","node_modules/@svgdotjs/svg.js/src/elements/Path.js","node_modules/@svgdotjs/svg.js/src/modules/core/poly.js","node_modules/@svgdotjs/svg.js/src/elements/Polygon.js","node_modules/@svgdotjs/svg.js/src/elements/Polyline.js","node_modules/@svgdotjs/svg.js/src/elements/Rect.js","node_modules/@svgdotjs/svg.js/src/animation/Queue.js","node_modules/@svgdotjs/svg.js/src/animation/Animator.js","node_modules/@svgdotjs/svg.js/src/animation/Timeline.js","node_modules/@svgdotjs/svg.js/src/animation/Runner.js","node_modules/@svgdotjs/svg.js/src/elements/Svg.js","node_modules/@svgdotjs/svg.js/src/elements/Symbol.js","node_modules/@svgdotjs/svg.js/src/modules/core/textable.js","node_modules/@svgdotjs/svg.js/src/elements/Text.js","node_modules/@svgdotjs/svg.js/src/elements/Tspan.js","node_modules/@svgdotjs/svg.js/src/elements/Circle.js","node_modules/@svgdotjs/svg.js/src/elements/ClipPath.js","node_modules/@svgdotjs/svg.js/src/elements/ForeignObject.js","node_modules/@svgdotjs/svg.js/src/modules/core/containerGeometry.js","node_modules/@svgdotjs/svg.js/src/elements/G.js","node_modules/@svgdotjs/svg.js/src/elements/A.js","node_modules/@svgdotjs/svg.js/src/elements/Mask.js","node_modules/@svgdotjs/svg.js/src/elements/Stop.js","node_modules/@svgdotjs/svg.js/src/elements/Style.js","node_modules/@svgdotjs/svg.js/src/elements/TextPath.js","node_modules/@svgdotjs/svg.js/src/elements/Use.js","node_modules/@svgdotjs/svg.js/src/main.js","src/index.js","src/boxes/newobj.js","src/objects/objects.js","src/objects/plus.js","src/objects/minus.js","src/objects/multiply.js","src/objects/divide.js","src/objects/metro.js","src/objects/delay.js","src/boxes/toggle.js","node_modules/@svgdotjs/svg.draggable.js/src/svg.draggable.js","src/boxes/button.js","src/objects/dummy.js","src/boxes/message.js","src/boxes/cable.js"],"sourcesContent":["/*!\n* @svgdotjs/svg.js - A lightweight library for manipulating and animating SVG.\n* @version 3.2.4\n* https://svgjs.dev/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Thu Jun 27 2024 12:00:16 GMT+0200 (Central European Summer Time)\n*/;\nconst methods$1 = {};\nconst names = [];\nfunction registerMethods(name, m) {\n  if (Array.isArray(name)) {\n    for (const _name of name) {\n      registerMethods(_name, m);\n    }\n    return;\n  }\n  if (typeof name === 'object') {\n    for (const _name in name) {\n      registerMethods(_name, name[_name]);\n    }\n    return;\n  }\n  addMethodNames(Object.getOwnPropertyNames(m));\n  methods$1[name] = Object.assign(methods$1[name] || {}, m);\n}\nfunction getMethodsFor(name) {\n  return methods$1[name] || {};\n}\nfunction getMethodNames() {\n  return [...new Set(names)];\n}\nfunction addMethodNames(_names) {\n  names.push(..._names);\n}\n\n// Map function\nfunction map(array, block) {\n  let i;\n  const il = array.length;\n  const result = [];\n  for (i = 0; i < il; i++) {\n    result.push(block(array[i]));\n  }\n  return result;\n}\n\n// Filter function\nfunction filter(array, block) {\n  let i;\n  const il = array.length;\n  const result = [];\n  for (i = 0; i < il; i++) {\n    if (block(array[i])) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n}\n\n// Degrees to radians\nfunction radians(d) {\n  return d % 360 * Math.PI / 180;\n}\n\n// Radians to degrees\nfunction degrees(r) {\n  return r * 180 / Math.PI % 360;\n}\n\n// Convert camel cased string to dash separated\nfunction unCamelCase(s) {\n  return s.replace(/([A-Z])/g, function (m, g) {\n    return '-' + g.toLowerCase();\n  });\n}\n\n// Capitalize first letter of a string\nfunction capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n// Calculate proportional width and height values when necessary\nfunction proportionalSize(element, width, height, box) {\n  if (width == null || height == null) {\n    box = box || element.bbox();\n    if (width == null) {\n      width = box.width / box.height * height;\n    } else if (height == null) {\n      height = box.height / box.width * width;\n    }\n  }\n  return {\n    width: width,\n    height: height\n  };\n}\n\n/**\n * This function adds support for string origins.\n * It searches for an origin in o.origin o.ox and o.originX.\n * This way, origin: {x: 'center', y: 50} can be passed as well as ox: 'center', oy: 50\n **/\nfunction getOrigin(o, element) {\n  const origin = o.origin;\n  // First check if origin is in ox or originX\n  let ox = o.ox != null ? o.ox : o.originX != null ? o.originX : 'center';\n  let oy = o.oy != null ? o.oy : o.originY != null ? o.originY : 'center';\n\n  // Then check if origin was used and overwrite in that case\n  if (origin != null) {\n    [ox, oy] = Array.isArray(origin) ? origin : typeof origin === 'object' ? [origin.x, origin.y] : [origin, origin];\n  }\n\n  // Make sure to only call bbox when actually needed\n  const condX = typeof ox === 'string';\n  const condY = typeof oy === 'string';\n  if (condX || condY) {\n    const {\n      height,\n      width,\n      x,\n      y\n    } = element.bbox();\n\n    // And only overwrite if string was passed for this specific axis\n    if (condX) {\n      ox = ox.includes('left') ? x : ox.includes('right') ? x + width : x + width / 2;\n    }\n    if (condY) {\n      oy = oy.includes('top') ? y : oy.includes('bottom') ? y + height : y + height / 2;\n    }\n  }\n\n  // Return the origin as it is if it wasn't a string\n  return [ox, oy];\n}\nconst descriptiveElements = new Set(['desc', 'metadata', 'title']);\nconst isDescriptive = element => descriptiveElements.has(element.nodeName);\nconst writeDataToDom = (element, data, defaults = {}) => {\n  const cloned = {\n    ...data\n  };\n  for (const key in cloned) {\n    if (cloned[key].valueOf() === defaults[key]) {\n      delete cloned[key];\n    }\n  }\n  if (Object.keys(cloned).length) {\n    element.node.setAttribute('data-svgjs', JSON.stringify(cloned)); // see #428\n  } else {\n    element.node.removeAttribute('data-svgjs');\n    element.node.removeAttribute('svgjs:data');\n  }\n};\n\nvar utils = {\n  __proto__: null,\n  capitalize: capitalize,\n  degrees: degrees,\n  filter: filter,\n  getOrigin: getOrigin,\n  isDescriptive: isDescriptive,\n  map: map,\n  proportionalSize: proportionalSize,\n  radians: radians,\n  unCamelCase: unCamelCase,\n  writeDataToDom: writeDataToDom\n};\n\n// Default namespaces\nconst svg = 'http://www.w3.org/2000/svg';\nconst html = 'http://www.w3.org/1999/xhtml';\nconst xmlns = 'http://www.w3.org/2000/xmlns/';\nconst xlink = 'http://www.w3.org/1999/xlink';\n\nvar namespaces = {\n  __proto__: null,\n  html: html,\n  svg: svg,\n  xlink: xlink,\n  xmlns: xmlns\n};\n\nconst globals = {\n  window: typeof window === 'undefined' ? null : window,\n  document: typeof document === 'undefined' ? null : document\n};\nfunction registerWindow(win = null, doc = null) {\n  globals.window = win;\n  globals.document = doc;\n}\nconst save = {};\nfunction saveWindow() {\n  save.window = globals.window;\n  save.document = globals.document;\n}\nfunction restoreWindow() {\n  globals.window = save.window;\n  globals.document = save.document;\n}\nfunction withWindow(win, fn) {\n  saveWindow();\n  registerWindow(win, win.document);\n  fn(win, win.document);\n  restoreWindow();\n}\nfunction getWindow() {\n  return globals.window;\n}\n\nclass Base {\n  // constructor (node/*, {extensions = []} */) {\n  //   // this.tags = []\n  //   //\n  //   // for (let extension of extensions) {\n  //   //   extension.setup.call(this, node)\n  //   //   this.tags.push(extension.name)\n  //   // }\n  // }\n}\n\nconst elements = {};\nconst root = '___SYMBOL___ROOT___';\n\n// Method for element creation\nfunction create(name, ns = svg) {\n  // create element\n  return globals.document.createElementNS(ns, name);\n}\nfunction makeInstance(element, isHTML = false) {\n  if (element instanceof Base) return element;\n  if (typeof element === 'object') {\n    return adopter(element);\n  }\n  if (element == null) {\n    return new elements[root]();\n  }\n  if (typeof element === 'string' && element.charAt(0) !== '<') {\n    return adopter(globals.document.querySelector(element));\n  }\n\n  // Make sure, that HTML elements are created with the correct namespace\n  const wrapper = isHTML ? globals.document.createElement('div') : create('svg');\n  wrapper.innerHTML = element;\n\n  // We can use firstChild here because we know,\n  // that the first char is < and thus an element\n  element = adopter(wrapper.firstChild);\n\n  // make sure, that element doesn't have its wrapper attached\n  wrapper.removeChild(wrapper.firstChild);\n  return element;\n}\nfunction nodeOrNew(name, node) {\n  return node && (node instanceof globals.window.Node || node.ownerDocument && node instanceof node.ownerDocument.defaultView.Node) ? node : create(name);\n}\n\n// Adopt existing svg elements\nfunction adopt(node) {\n  // check for presence of node\n  if (!node) return null;\n\n  // make sure a node isn't already adopted\n  if (node.instance instanceof Base) return node.instance;\n  if (node.nodeName === '#document-fragment') {\n    return new elements.Fragment(node);\n  }\n\n  // initialize variables\n  let className = capitalize(node.nodeName || 'Dom');\n\n  // Make sure that gradients are adopted correctly\n  if (className === 'LinearGradient' || className === 'RadialGradient') {\n    className = 'Gradient';\n\n    // Fallback to Dom if element is not known\n  } else if (!elements[className]) {\n    className = 'Dom';\n  }\n  return new elements[className](node);\n}\nlet adopter = adopt;\nfunction mockAdopt(mock = adopt) {\n  adopter = mock;\n}\nfunction register(element, name = element.name, asRoot = false) {\n  elements[name] = element;\n  if (asRoot) elements[root] = element;\n  addMethodNames(Object.getOwnPropertyNames(element.prototype));\n  return element;\n}\nfunction getClass(name) {\n  return elements[name];\n}\n\n// Element id sequence\nlet did = 1000;\n\n// Get next named element id\nfunction eid(name) {\n  return 'Svgjs' + capitalize(name) + did++;\n}\n\n// Deep new id assignment\nfunction assignNewId(node) {\n  // do the same for SVG child nodes as well\n  for (let i = node.children.length - 1; i >= 0; i--) {\n    assignNewId(node.children[i]);\n  }\n  if (node.id) {\n    node.id = eid(node.nodeName);\n    return node;\n  }\n  return node;\n}\n\n// Method for extending objects\nfunction extend(modules, methods) {\n  let key, i;\n  modules = Array.isArray(modules) ? modules : [modules];\n  for (i = modules.length - 1; i >= 0; i--) {\n    for (key in methods) {\n      modules[i].prototype[key] = methods[key];\n    }\n  }\n}\nfunction wrapWithAttrCheck(fn) {\n  return function (...args) {\n    const o = args[args.length - 1];\n    if (o && o.constructor === Object && !(o instanceof Array)) {\n      return fn.apply(this, args.slice(0, -1)).attr(o);\n    } else {\n      return fn.apply(this, args);\n    }\n  };\n}\n\n// Get all siblings, including myself\nfunction siblings() {\n  return this.parent().children();\n}\n\n// Get the current position siblings\nfunction position() {\n  return this.parent().index(this);\n}\n\n// Get the next element (will return null if there is none)\nfunction next() {\n  return this.siblings()[this.position() + 1];\n}\n\n// Get the next element (will return null if there is none)\nfunction prev() {\n  return this.siblings()[this.position() - 1];\n}\n\n// Send given element one step forward\nfunction forward() {\n  const i = this.position();\n  const p = this.parent();\n\n  // move node one step forward\n  p.add(this.remove(), i + 1);\n  return this;\n}\n\n// Send given element one step backward\nfunction backward() {\n  const i = this.position();\n  const p = this.parent();\n  p.add(this.remove(), i ? i - 1 : 0);\n  return this;\n}\n\n// Send given element all the way to the front\nfunction front() {\n  const p = this.parent();\n\n  // Move node forward\n  p.add(this.remove());\n  return this;\n}\n\n// Send given element all the way to the back\nfunction back() {\n  const p = this.parent();\n\n  // Move node back\n  p.add(this.remove(), 0);\n  return this;\n}\n\n// Inserts a given element before the targeted element\nfunction before(element) {\n  element = makeInstance(element);\n  element.remove();\n  const i = this.position();\n  this.parent().add(element, i);\n  return this;\n}\n\n// Inserts a given element after the targeted element\nfunction after(element) {\n  element = makeInstance(element);\n  element.remove();\n  const i = this.position();\n  this.parent().add(element, i + 1);\n  return this;\n}\nfunction insertBefore(element) {\n  element = makeInstance(element);\n  element.before(this);\n  return this;\n}\nfunction insertAfter(element) {\n  element = makeInstance(element);\n  element.after(this);\n  return this;\n}\nregisterMethods('Dom', {\n  siblings,\n  position,\n  next,\n  prev,\n  forward,\n  backward,\n  front,\n  back,\n  before,\n  after,\n  insertBefore,\n  insertAfter\n});\n\n// Parse unit value\nconst numberAndUnit = /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i;\n\n// Parse hex value\nconst hex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\n// Parse rgb value\nconst rgb = /rgb\\((\\d+),(\\d+),(\\d+)\\)/;\n\n// Parse reference id\nconst reference = /(#[a-z_][a-z0-9\\-_]*)/i;\n\n// splits a transformation chain\nconst transforms = /\\)\\s*,?\\s*/;\n\n// Whitespace\nconst whitespace = /\\s/g;\n\n// Test hex value\nconst isHex = /^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i;\n\n// Test rgb value\nconst isRgb = /^rgb\\(/;\n\n// Test for blank string\nconst isBlank = /^(\\s+)?$/;\n\n// Test for numeric string\nconst isNumber = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n\n// Test for image url\nconst isImage = /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i;\n\n// split at whitespace and comma\nconst delimiter = /[\\s,]+/;\n\n// Test for path letter\nconst isPathLetter = /[MLHVCSQTAZ]/i;\n\nvar regex = {\n  __proto__: null,\n  delimiter: delimiter,\n  hex: hex,\n  isBlank: isBlank,\n  isHex: isHex,\n  isImage: isImage,\n  isNumber: isNumber,\n  isPathLetter: isPathLetter,\n  isRgb: isRgb,\n  numberAndUnit: numberAndUnit,\n  reference: reference,\n  rgb: rgb,\n  transforms: transforms,\n  whitespace: whitespace\n};\n\n// Return array of classes on the node\nfunction classes() {\n  const attr = this.attr('class');\n  return attr == null ? [] : attr.trim().split(delimiter);\n}\n\n// Return true if class exists on the node, false otherwise\nfunction hasClass(name) {\n  return this.classes().indexOf(name) !== -1;\n}\n\n// Add class to the node\nfunction addClass(name) {\n  if (!this.hasClass(name)) {\n    const array = this.classes();\n    array.push(name);\n    this.attr('class', array.join(' '));\n  }\n  return this;\n}\n\n// Remove class from the node\nfunction removeClass(name) {\n  if (this.hasClass(name)) {\n    this.attr('class', this.classes().filter(function (c) {\n      return c !== name;\n    }).join(' '));\n  }\n  return this;\n}\n\n// Toggle the presence of a class on the node\nfunction toggleClass(name) {\n  return this.hasClass(name) ? this.removeClass(name) : this.addClass(name);\n}\nregisterMethods('Dom', {\n  classes,\n  hasClass,\n  addClass,\n  removeClass,\n  toggleClass\n});\n\n// Dynamic style generator\nfunction css(style, val) {\n  const ret = {};\n  if (arguments.length === 0) {\n    // get full style as object\n    this.node.style.cssText.split(/\\s*;\\s*/).filter(function (el) {\n      return !!el.length;\n    }).forEach(function (el) {\n      const t = el.split(/\\s*:\\s*/);\n      ret[t[0]] = t[1];\n    });\n    return ret;\n  }\n  if (arguments.length < 2) {\n    // get style properties as array\n    if (Array.isArray(style)) {\n      for (const name of style) {\n        const cased = name;\n        ret[name] = this.node.style.getPropertyValue(cased);\n      }\n      return ret;\n    }\n\n    // get style for property\n    if (typeof style === 'string') {\n      return this.node.style.getPropertyValue(style);\n    }\n\n    // set styles in object\n    if (typeof style === 'object') {\n      for (const name in style) {\n        // set empty string if null/undefined/'' was given\n        this.node.style.setProperty(name, style[name] == null || isBlank.test(style[name]) ? '' : style[name]);\n      }\n    }\n  }\n\n  // set style for property\n  if (arguments.length === 2) {\n    this.node.style.setProperty(style, val == null || isBlank.test(val) ? '' : val);\n  }\n  return this;\n}\n\n// Show element\nfunction show() {\n  return this.css('display', '');\n}\n\n// Hide element\nfunction hide() {\n  return this.css('display', 'none');\n}\n\n// Is element visible?\nfunction visible() {\n  return this.css('display') !== 'none';\n}\nregisterMethods('Dom', {\n  css,\n  show,\n  hide,\n  visible\n});\n\n// Store data values on svg nodes\nfunction data(a, v, r) {\n  if (a == null) {\n    // get an object of attributes\n    return this.data(map(filter(this.node.attributes, el => el.nodeName.indexOf('data-') === 0), el => el.nodeName.slice(5)));\n  } else if (a instanceof Array) {\n    const data = {};\n    for (const key of a) {\n      data[key] = this.data(key);\n    }\n    return data;\n  } else if (typeof a === 'object') {\n    for (v in a) {\n      this.data(v, a[v]);\n    }\n  } else if (arguments.length < 2) {\n    try {\n      return JSON.parse(this.attr('data-' + a));\n    } catch (e) {\n      return this.attr('data-' + a);\n    }\n  } else {\n    this.attr('data-' + a, v === null ? null : r === true || typeof v === 'string' || typeof v === 'number' ? v : JSON.stringify(v));\n  }\n  return this;\n}\nregisterMethods('Dom', {\n  data\n});\n\n// Remember arbitrary data\nfunction remember(k, v) {\n  // remember every item in an object individually\n  if (typeof arguments[0] === 'object') {\n    for (const key in k) {\n      this.remember(key, k[key]);\n    }\n  } else if (arguments.length === 1) {\n    // retrieve memory\n    return this.memory()[k];\n  } else {\n    // store memory\n    this.memory()[k] = v;\n  }\n  return this;\n}\n\n// Erase a given memory\nfunction forget() {\n  if (arguments.length === 0) {\n    this._memory = {};\n  } else {\n    for (let i = arguments.length - 1; i >= 0; i--) {\n      delete this.memory()[arguments[i]];\n    }\n  }\n  return this;\n}\n\n// This triggers creation of a new hidden class which is not performant\n// However, this function is not rarely used so it will not happen frequently\n// Return local memory object\nfunction memory() {\n  return this._memory = this._memory || {};\n}\nregisterMethods('Dom', {\n  remember,\n  forget,\n  memory\n});\n\nfunction sixDigitHex(hex) {\n  return hex.length === 4 ? ['#', hex.substring(1, 2), hex.substring(1, 2), hex.substring(2, 3), hex.substring(2, 3), hex.substring(3, 4), hex.substring(3, 4)].join('') : hex;\n}\nfunction componentHex(component) {\n  const integer = Math.round(component);\n  const bounded = Math.max(0, Math.min(255, integer));\n  const hex = bounded.toString(16);\n  return hex.length === 1 ? '0' + hex : hex;\n}\nfunction is(object, space) {\n  for (let i = space.length; i--;) {\n    if (object[space[i]] == null) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getParameters(a, b) {\n  const params = is(a, 'rgb') ? {\n    _a: a.r,\n    _b: a.g,\n    _c: a.b,\n    _d: 0,\n    space: 'rgb'\n  } : is(a, 'xyz') ? {\n    _a: a.x,\n    _b: a.y,\n    _c: a.z,\n    _d: 0,\n    space: 'xyz'\n  } : is(a, 'hsl') ? {\n    _a: a.h,\n    _b: a.s,\n    _c: a.l,\n    _d: 0,\n    space: 'hsl'\n  } : is(a, 'lab') ? {\n    _a: a.l,\n    _b: a.a,\n    _c: a.b,\n    _d: 0,\n    space: 'lab'\n  } : is(a, 'lch') ? {\n    _a: a.l,\n    _b: a.c,\n    _c: a.h,\n    _d: 0,\n    space: 'lch'\n  } : is(a, 'cmyk') ? {\n    _a: a.c,\n    _b: a.m,\n    _c: a.y,\n    _d: a.k,\n    space: 'cmyk'\n  } : {\n    _a: 0,\n    _b: 0,\n    _c: 0,\n    space: 'rgb'\n  };\n  params.space = b || params.space;\n  return params;\n}\nfunction cieSpace(space) {\n  if (space === 'lab' || space === 'xyz' || space === 'lch') {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction hueToRgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\nclass Color {\n  constructor(...inputs) {\n    this.init(...inputs);\n  }\n\n  // Test if given value is a color\n  static isColor(color) {\n    return color && (color instanceof Color || this.isRgb(color) || this.test(color));\n  }\n\n  // Test if given value is an rgb object\n  static isRgb(color) {\n    return color && typeof color.r === 'number' && typeof color.g === 'number' && typeof color.b === 'number';\n  }\n\n  /*\n  Generating random colors\n  */\n  static random(mode = 'vibrant', t) {\n    // Get the math modules\n    const {\n      random,\n      round,\n      sin,\n      PI: pi\n    } = Math;\n\n    // Run the correct generator\n    if (mode === 'vibrant') {\n      const l = (81 - 57) * random() + 57;\n      const c = (83 - 45) * random() + 45;\n      const h = 360 * random();\n      const color = new Color(l, c, h, 'lch');\n      return color;\n    } else if (mode === 'sine') {\n      t = t == null ? random() : t;\n      const r = round(80 * sin(2 * pi * t / 0.5 + 0.01) + 150);\n      const g = round(50 * sin(2 * pi * t / 0.5 + 4.6) + 200);\n      const b = round(100 * sin(2 * pi * t / 0.5 + 2.3) + 150);\n      const color = new Color(r, g, b);\n      return color;\n    } else if (mode === 'pastel') {\n      const l = (94 - 86) * random() + 86;\n      const c = (26 - 9) * random() + 9;\n      const h = 360 * random();\n      const color = new Color(l, c, h, 'lch');\n      return color;\n    } else if (mode === 'dark') {\n      const l = 10 + 10 * random();\n      const c = (125 - 75) * random() + 86;\n      const h = 360 * random();\n      const color = new Color(l, c, h, 'lch');\n      return color;\n    } else if (mode === 'rgb') {\n      const r = 255 * random();\n      const g = 255 * random();\n      const b = 255 * random();\n      const color = new Color(r, g, b);\n      return color;\n    } else if (mode === 'lab') {\n      const l = 100 * random();\n      const a = 256 * random() - 128;\n      const b = 256 * random() - 128;\n      const color = new Color(l, a, b, 'lab');\n      return color;\n    } else if (mode === 'grey') {\n      const grey = 255 * random();\n      const color = new Color(grey, grey, grey);\n      return color;\n    } else {\n      throw new Error('Unsupported random color mode');\n    }\n  }\n\n  // Test if given value is a color string\n  static test(color) {\n    return typeof color === 'string' && (isHex.test(color) || isRgb.test(color));\n  }\n  cmyk() {\n    // Get the rgb values for the current color\n    const {\n      _a,\n      _b,\n      _c\n    } = this.rgb();\n    const [r, g, b] = [_a, _b, _c].map(v => v / 255);\n\n    // Get the cmyk values in an unbounded format\n    const k = Math.min(1 - r, 1 - g, 1 - b);\n    if (k === 1) {\n      // Catch the black case\n      return new Color(0, 0, 0, 1, 'cmyk');\n    }\n    const c = (1 - r - k) / (1 - k);\n    const m = (1 - g - k) / (1 - k);\n    const y = (1 - b - k) / (1 - k);\n\n    // Construct the new color\n    const color = new Color(c, m, y, k, 'cmyk');\n    return color;\n  }\n  hsl() {\n    // Get the rgb values\n    const {\n      _a,\n      _b,\n      _c\n    } = this.rgb();\n    const [r, g, b] = [_a, _b, _c].map(v => v / 255);\n\n    // Find the maximum and minimum values to get the lightness\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = (max + min) / 2;\n\n    // If the r, g, v values are identical then we are grey\n    const isGrey = max === min;\n\n    // Calculate the hue and saturation\n    const delta = max - min;\n    const s = isGrey ? 0 : l > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n    const h = isGrey ? 0 : max === r ? ((g - b) / delta + (g < b ? 6 : 0)) / 6 : max === g ? ((b - r) / delta + 2) / 6 : max === b ? ((r - g) / delta + 4) / 6 : 0;\n\n    // Construct and return the new color\n    const color = new Color(360 * h, 100 * s, 100 * l, 'hsl');\n    return color;\n  }\n  init(a = 0, b = 0, c = 0, d = 0, space = 'rgb') {\n    // This catches the case when a falsy value is passed like ''\n    a = !a ? 0 : a;\n\n    // Reset all values in case the init function is rerun with new color space\n    if (this.space) {\n      for (const component in this.space) {\n        delete this[this.space[component]];\n      }\n    }\n    if (typeof a === 'number') {\n      // Allow for the case that we don't need d...\n      space = typeof d === 'string' ? d : space;\n      d = typeof d === 'string' ? 0 : d;\n\n      // Assign the values straight to the color\n      Object.assign(this, {\n        _a: a,\n        _b: b,\n        _c: c,\n        _d: d,\n        space\n      });\n      // If the user gave us an array, make the color from it\n    } else if (a instanceof Array) {\n      this.space = b || (typeof a[3] === 'string' ? a[3] : a[4]) || 'rgb';\n      Object.assign(this, {\n        _a: a[0],\n        _b: a[1],\n        _c: a[2],\n        _d: a[3] || 0\n      });\n    } else if (a instanceof Object) {\n      // Set the object up and assign its values directly\n      const values = getParameters(a, b);\n      Object.assign(this, values);\n    } else if (typeof a === 'string') {\n      if (isRgb.test(a)) {\n        const noWhitespace = a.replace(whitespace, '');\n        const [_a, _b, _c] = rgb.exec(noWhitespace).slice(1, 4).map(v => parseInt(v));\n        Object.assign(this, {\n          _a,\n          _b,\n          _c,\n          _d: 0,\n          space: 'rgb'\n        });\n      } else if (isHex.test(a)) {\n        const hexParse = v => parseInt(v, 16);\n        const [, _a, _b, _c] = hex.exec(sixDigitHex(a)).map(hexParse);\n        Object.assign(this, {\n          _a,\n          _b,\n          _c,\n          _d: 0,\n          space: 'rgb'\n        });\n      } else throw Error(\"Unsupported string format, can't construct Color\");\n    }\n\n    // Now add the components as a convenience\n    const {\n      _a,\n      _b,\n      _c,\n      _d\n    } = this;\n    const components = this.space === 'rgb' ? {\n      r: _a,\n      g: _b,\n      b: _c\n    } : this.space === 'xyz' ? {\n      x: _a,\n      y: _b,\n      z: _c\n    } : this.space === 'hsl' ? {\n      h: _a,\n      s: _b,\n      l: _c\n    } : this.space === 'lab' ? {\n      l: _a,\n      a: _b,\n      b: _c\n    } : this.space === 'lch' ? {\n      l: _a,\n      c: _b,\n      h: _c\n    } : this.space === 'cmyk' ? {\n      c: _a,\n      m: _b,\n      y: _c,\n      k: _d\n    } : {};\n    Object.assign(this, components);\n  }\n  lab() {\n    // Get the xyz color\n    const {\n      x,\n      y,\n      z\n    } = this.xyz();\n\n    // Get the lab components\n    const l = 116 * y - 16;\n    const a = 500 * (x - y);\n    const b = 200 * (y - z);\n\n    // Construct and return a new color\n    const color = new Color(l, a, b, 'lab');\n    return color;\n  }\n  lch() {\n    // Get the lab color directly\n    const {\n      l,\n      a,\n      b\n    } = this.lab();\n\n    // Get the chromaticity and the hue using polar coordinates\n    const c = Math.sqrt(a ** 2 + b ** 2);\n    let h = 180 * Math.atan2(b, a) / Math.PI;\n    if (h < 0) {\n      h *= -1;\n      h = 360 - h;\n    }\n\n    // Make a new color and return it\n    const color = new Color(l, c, h, 'lch');\n    return color;\n  }\n  /*\n  Conversion Methods\n  */\n\n  rgb() {\n    if (this.space === 'rgb') {\n      return this;\n    } else if (cieSpace(this.space)) {\n      // Convert to the xyz color space\n      let {\n        x,\n        y,\n        z\n      } = this;\n      if (this.space === 'lab' || this.space === 'lch') {\n        // Get the values in the lab space\n        let {\n          l,\n          a,\n          b\n        } = this;\n        if (this.space === 'lch') {\n          const {\n            c,\n            h\n          } = this;\n          const dToR = Math.PI / 180;\n          a = c * Math.cos(dToR * h);\n          b = c * Math.sin(dToR * h);\n        }\n\n        // Undo the nonlinear function\n        const yL = (l + 16) / 116;\n        const xL = a / 500 + yL;\n        const zL = yL - b / 200;\n\n        // Get the xyz values\n        const ct = 16 / 116;\n        const mx = 0.008856;\n        const nm = 7.787;\n        x = 0.95047 * (xL ** 3 > mx ? xL ** 3 : (xL - ct) / nm);\n        y = 1.0 * (yL ** 3 > mx ? yL ** 3 : (yL - ct) / nm);\n        z = 1.08883 * (zL ** 3 > mx ? zL ** 3 : (zL - ct) / nm);\n      }\n\n      // Convert xyz to unbounded rgb values\n      const rU = x * 3.2406 + y * -1.5372 + z * -0.4986;\n      const gU = x * -0.9689 + y * 1.8758 + z * 0.0415;\n      const bU = x * 0.0557 + y * -0.204 + z * 1.057;\n\n      // Convert the values to true rgb values\n      const pow = Math.pow;\n      const bd = 0.0031308;\n      const r = rU > bd ? 1.055 * pow(rU, 1 / 2.4) - 0.055 : 12.92 * rU;\n      const g = gU > bd ? 1.055 * pow(gU, 1 / 2.4) - 0.055 : 12.92 * gU;\n      const b = bU > bd ? 1.055 * pow(bU, 1 / 2.4) - 0.055 : 12.92 * bU;\n\n      // Make and return the color\n      const color = new Color(255 * r, 255 * g, 255 * b);\n      return color;\n    } else if (this.space === 'hsl') {\n      // https://bgrins.github.io/TinyColor/docs/tinycolor.html\n      // Get the current hsl values\n      let {\n        h,\n        s,\n        l\n      } = this;\n      h /= 360;\n      s /= 100;\n      l /= 100;\n\n      // If we are grey, then just make the color directly\n      if (s === 0) {\n        l *= 255;\n        const color = new Color(l, l, l);\n        return color;\n      }\n\n      // TODO I have no idea what this does :D If you figure it out, tell me!\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q;\n\n      // Get the rgb values\n      const r = 255 * hueToRgb(p, q, h + 1 / 3);\n      const g = 255 * hueToRgb(p, q, h);\n      const b = 255 * hueToRgb(p, q, h - 1 / 3);\n\n      // Make a new color\n      const color = new Color(r, g, b);\n      return color;\n    } else if (this.space === 'cmyk') {\n      // https://gist.github.com/felipesabino/5066336\n      // Get the normalised cmyk values\n      const {\n        c,\n        m,\n        y,\n        k\n      } = this;\n\n      // Get the rgb values\n      const r = 255 * (1 - Math.min(1, c * (1 - k) + k));\n      const g = 255 * (1 - Math.min(1, m * (1 - k) + k));\n      const b = 255 * (1 - Math.min(1, y * (1 - k) + k));\n\n      // Form the color and return it\n      const color = new Color(r, g, b);\n      return color;\n    } else {\n      return this;\n    }\n  }\n  toArray() {\n    const {\n      _a,\n      _b,\n      _c,\n      _d,\n      space\n    } = this;\n    return [_a, _b, _c, _d, space];\n  }\n  toHex() {\n    const [r, g, b] = this._clamped().map(componentHex);\n    return `#${r}${g}${b}`;\n  }\n  toRgb() {\n    const [rV, gV, bV] = this._clamped();\n    const string = `rgb(${rV},${gV},${bV})`;\n    return string;\n  }\n  toString() {\n    return this.toHex();\n  }\n  xyz() {\n    // Normalise the red, green and blue values\n    const {\n      _a: r255,\n      _b: g255,\n      _c: b255\n    } = this.rgb();\n    const [r, g, b] = [r255, g255, b255].map(v => v / 255);\n\n    // Convert to the lab rgb space\n    const rL = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    const gL = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    const bL = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n    // Convert to the xyz color space without bounding the values\n    const xU = (rL * 0.4124 + gL * 0.3576 + bL * 0.1805) / 0.95047;\n    const yU = (rL * 0.2126 + gL * 0.7152 + bL * 0.0722) / 1.0;\n    const zU = (rL * 0.0193 + gL * 0.1192 + bL * 0.9505) / 1.08883;\n\n    // Get the proper xyz values by applying the bounding\n    const x = xU > 0.008856 ? Math.pow(xU, 1 / 3) : 7.787 * xU + 16 / 116;\n    const y = yU > 0.008856 ? Math.pow(yU, 1 / 3) : 7.787 * yU + 16 / 116;\n    const z = zU > 0.008856 ? Math.pow(zU, 1 / 3) : 7.787 * zU + 16 / 116;\n\n    // Make and return the color\n    const color = new Color(x, y, z, 'xyz');\n    return color;\n  }\n\n  /*\n  Input and Output methods\n  */\n\n  _clamped() {\n    const {\n      _a,\n      _b,\n      _c\n    } = this.rgb();\n    const {\n      max,\n      min,\n      round\n    } = Math;\n    const format = v => max(0, min(round(v), 255));\n    return [_a, _b, _c].map(format);\n  }\n\n  /*\n  Constructing colors\n  */\n}\n\nclass Point {\n  // Initialize\n  constructor(...args) {\n    this.init(...args);\n  }\n\n  // Clone point\n  clone() {\n    return new Point(this);\n  }\n  init(x, y) {\n    const base = {\n      x: 0,\n      y: 0\n    };\n\n    // ensure source as object\n    const source = Array.isArray(x) ? {\n      x: x[0],\n      y: x[1]\n    } : typeof x === 'object' ? {\n      x: x.x,\n      y: x.y\n    } : {\n      x: x,\n      y: y\n    };\n\n    // merge source\n    this.x = source.x == null ? base.x : source.x;\n    this.y = source.y == null ? base.y : source.y;\n    return this;\n  }\n  toArray() {\n    return [this.x, this.y];\n  }\n  transform(m) {\n    return this.clone().transformO(m);\n  }\n\n  // Transform point with matrix\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m);\n    }\n    const {\n      x,\n      y\n    } = this;\n\n    // Perform the matrix multiplication\n    this.x = m.a * x + m.c * y + m.e;\n    this.y = m.b * x + m.d * y + m.f;\n    return this;\n  }\n}\nfunction point(x, y) {\n  return new Point(x, y).transformO(this.screenCTM().inverseO());\n}\n\nfunction closeEnough(a, b, threshold) {\n  return Math.abs(b - a) < (1e-6);\n}\nclass Matrix {\n  constructor(...args) {\n    this.init(...args);\n  }\n  static formatTransforms(o) {\n    // Get all of the parameters required to form the matrix\n    const flipBoth = o.flip === 'both' || o.flip === true;\n    const flipX = o.flip && (flipBoth || o.flip === 'x') ? -1 : 1;\n    const flipY = o.flip && (flipBoth || o.flip === 'y') ? -1 : 1;\n    const skewX = o.skew && o.skew.length ? o.skew[0] : isFinite(o.skew) ? o.skew : isFinite(o.skewX) ? o.skewX : 0;\n    const skewY = o.skew && o.skew.length ? o.skew[1] : isFinite(o.skew) ? o.skew : isFinite(o.skewY) ? o.skewY : 0;\n    const scaleX = o.scale && o.scale.length ? o.scale[0] * flipX : isFinite(o.scale) ? o.scale * flipX : isFinite(o.scaleX) ? o.scaleX * flipX : flipX;\n    const scaleY = o.scale && o.scale.length ? o.scale[1] * flipY : isFinite(o.scale) ? o.scale * flipY : isFinite(o.scaleY) ? o.scaleY * flipY : flipY;\n    const shear = o.shear || 0;\n    const theta = o.rotate || o.theta || 0;\n    const origin = new Point(o.origin || o.around || o.ox || o.originX, o.oy || o.originY);\n    const ox = origin.x;\n    const oy = origin.y;\n    // We need Point to be invalid if nothing was passed because we cannot default to 0 here. That is why NaN\n    const position = new Point(o.position || o.px || o.positionX || NaN, o.py || o.positionY || NaN);\n    const px = position.x;\n    const py = position.y;\n    const translate = new Point(o.translate || o.tx || o.translateX, o.ty || o.translateY);\n    const tx = translate.x;\n    const ty = translate.y;\n    const relative = new Point(o.relative || o.rx || o.relativeX, o.ry || o.relativeY);\n    const rx = relative.x;\n    const ry = relative.y;\n\n    // Populate all of the values\n    return {\n      scaleX,\n      scaleY,\n      skewX,\n      skewY,\n      shear,\n      theta,\n      rx,\n      ry,\n      tx,\n      ty,\n      ox,\n      oy,\n      px,\n      py\n    };\n  }\n  static fromArray(a) {\n    return {\n      a: a[0],\n      b: a[1],\n      c: a[2],\n      d: a[3],\n      e: a[4],\n      f: a[5]\n    };\n  }\n  static isMatrixLike(o) {\n    return o.a != null || o.b != null || o.c != null || o.d != null || o.e != null || o.f != null;\n  }\n\n  // left matrix, right matrix, target matrix which is overwritten\n  static matrixMultiply(l, r, o) {\n    // Work out the product directly\n    const a = l.a * r.a + l.c * r.b;\n    const b = l.b * r.a + l.d * r.b;\n    const c = l.a * r.c + l.c * r.d;\n    const d = l.b * r.c + l.d * r.d;\n    const e = l.e + l.a * r.e + l.c * r.f;\n    const f = l.f + l.b * r.e + l.d * r.f;\n\n    // make sure to use local variables because l/r and o could be the same\n    o.a = a;\n    o.b = b;\n    o.c = c;\n    o.d = d;\n    o.e = e;\n    o.f = f;\n    return o;\n  }\n  around(cx, cy, matrix) {\n    return this.clone().aroundO(cx, cy, matrix);\n  }\n\n  // Transform around a center point\n  aroundO(cx, cy, matrix) {\n    const dx = cx || 0;\n    const dy = cy || 0;\n    return this.translateO(-dx, -dy).lmultiplyO(matrix).translateO(dx, dy);\n  }\n\n  // Clones this matrix\n  clone() {\n    return new Matrix(this);\n  }\n\n  // Decomposes this matrix into its affine parameters\n  decompose(cx = 0, cy = 0) {\n    // Get the parameters from the matrix\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const e = this.e;\n    const f = this.f;\n\n    // Figure out if the winding direction is clockwise or counterclockwise\n    const determinant = a * d - b * c;\n    const ccw = determinant > 0 ? 1 : -1;\n\n    // Since we only shear in x, we can use the x basis to get the x scale\n    // and the rotation of the resulting matrix\n    const sx = ccw * Math.sqrt(a * a + b * b);\n    const thetaRad = Math.atan2(ccw * b, ccw * a);\n    const theta = 180 / Math.PI * thetaRad;\n    const ct = Math.cos(thetaRad);\n    const st = Math.sin(thetaRad);\n\n    // We can then solve the y basis vector simultaneously to get the other\n    // two affine parameters directly from these parameters\n    const lam = (a * c + b * d) / determinant;\n    const sy = c * sx / (lam * a - b) || d * sx / (lam * b + a);\n\n    // Use the translations\n    const tx = e - cx + cx * ct * sx + cy * (lam * ct * sx - st * sy);\n    const ty = f - cy + cx * st * sx + cy * (lam * st * sx + ct * sy);\n\n    // Construct the decomposition and return it\n    return {\n      // Return the affine parameters\n      scaleX: sx,\n      scaleY: sy,\n      shear: lam,\n      rotate: theta,\n      translateX: tx,\n      translateY: ty,\n      originX: cx,\n      originY: cy,\n      // Return the matrix parameters\n      a: this.a,\n      b: this.b,\n      c: this.c,\n      d: this.d,\n      e: this.e,\n      f: this.f\n    };\n  }\n\n  // Check if two matrices are equal\n  equals(other) {\n    if (other === this) return true;\n    const comp = new Matrix(other);\n    return closeEnough(this.a, comp.a) && closeEnough(this.b, comp.b) && closeEnough(this.c, comp.c) && closeEnough(this.d, comp.d) && closeEnough(this.e, comp.e) && closeEnough(this.f, comp.f);\n  }\n\n  // Flip matrix on x or y, at a given offset\n  flip(axis, around) {\n    return this.clone().flipO(axis, around);\n  }\n  flipO(axis, around) {\n    return axis === 'x' ? this.scaleO(-1, 1, around, 0) : axis === 'y' ? this.scaleO(1, -1, 0, around) : this.scaleO(-1, -1, axis, around || axis); // Define an x, y flip point\n  }\n\n  // Initialize\n  init(source) {\n    const base = Matrix.fromArray([1, 0, 0, 1, 0, 0]);\n\n    // ensure source as object\n    source = source instanceof Element ? source.matrixify() : typeof source === 'string' ? Matrix.fromArray(source.split(delimiter).map(parseFloat)) : Array.isArray(source) ? Matrix.fromArray(source) : typeof source === 'object' && Matrix.isMatrixLike(source) ? source : typeof source === 'object' ? new Matrix().transform(source) : arguments.length === 6 ? Matrix.fromArray([].slice.call(arguments)) : base;\n\n    // Merge the source matrix with the base matrix\n    this.a = source.a != null ? source.a : base.a;\n    this.b = source.b != null ? source.b : base.b;\n    this.c = source.c != null ? source.c : base.c;\n    this.d = source.d != null ? source.d : base.d;\n    this.e = source.e != null ? source.e : base.e;\n    this.f = source.f != null ? source.f : base.f;\n    return this;\n  }\n  inverse() {\n    return this.clone().inverseO();\n  }\n\n  // Inverses matrix\n  inverseO() {\n    // Get the current parameters out of the matrix\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const e = this.e;\n    const f = this.f;\n\n    // Invert the 2x2 matrix in the top left\n    const det = a * d - b * c;\n    if (!det) throw new Error('Cannot invert ' + this);\n\n    // Calculate the top 2x2 matrix\n    const na = d / det;\n    const nb = -b / det;\n    const nc = -c / det;\n    const nd = a / det;\n\n    // Apply the inverted matrix to the top right\n    const ne = -(na * e + nc * f);\n    const nf = -(nb * e + nd * f);\n\n    // Construct the inverted matrix\n    this.a = na;\n    this.b = nb;\n    this.c = nc;\n    this.d = nd;\n    this.e = ne;\n    this.f = nf;\n    return this;\n  }\n  lmultiply(matrix) {\n    return this.clone().lmultiplyO(matrix);\n  }\n  lmultiplyO(matrix) {\n    const r = this;\n    const l = matrix instanceof Matrix ? matrix : new Matrix(matrix);\n    return Matrix.matrixMultiply(l, r, this);\n  }\n\n  // Left multiplies by the given matrix\n  multiply(matrix) {\n    return this.clone().multiplyO(matrix);\n  }\n  multiplyO(matrix) {\n    // Get the matrices\n    const l = this;\n    const r = matrix instanceof Matrix ? matrix : new Matrix(matrix);\n    return Matrix.matrixMultiply(l, r, this);\n  }\n\n  // Rotate matrix\n  rotate(r, cx, cy) {\n    return this.clone().rotateO(r, cx, cy);\n  }\n  rotateO(r, cx = 0, cy = 0) {\n    // Convert degrees to radians\n    r = radians(r);\n    const cos = Math.cos(r);\n    const sin = Math.sin(r);\n    const {\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    } = this;\n    this.a = a * cos - b * sin;\n    this.b = b * cos + a * sin;\n    this.c = c * cos - d * sin;\n    this.d = d * cos + c * sin;\n    this.e = e * cos - f * sin + cy * sin - cx * cos + cx;\n    this.f = f * cos + e * sin - cx * sin - cy * cos + cy;\n    return this;\n  }\n\n  // Scale matrix\n  scale() {\n    return this.clone().scaleO(...arguments);\n  }\n  scaleO(x, y = x, cx = 0, cy = 0) {\n    // Support uniform scaling\n    if (arguments.length === 3) {\n      cy = cx;\n      cx = y;\n      y = x;\n    }\n    const {\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    } = this;\n    this.a = a * x;\n    this.b = b * y;\n    this.c = c * x;\n    this.d = d * y;\n    this.e = e * x - cx * x + cx;\n    this.f = f * y - cy * y + cy;\n    return this;\n  }\n\n  // Shear matrix\n  shear(a, cx, cy) {\n    return this.clone().shearO(a, cx, cy);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shearO(lx, cx = 0, cy = 0) {\n    const {\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    } = this;\n    this.a = a + b * lx;\n    this.c = c + d * lx;\n    this.e = e + f * lx - cy * lx;\n    return this;\n  }\n\n  // Skew Matrix\n  skew() {\n    return this.clone().skewO(...arguments);\n  }\n  skewO(x, y = x, cx = 0, cy = 0) {\n    // support uniformal skew\n    if (arguments.length === 3) {\n      cy = cx;\n      cx = y;\n      y = x;\n    }\n\n    // Convert degrees to radians\n    x = radians(x);\n    y = radians(y);\n    const lx = Math.tan(x);\n    const ly = Math.tan(y);\n    const {\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    } = this;\n    this.a = a + b * lx;\n    this.b = b + a * ly;\n    this.c = c + d * lx;\n    this.d = d + c * ly;\n    this.e = e + f * lx - cy * lx;\n    this.f = f + e * ly - cx * ly;\n    return this;\n  }\n\n  // SkewX\n  skewX(x, cx, cy) {\n    return this.skew(x, 0, cx, cy);\n  }\n\n  // SkewY\n  skewY(y, cx, cy) {\n    return this.skew(0, y, cx, cy);\n  }\n  toArray() {\n    return [this.a, this.b, this.c, this.d, this.e, this.f];\n  }\n\n  // Convert matrix to string\n  toString() {\n    return 'matrix(' + this.a + ',' + this.b + ',' + this.c + ',' + this.d + ',' + this.e + ',' + this.f + ')';\n  }\n\n  // Transform a matrix into another matrix by manipulating the space\n  transform(o) {\n    // Check if o is a matrix and then left multiply it directly\n    if (Matrix.isMatrixLike(o)) {\n      const matrix = new Matrix(o);\n      return matrix.multiplyO(this);\n    }\n\n    // Get the proposed transformations and the current transformations\n    const t = Matrix.formatTransforms(o);\n    const current = this;\n    const {\n      x: ox,\n      y: oy\n    } = new Point(t.ox, t.oy).transform(current);\n\n    // Construct the resulting matrix\n    const transformer = new Matrix().translateO(t.rx, t.ry).lmultiplyO(current).translateO(-ox, -oy).scaleO(t.scaleX, t.scaleY).skewO(t.skewX, t.skewY).shearO(t.shear).rotateO(t.theta).translateO(ox, oy);\n\n    // If we want the origin at a particular place, we force it there\n    if (isFinite(t.px) || isFinite(t.py)) {\n      const origin = new Point(ox, oy).transform(transformer);\n      // TODO: Replace t.px with isFinite(t.px)\n      // Doesn't work because t.px is also 0 if it wasn't passed\n      const dx = isFinite(t.px) ? t.px - origin.x : 0;\n      const dy = isFinite(t.py) ? t.py - origin.y : 0;\n      transformer.translateO(dx, dy);\n    }\n\n    // Translate now after positioning\n    transformer.translateO(t.tx, t.ty);\n    return transformer;\n  }\n\n  // Translate matrix\n  translate(x, y) {\n    return this.clone().translateO(x, y);\n  }\n  translateO(x, y) {\n    this.e += x || 0;\n    this.f += y || 0;\n    return this;\n  }\n  valueOf() {\n    return {\n      a: this.a,\n      b: this.b,\n      c: this.c,\n      d: this.d,\n      e: this.e,\n      f: this.f\n    };\n  }\n}\nfunction ctm() {\n  return new Matrix(this.node.getCTM());\n}\nfunction screenCTM() {\n  try {\n    /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\n       This is needed because FF does not return the transformation matrix\n       for the inner coordinate system when getScreenCTM() is called on nested svgs.\n       However all other Browsers do that */\n    if (typeof this.isRoot === 'function' && !this.isRoot()) {\n      const rect = this.rect(1, 1);\n      const m = rect.node.getScreenCTM();\n      rect.remove();\n      return new Matrix(m);\n    }\n    return new Matrix(this.node.getScreenCTM());\n  } catch (e) {\n    console.warn(`Cannot get CTM from SVG node ${this.node.nodeName}. Is the element rendered?`);\n    return new Matrix();\n  }\n}\nregister(Matrix, 'Matrix');\n\nfunction parser() {\n  // Reuse cached element if possible\n  if (!parser.nodes) {\n    const svg = makeInstance().size(2, 0);\n    svg.node.style.cssText = ['opacity: 0', 'position: absolute', 'left: -100%', 'top: -100%', 'overflow: hidden'].join(';');\n    svg.attr('focusable', 'false');\n    svg.attr('aria-hidden', 'true');\n    const path = svg.path().node;\n    parser.nodes = {\n      svg,\n      path\n    };\n  }\n  if (!parser.nodes.svg.node.parentNode) {\n    const b = globals.document.body || globals.document.documentElement;\n    parser.nodes.svg.addTo(b);\n  }\n  return parser.nodes;\n}\n\nfunction isNulledBox(box) {\n  return !box.width && !box.height && !box.x && !box.y;\n}\nfunction domContains(node) {\n  return node === globals.document || (globals.document.documentElement.contains || function (node) {\n    // This is IE - it does not support contains() for top-level SVGs\n    while (node.parentNode) {\n      node = node.parentNode;\n    }\n    return node === globals.document;\n  }).call(globals.document.documentElement, node);\n}\nclass Box {\n  constructor(...args) {\n    this.init(...args);\n  }\n  addOffset() {\n    // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n    this.x += globals.window.pageXOffset;\n    this.y += globals.window.pageYOffset;\n    return new Box(this);\n  }\n  init(source) {\n    const base = [0, 0, 0, 0];\n    source = typeof source === 'string' ? source.split(delimiter).map(parseFloat) : Array.isArray(source) ? source : typeof source === 'object' ? [source.left != null ? source.left : source.x, source.top != null ? source.top : source.y, source.width, source.height] : arguments.length === 4 ? [].slice.call(arguments) : base;\n    this.x = source[0] || 0;\n    this.y = source[1] || 0;\n    this.width = this.w = source[2] || 0;\n    this.height = this.h = source[3] || 0;\n\n    // Add more bounding box properties\n    this.x2 = this.x + this.w;\n    this.y2 = this.y + this.h;\n    this.cx = this.x + this.w / 2;\n    this.cy = this.y + this.h / 2;\n    return this;\n  }\n  isNulled() {\n    return isNulledBox(this);\n  }\n\n  // Merge rect box with another, return a new instance\n  merge(box) {\n    const x = Math.min(this.x, box.x);\n    const y = Math.min(this.y, box.y);\n    const width = Math.max(this.x + this.width, box.x + box.width) - x;\n    const height = Math.max(this.y + this.height, box.y + box.height) - y;\n    return new Box(x, y, width, height);\n  }\n  toArray() {\n    return [this.x, this.y, this.width, this.height];\n  }\n  toString() {\n    return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height;\n  }\n  transform(m) {\n    if (!(m instanceof Matrix)) {\n      m = new Matrix(m);\n    }\n    let xMin = Infinity;\n    let xMax = -Infinity;\n    let yMin = Infinity;\n    let yMax = -Infinity;\n    const pts = [new Point(this.x, this.y), new Point(this.x2, this.y), new Point(this.x, this.y2), new Point(this.x2, this.y2)];\n    pts.forEach(function (p) {\n      p = p.transform(m);\n      xMin = Math.min(xMin, p.x);\n      xMax = Math.max(xMax, p.x);\n      yMin = Math.min(yMin, p.y);\n      yMax = Math.max(yMax, p.y);\n    });\n    return new Box(xMin, yMin, xMax - xMin, yMax - yMin);\n  }\n}\nfunction getBox(el, getBBoxFn, retry) {\n  let box;\n  try {\n    // Try to get the box with the provided function\n    box = getBBoxFn(el.node);\n\n    // If the box is worthless and not even in the dom, retry\n    // by throwing an error here...\n    if (isNulledBox(box) && !domContains(el.node)) {\n      throw new Error('Element not in the dom');\n    }\n  } catch (e) {\n    // ... and calling the retry handler here\n    box = retry(el);\n  }\n  return box;\n}\nfunction bbox() {\n  // Function to get bbox is getBBox()\n  const getBBox = node => node.getBBox();\n\n  // Take all measures so that a stupid browser renders the element\n  // so we can get the bbox from it when we try again\n  const retry = el => {\n    try {\n      const clone = el.clone().addTo(parser().svg).show();\n      const box = clone.node.getBBox();\n      clone.remove();\n      return box;\n    } catch (e) {\n      // We give up...\n      throw new Error(`Getting bbox of element \"${el.node.nodeName}\" is not possible: ${e.toString()}`);\n    }\n  };\n  const box = getBox(this, getBBox, retry);\n  const bbox = new Box(box);\n  return bbox;\n}\nfunction rbox(el) {\n  const getRBox = node => node.getBoundingClientRect();\n  const retry = el => {\n    // There is no point in trying tricks here because if we insert the element into the dom ourselves\n    // it obviously will be at the wrong position\n    throw new Error(`Getting rbox of element \"${el.node.nodeName}\" is not possible`);\n  };\n  const box = getBox(this, getRBox, retry);\n  const rbox = new Box(box);\n\n  // If an element was passed, we want the bbox in the coordinate system of that element\n  if (el) {\n    return rbox.transform(el.screenCTM().inverseO());\n  }\n\n  // Else we want it in absolute screen coordinates\n  // Therefore we need to add the scrollOffset\n  return rbox.addOffset();\n}\n\n// Checks whether the given point is inside the bounding box\nfunction inside(x, y) {\n  const box = this.bbox();\n  return x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height;\n}\nregisterMethods({\n  viewbox: {\n    viewbox(x, y, width, height) {\n      // act as getter\n      if (x == null) return new Box(this.attr('viewBox'));\n\n      // act as setter\n      return this.attr('viewBox', new Box(x, y, width, height));\n    },\n    zoom(level, point) {\n      // Its best to rely on the attributes here and here is why:\n      // clientXYZ: Doesn't work on non-root svgs because they dont have a CSSBox (silly!)\n      // getBoundingClientRect: Doesn't work because Chrome just ignores width and height of nested svgs completely\n      //                        that means, their clientRect is always as big as the content.\n      //                        Furthermore this size is incorrect if the element is further transformed by its parents\n      // computedStyle: Only returns meaningful values if css was used with px. We dont go this route here!\n      // getBBox: returns the bounding box of its content - that doesn't help!\n      let {\n        width,\n        height\n      } = this.attr(['width', 'height']);\n\n      // Width and height is a string when a number with a unit is present which we can't use\n      // So we try clientXYZ\n      if (!width && !height || typeof width === 'string' || typeof height === 'string') {\n        width = this.node.clientWidth;\n        height = this.node.clientHeight;\n      }\n\n      // Giving up...\n      if (!width || !height) {\n        throw new Error('Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element');\n      }\n      const v = this.viewbox();\n      const zoomX = width / v.width;\n      const zoomY = height / v.height;\n      const zoom = Math.min(zoomX, zoomY);\n      if (level == null) {\n        return zoom;\n      }\n      let zoomAmount = zoom / level;\n\n      // Set the zoomAmount to the highest value which is safe to process and recover from\n      // The * 100 is a bit of wiggle room for the matrix transformation\n      if (zoomAmount === Infinity) zoomAmount = Number.MAX_SAFE_INTEGER / 100;\n      point = point || new Point(width / 2 / zoomX + v.x, height / 2 / zoomY + v.y);\n      const box = new Box(v).transform(new Matrix({\n        scale: zoomAmount,\n        origin: point\n      }));\n      return this.viewbox(box);\n    }\n  }\n});\nregister(Box, 'Box');\n\n// import { subClassArray } from './ArrayPolyfill.js'\n\nclass List extends Array {\n  constructor(arr = [], ...args) {\n    super(arr, ...args);\n    if (typeof arr === 'number') return this;\n    this.length = 0;\n    this.push(...arr);\n  }\n}\nextend([List], {\n  each(fnOrMethodName, ...args) {\n    if (typeof fnOrMethodName === 'function') {\n      return this.map((el, i, arr) => {\n        return fnOrMethodName.call(el, el, i, arr);\n      });\n    } else {\n      return this.map(el => {\n        return el[fnOrMethodName](...args);\n      });\n    }\n  },\n  toArray() {\n    return Array.prototype.concat.apply([], this);\n  }\n});\nconst reserved = ['toArray', 'constructor', 'each'];\nList.extend = function (methods) {\n  methods = methods.reduce((obj, name) => {\n    // Don't overwrite own methods\n    if (reserved.includes(name)) return obj;\n\n    // Don't add private methods\n    if (name[0] === '_') return obj;\n\n    // Allow access to original Array methods through a prefix\n    if (name in Array.prototype) {\n      obj['$' + name] = Array.prototype[name];\n    }\n\n    // Relay every call to each()\n    obj[name] = function (...attrs) {\n      return this.each(name, ...attrs);\n    };\n    return obj;\n  }, {});\n  extend([List], methods);\n};\n\nfunction baseFind(query, parent) {\n  return new List(map((parent || globals.document).querySelectorAll(query), function (node) {\n    return adopt(node);\n  }));\n}\n\n// Scoped find method\nfunction find(query) {\n  return baseFind(query, this.node);\n}\nfunction findOne(query) {\n  return adopt(this.node.querySelector(query));\n}\n\nlet listenerId = 0;\nconst windowEvents = {};\nfunction getEvents(instance) {\n  let n = instance.getEventHolder();\n\n  // We dont want to save events in global space\n  if (n === globals.window) n = windowEvents;\n  if (!n.events) n.events = {};\n  return n.events;\n}\nfunction getEventTarget(instance) {\n  return instance.getEventTarget();\n}\nfunction clearEvents(instance) {\n  let n = instance.getEventHolder();\n  if (n === globals.window) n = windowEvents;\n  if (n.events) n.events = {};\n}\n\n// Add event binder in the SVG namespace\nfunction on(node, events, listener, binding, options) {\n  const l = listener.bind(binding || node);\n  const instance = makeInstance(node);\n  const bag = getEvents(instance);\n  const n = getEventTarget(instance);\n\n  // events can be an array of events or a string of events\n  events = Array.isArray(events) ? events : events.split(delimiter);\n\n  // add id to listener\n  if (!listener._svgjsListenerId) {\n    listener._svgjsListenerId = ++listenerId;\n  }\n  events.forEach(function (event) {\n    const ev = event.split('.')[0];\n    const ns = event.split('.')[1] || '*';\n\n    // ensure valid object\n    bag[ev] = bag[ev] || {};\n    bag[ev][ns] = bag[ev][ns] || {};\n\n    // reference listener\n    bag[ev][ns][listener._svgjsListenerId] = l;\n\n    // add listener\n    n.addEventListener(ev, l, options || false);\n  });\n}\n\n// Add event unbinder in the SVG namespace\nfunction off(node, events, listener, options) {\n  const instance = makeInstance(node);\n  const bag = getEvents(instance);\n  const n = getEventTarget(instance);\n\n  // listener can be a function or a number\n  if (typeof listener === 'function') {\n    listener = listener._svgjsListenerId;\n    if (!listener) return;\n  }\n\n  // events can be an array of events or a string or undefined\n  events = Array.isArray(events) ? events : (events || '').split(delimiter);\n  events.forEach(function (event) {\n    const ev = event && event.split('.')[0];\n    const ns = event && event.split('.')[1];\n    let namespace, l;\n    if (listener) {\n      // remove listener reference\n      if (bag[ev] && bag[ev][ns || '*']) {\n        // removeListener\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false);\n        delete bag[ev][ns || '*'][listener];\n      }\n    } else if (ev && ns) {\n      // remove all listeners for a namespaced event\n      if (bag[ev] && bag[ev][ns]) {\n        for (l in bag[ev][ns]) {\n          off(n, [ev, ns].join('.'), l);\n        }\n        delete bag[ev][ns];\n      }\n    } else if (ns) {\n      // remove all listeners for a specific namespace\n      for (event in bag) {\n        for (namespace in bag[event]) {\n          if (ns === namespace) {\n            off(n, [event, ns].join('.'));\n          }\n        }\n      }\n    } else if (ev) {\n      // remove all listeners for the event\n      if (bag[ev]) {\n        for (namespace in bag[ev]) {\n          off(n, [ev, namespace].join('.'));\n        }\n        delete bag[ev];\n      }\n    } else {\n      // remove all listeners on a given node\n      for (event in bag) {\n        off(n, event);\n      }\n      clearEvents(instance);\n    }\n  });\n}\nfunction dispatch(node, event, data, options) {\n  const n = getEventTarget(node);\n\n  // Dispatch event\n  if (event instanceof globals.window.Event) {\n    n.dispatchEvent(event);\n  } else {\n    event = new globals.window.CustomEvent(event, {\n      detail: data,\n      cancelable: true,\n      ...options\n    });\n    n.dispatchEvent(event);\n  }\n  return event;\n}\n\nclass EventTarget extends Base {\n  addEventListener() {}\n  dispatch(event, data, options) {\n    return dispatch(this, event, data, options);\n  }\n  dispatchEvent(event) {\n    const bag = this.getEventHolder().events;\n    if (!bag) return true;\n    const events = bag[event.type];\n    for (const i in events) {\n      for (const j in events[i]) {\n        events[i][j](event);\n      }\n    }\n    return !event.defaultPrevented;\n  }\n\n  // Fire given event\n  fire(event, data, options) {\n    this.dispatch(event, data, options);\n    return this;\n  }\n  getEventHolder() {\n    return this;\n  }\n  getEventTarget() {\n    return this;\n  }\n\n  // Unbind event from listener\n  off(event, listener, options) {\n    off(this, event, listener, options);\n    return this;\n  }\n\n  // Bind given event to listener\n  on(event, listener, binding, options) {\n    on(this, event, listener, binding, options);\n    return this;\n  }\n  removeEventListener() {}\n}\nregister(EventTarget, 'EventTarget');\n\nfunction noop() {}\n\n// Default animation values\nconst timeline = {\n  duration: 400,\n  ease: '>',\n  delay: 0\n};\n\n// Default attribute values\nconst attrs = {\n  // fill and stroke\n  'fill-opacity': 1,\n  'stroke-opacity': 1,\n  'stroke-width': 0,\n  'stroke-linejoin': 'miter',\n  'stroke-linecap': 'butt',\n  fill: '#000000',\n  stroke: '#000000',\n  opacity: 1,\n  // position\n  x: 0,\n  y: 0,\n  cx: 0,\n  cy: 0,\n  // size\n  width: 0,\n  height: 0,\n  // radius\n  r: 0,\n  rx: 0,\n  ry: 0,\n  // gradient\n  offset: 0,\n  'stop-opacity': 1,\n  'stop-color': '#000000',\n  // text\n  'text-anchor': 'start'\n};\n\nvar defaults = {\n  __proto__: null,\n  attrs: attrs,\n  noop: noop,\n  timeline: timeline\n};\n\nclass SVGArray extends Array {\n  constructor(...args) {\n    super(...args);\n    this.init(...args);\n  }\n  clone() {\n    return new this.constructor(this);\n  }\n  init(arr) {\n    // This catches the case, that native map tries to create an array with new Array(1)\n    if (typeof arr === 'number') return this;\n    this.length = 0;\n    this.push(...this.parse(arr));\n    return this;\n  }\n\n  // Parse whitespace separated string\n  parse(array = []) {\n    // If already is an array, no need to parse it\n    if (array instanceof Array) return array;\n    return array.trim().split(delimiter).map(parseFloat);\n  }\n  toArray() {\n    return Array.prototype.concat.apply([], this);\n  }\n  toSet() {\n    return new Set(this);\n  }\n  toString() {\n    return this.join(' ');\n  }\n\n  // Flattens the array if needed\n  valueOf() {\n    const ret = [];\n    ret.push(...this);\n    return ret;\n  }\n}\n\n// Module for unit conversions\nclass SVGNumber {\n  // Initialize\n  constructor(...args) {\n    this.init(...args);\n  }\n  convert(unit) {\n    return new SVGNumber(this.value, unit);\n  }\n\n  // Divide number\n  divide(number) {\n    number = new SVGNumber(number);\n    return new SVGNumber(this / number, this.unit || number.unit);\n  }\n  init(value, unit) {\n    unit = Array.isArray(value) ? value[1] : unit;\n    value = Array.isArray(value) ? value[0] : value;\n\n    // initialize defaults\n    this.value = 0;\n    this.unit = unit || '';\n\n    // parse value\n    if (typeof value === 'number') {\n      // ensure a valid numeric value\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? value < 0 ? -3.4e38 : +3.4e38 : value;\n    } else if (typeof value === 'string') {\n      unit = value.match(numberAndUnit);\n      if (unit) {\n        // make value numeric\n        this.value = parseFloat(unit[1]);\n\n        // normalize\n        if (unit[5] === '%') {\n          this.value /= 100;\n        } else if (unit[5] === 's') {\n          this.value *= 1000;\n        }\n\n        // store unit\n        this.unit = unit[5];\n      }\n    } else {\n      if (value instanceof SVGNumber) {\n        this.value = value.valueOf();\n        this.unit = value.unit;\n      }\n    }\n    return this;\n  }\n\n  // Subtract number\n  minus(number) {\n    number = new SVGNumber(number);\n    return new SVGNumber(this - number, this.unit || number.unit);\n  }\n\n  // Add number\n  plus(number) {\n    number = new SVGNumber(number);\n    return new SVGNumber(this + number, this.unit || number.unit);\n  }\n\n  // Multiply number\n  times(number) {\n    number = new SVGNumber(number);\n    return new SVGNumber(this * number, this.unit || number.unit);\n  }\n  toArray() {\n    return [this.value, this.unit];\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toString() {\n    return (this.unit === '%' ? ~~(this.value * 1e8) / 1e6 : this.unit === 's' ? this.value / 1e3 : this.value) + this.unit;\n  }\n  valueOf() {\n    return this.value;\n  }\n}\n\nconst colorAttributes = new Set(['fill', 'stroke', 'color', 'bgcolor', 'stop-color', 'flood-color', 'lighting-color']);\nconst hooks = [];\nfunction registerAttrHook(fn) {\n  hooks.push(fn);\n}\n\n// Set svg element attribute\nfunction attr(attr, val, ns) {\n  // act as full getter\n  if (attr == null) {\n    // get an object of attributes\n    attr = {};\n    val = this.node.attributes;\n    for (const node of val) {\n      attr[node.nodeName] = isNumber.test(node.nodeValue) ? parseFloat(node.nodeValue) : node.nodeValue;\n    }\n    return attr;\n  } else if (attr instanceof Array) {\n    // loop through array and get all values\n    return attr.reduce((last, curr) => {\n      last[curr] = this.attr(curr);\n      return last;\n    }, {});\n  } else if (typeof attr === 'object' && attr.constructor === Object) {\n    // apply every attribute individually if an object is passed\n    for (val in attr) this.attr(val, attr[val]);\n  } else if (val === null) {\n    // remove value\n    this.node.removeAttribute(attr);\n  } else if (val == null) {\n    // act as a getter if the first and only argument is not an object\n    val = this.node.getAttribute(attr);\n    return val == null ? attrs[attr] : isNumber.test(val) ? parseFloat(val) : val;\n  } else {\n    // Loop through hooks and execute them to convert value\n    val = hooks.reduce((_val, hook) => {\n      return hook(attr, _val, this);\n    }, val);\n\n    // ensure correct numeric values (also accepts NaN and Infinity)\n    if (typeof val === 'number') {\n      val = new SVGNumber(val);\n    } else if (colorAttributes.has(attr) && Color.isColor(val)) {\n      // ensure full hex color\n      val = new Color(val);\n    } else if (val.constructor === Array) {\n      // Check for plain arrays and parse array values\n      val = new SVGArray(val);\n    }\n\n    // if the passed attribute is leading...\n    if (attr === 'leading') {\n      // ... call the leading method instead\n      if (this.leading) {\n        this.leading(val);\n      }\n    } else {\n      // set given attribute on node\n      typeof ns === 'string' ? this.node.setAttributeNS(ns, attr, val.toString()) : this.node.setAttribute(attr, val.toString());\n    }\n\n    // rebuild if required\n    if (this.rebuild && (attr === 'font-size' || attr === 'x')) {\n      this.rebuild();\n    }\n  }\n  return this;\n}\n\nclass Dom extends EventTarget {\n  constructor(node, attrs) {\n    super();\n    this.node = node;\n    this.type = node.nodeName;\n    if (attrs && node !== attrs) {\n      this.attr(attrs);\n    }\n  }\n\n  // Add given element at a position\n  add(element, i) {\n    element = makeInstance(element);\n\n    // If non-root svg nodes are added we have to remove their namespaces\n    if (element.removeNamespace && this.node instanceof globals.window.SVGElement) {\n      element.removeNamespace();\n    }\n    if (i == null) {\n      this.node.appendChild(element.node);\n    } else if (element.node !== this.node.childNodes[i]) {\n      this.node.insertBefore(element.node, this.node.childNodes[i]);\n    }\n    return this;\n  }\n\n  // Add element to given container and return self\n  addTo(parent, i) {\n    return makeInstance(parent).put(this, i);\n  }\n\n  // Returns all child elements\n  children() {\n    return new List(map(this.node.children, function (node) {\n      return adopt(node);\n    }));\n  }\n\n  // Remove all elements in this container\n  clear() {\n    // remove children\n    while (this.node.hasChildNodes()) {\n      this.node.removeChild(this.node.lastChild);\n    }\n    return this;\n  }\n\n  // Clone element\n  clone(deep = true, assignNewIds = true) {\n    // write dom data to the dom so the clone can pickup the data\n    this.writeDataToDom();\n\n    // clone element\n    let nodeClone = this.node.cloneNode(deep);\n    if (assignNewIds) {\n      // assign new id\n      nodeClone = assignNewId(nodeClone);\n    }\n    return new this.constructor(nodeClone);\n  }\n\n  // Iterates over all children and invokes a given block\n  each(block, deep) {\n    const children = this.children();\n    let i, il;\n    for (i = 0, il = children.length; i < il; i++) {\n      block.apply(children[i], [i, children]);\n      if (deep) {\n        children[i].each(block, deep);\n      }\n    }\n    return this;\n  }\n  element(nodeName, attrs) {\n    return this.put(new Dom(create(nodeName), attrs));\n  }\n\n  // Get first child\n  first() {\n    return adopt(this.node.firstChild);\n  }\n\n  // Get a element at the given index\n  get(i) {\n    return adopt(this.node.childNodes[i]);\n  }\n  getEventHolder() {\n    return this.node;\n  }\n  getEventTarget() {\n    return this.node;\n  }\n\n  // Checks if the given element is a child\n  has(element) {\n    return this.index(element) >= 0;\n  }\n  html(htmlOrFn, outerHTML) {\n    return this.xml(htmlOrFn, outerHTML, html);\n  }\n\n  // Get / set id\n  id(id) {\n    // generate new id if no id set\n    if (typeof id === 'undefined' && !this.node.id) {\n      this.node.id = eid(this.type);\n    }\n\n    // don't set directly with this.node.id to make `null` work correctly\n    return this.attr('id', id);\n  }\n\n  // Gets index of given element\n  index(element) {\n    return [].slice.call(this.node.childNodes).indexOf(element.node);\n  }\n\n  // Get the last child\n  last() {\n    return adopt(this.node.lastChild);\n  }\n\n  // matches the element vs a css selector\n  matches(selector) {\n    const el = this.node;\n    const matcher = el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector || null;\n    return matcher && matcher.call(el, selector);\n  }\n\n  // Returns the parent element instance\n  parent(type) {\n    let parent = this;\n\n    // check for parent\n    if (!parent.node.parentNode) return null;\n\n    // get parent element\n    parent = adopt(parent.node.parentNode);\n    if (!type) return parent;\n\n    // loop through ancestors if type is given\n    do {\n      if (typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent;\n    } while (parent = adopt(parent.node.parentNode));\n    return parent;\n  }\n\n  // Basically does the same as `add()` but returns the added element instead\n  put(element, i) {\n    element = makeInstance(element);\n    this.add(element, i);\n    return element;\n  }\n\n  // Add element to given container and return container\n  putIn(parent, i) {\n    return makeInstance(parent).add(this, i);\n  }\n\n  // Remove element\n  remove() {\n    if (this.parent()) {\n      this.parent().removeElement(this);\n    }\n    return this;\n  }\n\n  // Remove a given child\n  removeElement(element) {\n    this.node.removeChild(element.node);\n    return this;\n  }\n\n  // Replace this with element\n  replace(element) {\n    element = makeInstance(element);\n    if (this.node.parentNode) {\n      this.node.parentNode.replaceChild(element.node, this.node);\n    }\n    return element;\n  }\n  round(precision = 2, map = null) {\n    const factor = 10 ** precision;\n    const attrs = this.attr(map);\n    for (const i in attrs) {\n      if (typeof attrs[i] === 'number') {\n        attrs[i] = Math.round(attrs[i] * factor) / factor;\n      }\n    }\n    this.attr(attrs);\n    return this;\n  }\n\n  // Import / Export raw svg\n  svg(svgOrFn, outerSVG) {\n    return this.xml(svgOrFn, outerSVG, svg);\n  }\n\n  // Return id on string conversion\n  toString() {\n    return this.id();\n  }\n  words(text) {\n    // This is faster than removing all children and adding a new one\n    this.node.textContent = text;\n    return this;\n  }\n  wrap(node) {\n    const parent = this.parent();\n    if (!parent) {\n      return this.addTo(node);\n    }\n    const position = parent.index(this);\n    return parent.put(node, position).put(this);\n  }\n\n  // write svgjs data to the dom\n  writeDataToDom() {\n    // dump variables recursively\n    this.each(function () {\n      this.writeDataToDom();\n    });\n    return this;\n  }\n\n  // Import / Export raw svg\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML;\n      outerXML = xmlOrFn;\n      xmlOrFn = null;\n    }\n\n    // act as getter if no svg string is given\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      // The default for exports is, that the outerNode is included\n      outerXML = outerXML == null ? true : outerXML;\n\n      // write svgjs data to the dom\n      this.writeDataToDom();\n      let current = this;\n\n      // An export modifier was passed\n      if (xmlOrFn != null) {\n        current = adopt(current.node.cloneNode(true));\n\n        // If the user wants outerHTML we need to process this node, too\n        if (outerXML) {\n          const result = xmlOrFn(current);\n          current = result || current;\n\n          // The user does not want this node? Well, then he gets nothing\n          if (result === false) return '';\n        }\n\n        // Deep loop through all children and apply modifier\n        current.each(function () {\n          const result = xmlOrFn(this);\n          const _this = result || this;\n\n          // If modifier returns false, discard node\n          if (result === false) {\n            this.remove();\n\n            // If modifier returns new node, use it\n          } else if (result && this !== _this) {\n            this.replace(_this);\n          }\n        }, true);\n      }\n\n      // Return outer or inner content\n      return outerXML ? current.node.outerHTML : current.node.innerHTML;\n    }\n\n    // Act as setter if we got a string\n\n    // The default for import is, that the current node is not replaced\n    outerXML = outerXML == null ? false : outerXML;\n\n    // Create temporary holder\n    const well = create('wrapper', ns);\n    const fragment = globals.document.createDocumentFragment();\n\n    // Dump raw svg\n    well.innerHTML = xmlOrFn;\n\n    // Transplant nodes into the fragment\n    for (let len = well.children.length; len--;) {\n      fragment.appendChild(well.firstElementChild);\n    }\n    const parent = this.parent();\n\n    // Add the whole fragment at once\n    return outerXML ? this.replace(fragment) && parent : this.add(fragment);\n  }\n}\nextend(Dom, {\n  attr,\n  find,\n  findOne\n});\nregister(Dom, 'Dom');\n\nclass Element extends Dom {\n  constructor(node, attrs) {\n    super(node, attrs);\n\n    // initialize data object\n    this.dom = {};\n\n    // create circular reference\n    this.node.instance = this;\n    if (node.hasAttribute('data-svgjs') || node.hasAttribute('svgjs:data')) {\n      // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n      this.setData(JSON.parse(node.getAttribute('data-svgjs')) ?? JSON.parse(node.getAttribute('svgjs:data')) ?? {});\n    }\n  }\n\n  // Move element by its center\n  center(x, y) {\n    return this.cx(x).cy(y);\n  }\n\n  // Move by center over x-axis\n  cx(x) {\n    return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2);\n  }\n\n  // Move by center over y-axis\n  cy(y) {\n    return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2);\n  }\n\n  // Get defs\n  defs() {\n    const root = this.root();\n    return root && root.defs();\n  }\n\n  // Relative move over x and y axes\n  dmove(x, y) {\n    return this.dx(x).dy(y);\n  }\n\n  // Relative move over x axis\n  dx(x = 0) {\n    return this.x(new SVGNumber(x).plus(this.x()));\n  }\n\n  // Relative move over y axis\n  dy(y = 0) {\n    return this.y(new SVGNumber(y).plus(this.y()));\n  }\n  getEventHolder() {\n    return this;\n  }\n\n  // Set height of element\n  height(height) {\n    return this.attr('height', height);\n  }\n\n  // Move element to given x and y values\n  move(x, y) {\n    return this.x(x).y(y);\n  }\n\n  // return array of all ancestors of given type up to the root svg\n  parents(until = this.root()) {\n    const isSelector = typeof until === 'string';\n    if (!isSelector) {\n      until = makeInstance(until);\n    }\n    const parents = new List();\n    let parent = this;\n    while ((parent = parent.parent()) && parent.node !== globals.document && parent.nodeName !== '#document-fragment') {\n      parents.push(parent);\n      if (!isSelector && parent.node === until.node) {\n        break;\n      }\n      if (isSelector && parent.matches(until)) {\n        break;\n      }\n      if (parent.node === this.root().node) {\n        // We worked our way to the root and didn't match `until`\n        return null;\n      }\n    }\n    return parents;\n  }\n\n  // Get referenced element form attribute value\n  reference(attr) {\n    attr = this.attr(attr);\n    if (!attr) return null;\n    const m = (attr + '').match(reference);\n    return m ? makeInstance(m[1]) : null;\n  }\n\n  // Get parent document\n  root() {\n    const p = this.parent(getClass(root));\n    return p && p.root();\n  }\n\n  // set given data to the elements data property\n  setData(o) {\n    this.dom = o;\n    return this;\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height);\n    return this.width(new SVGNumber(p.width)).height(new SVGNumber(p.height));\n  }\n\n  // Set width of element\n  width(width) {\n    return this.attr('width', width);\n  }\n\n  // write svgjs data to the dom\n  writeDataToDom() {\n    writeDataToDom(this, this.dom);\n    return super.writeDataToDom();\n  }\n\n  // Move over x-axis\n  x(x) {\n    return this.attr('x', x);\n  }\n\n  // Move over y-axis\n  y(y) {\n    return this.attr('y', y);\n  }\n}\nextend(Element, {\n  bbox,\n  rbox,\n  inside,\n  point,\n  ctm,\n  screenCTM\n});\nregister(Element, 'Element');\n\n// Define list of available attributes for stroke and fill\nconst sugar = {\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset'],\n  fill: ['color', 'opacity', 'rule'],\n  prefix: function (t, a) {\n    return a === 'color' ? t : t + '-' + a;\n  }\n}\n\n// Add sugar for fill and stroke\n;\n['fill', 'stroke'].forEach(function (m) {\n  const extension = {};\n  let i;\n  extension[m] = function (o) {\n    if (typeof o === 'undefined') {\n      return this.attr(m);\n    }\n    if (typeof o === 'string' || o instanceof Color || Color.isRgb(o) || o instanceof Element) {\n      this.attr(m, o);\n    } else {\n      // set all attributes from sugar.fill and sugar.stroke list\n      for (i = sugar[m].length - 1; i >= 0; i--) {\n        if (o[sugar[m][i]] != null) {\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);\n        }\n      }\n    }\n    return this;\n  };\n  registerMethods(['Element', 'Runner'], extension);\n});\nregisterMethods(['Element', 'Runner'], {\n  // Let the user set the matrix directly\n  matrix: function (mat, b, c, d, e, f) {\n    // Act as a getter\n    if (mat == null) {\n      return new Matrix(this);\n    }\n\n    // Act as a setter, the user can pass a matrix or a set of numbers\n    return this.attr('transform', new Matrix(mat, b, c, d, e, f));\n  },\n  // Map rotation to transform\n  rotate: function (angle, cx, cy) {\n    return this.transform({\n      rotate: angle,\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  // Map skew to transform\n  skew: function (x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3 ? this.transform({\n      skew: x,\n      ox: y,\n      oy: cx\n    }, true) : this.transform({\n      skew: [x, y],\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  shear: function (lam, cx, cy) {\n    return this.transform({\n      shear: lam,\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  // Map scale to transform\n  scale: function (x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3 ? this.transform({\n      scale: x,\n      ox: y,\n      oy: cx\n    }, true) : this.transform({\n      scale: [x, y],\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  // Map translate to transform\n  translate: function (x, y) {\n    return this.transform({\n      translate: [x, y]\n    }, true);\n  },\n  // Map relative translations to transform\n  relative: function (x, y) {\n    return this.transform({\n      relative: [x, y]\n    }, true);\n  },\n  // Map flip to transform\n  flip: function (direction = 'both', origin = 'center') {\n    if ('xybothtrue'.indexOf(direction) === -1) {\n      origin = direction;\n      direction = 'both';\n    }\n    return this.transform({\n      flip: direction,\n      origin: origin\n    }, true);\n  },\n  // Opacity\n  opacity: function (value) {\n    return this.attr('opacity', value);\n  }\n});\nregisterMethods('radius', {\n  // Add x and y radius\n  radius: function (x, y = x) {\n    const type = (this._element || this).type;\n    return type === 'radialGradient' ? this.attr('r', new SVGNumber(x)) : this.rx(x).ry(y);\n  }\n});\nregisterMethods('Path', {\n  // Get path length\n  length: function () {\n    return this.node.getTotalLength();\n  },\n  // Get point at length\n  pointAt: function (length) {\n    return new Point(this.node.getPointAtLength(length));\n  }\n});\nregisterMethods(['Element', 'Runner'], {\n  // Set font\n  font: function (a, v) {\n    if (typeof a === 'object') {\n      for (v in a) this.font(v, a[v]);\n      return this;\n    }\n    return a === 'leading' ? this.leading(v) : a === 'anchor' ? this.attr('text-anchor', v) : a === 'size' || a === 'family' || a === 'weight' || a === 'stretch' || a === 'variant' || a === 'style' ? this.attr('font-' + a, v) : this.attr(a, v);\n  }\n});\n\n// Add events to elements\nconst methods = ['click', 'dblclick', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'mousemove', 'mouseenter', 'mouseleave', 'touchstart', 'touchmove', 'touchleave', 'touchend', 'touchcancel', 'contextmenu', 'wheel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel'].reduce(function (last, event) {\n  // add event to Element\n  const fn = function (f) {\n    if (f === null) {\n      this.off(event);\n    } else {\n      this.on(event, f);\n    }\n    return this;\n  };\n  last[event] = fn;\n  return last;\n}, {});\nregisterMethods('Element', methods);\n\n// Reset all transformations\nfunction untransform() {\n  return this.attr('transform', null);\n}\n\n// merge the whole transformation chain into one matrix and returns it\nfunction matrixify() {\n  const matrix = (this.attr('transform') || ''\n  // split transformations\n  ).split(transforms).slice(0, -1).map(function (str) {\n    // generate key => value pairs\n    const kv = str.trim().split('(');\n    return [kv[0], kv[1].split(delimiter).map(function (str) {\n      return parseFloat(str);\n    })];\n  }).reverse()\n  // merge every transformation into one matrix\n  .reduce(function (matrix, transform) {\n    if (transform[0] === 'matrix') {\n      return matrix.lmultiply(Matrix.fromArray(transform[1]));\n    }\n    return matrix[transform[0]].apply(matrix, transform[1]);\n  }, new Matrix());\n  return matrix;\n}\n\n// add an element to another parent without changing the visual representation on the screen\nfunction toParent(parent, i) {\n  if (this === parent) return this;\n  if (isDescriptive(this.node)) return this.addTo(parent, i);\n  const ctm = this.screenCTM();\n  const pCtm = parent.screenCTM().inverse();\n  this.addTo(parent, i).untransform().transform(pCtm.multiply(ctm));\n  return this;\n}\n\n// same as above with parent equals root-svg\nfunction toRoot(i) {\n  return this.toParent(this.root(), i);\n}\n\n// Add transformations\nfunction transform(o, relative) {\n  // Act as a getter if no object was passed\n  if (o == null || typeof o === 'string') {\n    const decomposed = new Matrix(this).decompose();\n    return o == null ? decomposed : decomposed[o];\n  }\n  if (!Matrix.isMatrixLike(o)) {\n    // Set the origin according to the defined transform\n    o = {\n      ...o,\n      origin: getOrigin(o, this)\n    };\n  }\n\n  // The user can pass a boolean, an Element or an Matrix or nothing\n  const cleanRelative = relative === true ? this : relative || false;\n  const result = new Matrix(cleanRelative).transform(o);\n  return this.attr('transform', result);\n}\nregisterMethods('Element', {\n  untransform,\n  matrixify,\n  toParent,\n  toRoot,\n  transform\n});\n\nclass Container extends Element {\n  flatten() {\n    this.each(function () {\n      if (this instanceof Container) {\n        return this.flatten().ungroup();\n      }\n    });\n    return this;\n  }\n  ungroup(parent = this.parent(), index = parent.index(this)) {\n    // when parent != this, we want append all elements to the end\n    index = index === -1 ? parent.children().length : index;\n    this.each(function (i, children) {\n      // reverse each\n      return children[children.length - i - 1].toParent(parent, index);\n    });\n    return this.remove();\n  }\n}\nregister(Container, 'Container');\n\nclass Defs extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('defs', node), attrs);\n  }\n  flatten() {\n    return this;\n  }\n  ungroup() {\n    return this;\n  }\n}\nregister(Defs, 'Defs');\n\nclass Shape extends Element {}\nregister(Shape, 'Shape');\n\n// Radius x value\nfunction rx(rx) {\n  return this.attr('rx', rx);\n}\n\n// Radius y value\nfunction ry(ry) {\n  return this.attr('ry', ry);\n}\n\n// Move over x-axis\nfunction x$3(x) {\n  return x == null ? this.cx() - this.rx() : this.cx(x + this.rx());\n}\n\n// Move over y-axis\nfunction y$3(y) {\n  return y == null ? this.cy() - this.ry() : this.cy(y + this.ry());\n}\n\n// Move by center over x-axis\nfunction cx$1(x) {\n  return this.attr('cx', x);\n}\n\n// Move by center over y-axis\nfunction cy$1(y) {\n  return this.attr('cy', y);\n}\n\n// Set width of element\nfunction width$2(width) {\n  return width == null ? this.rx() * 2 : this.rx(new SVGNumber(width).divide(2));\n}\n\n// Set height of element\nfunction height$2(height) {\n  return height == null ? this.ry() * 2 : this.ry(new SVGNumber(height).divide(2));\n}\n\nvar circled = {\n  __proto__: null,\n  cx: cx$1,\n  cy: cy$1,\n  height: height$2,\n  rx: rx,\n  ry: ry,\n  width: width$2,\n  x: x$3,\n  y: y$3\n};\n\nclass Ellipse extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('ellipse', node), attrs);\n  }\n  size(width, height) {\n    const p = proportionalSize(this, width, height);\n    return this.rx(new SVGNumber(p.width).divide(2)).ry(new SVGNumber(p.height).divide(2));\n  }\n}\nextend(Ellipse, circled);\nregisterMethods('Container', {\n  // Create an ellipse\n  ellipse: wrapWithAttrCheck(function (width = 0, height = width) {\n    return this.put(new Ellipse()).size(width, height).move(0, 0);\n  })\n});\nregister(Ellipse, 'Ellipse');\n\nclass Fragment extends Dom {\n  constructor(node = globals.document.createDocumentFragment()) {\n    super(node);\n  }\n\n  // Import / Export raw xml\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML;\n      outerXML = xmlOrFn;\n      xmlOrFn = null;\n    }\n\n    // because this is a fragment we have to put all elements into a wrapper first\n    // before we can get the innerXML from it\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      const wrapper = new Dom(create('wrapper', ns));\n      wrapper.add(this.node.cloneNode(true));\n      return wrapper.xml(false, ns);\n    }\n\n    // Act as setter if we got a string\n    return super.xml(xmlOrFn, false, ns);\n  }\n}\nregister(Fragment, 'Fragment');\n\nfunction from(x, y) {\n  return (this._element || this).type === 'radialGradient' ? this.attr({\n    fx: new SVGNumber(x),\n    fy: new SVGNumber(y)\n  }) : this.attr({\n    x1: new SVGNumber(x),\n    y1: new SVGNumber(y)\n  });\n}\nfunction to(x, y) {\n  return (this._element || this).type === 'radialGradient' ? this.attr({\n    cx: new SVGNumber(x),\n    cy: new SVGNumber(y)\n  }) : this.attr({\n    x2: new SVGNumber(x),\n    y2: new SVGNumber(y)\n  });\n}\n\nvar gradiented = {\n  __proto__: null,\n  from: from,\n  to: to\n};\n\nclass Gradient extends Container {\n  constructor(type, attrs) {\n    super(nodeOrNew(type + 'Gradient', typeof type === 'string' ? null : type), attrs);\n  }\n\n  // custom attr to handle transform\n  attr(a, b, c) {\n    if (a === 'transform') a = 'gradientTransform';\n    return super.attr(a, b, c);\n  }\n  bbox() {\n    return new Box();\n  }\n  targets() {\n    return baseFind('svg [fill*=' + this.id() + ']');\n  }\n\n  // Alias string conversion to fill\n  toString() {\n    return this.url();\n  }\n\n  // Update gradient\n  update(block) {\n    // remove all stops\n    this.clear();\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this);\n    }\n    return this;\n  }\n\n  // Return the fill id\n  url() {\n    return 'url(#' + this.id() + ')';\n  }\n}\nextend(Gradient, gradiented);\nregisterMethods({\n  Container: {\n    // Create gradient element in defs\n    gradient(...args) {\n      return this.defs().gradient(...args);\n    }\n  },\n  // define gradient\n  Defs: {\n    gradient: wrapWithAttrCheck(function (type, block) {\n      return this.put(new Gradient(type)).update(block);\n    })\n  }\n});\nregister(Gradient, 'Gradient');\n\nclass Pattern extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('pattern', node), attrs);\n  }\n\n  // custom attr to handle transform\n  attr(a, b, c) {\n    if (a === 'transform') a = 'patternTransform';\n    return super.attr(a, b, c);\n  }\n  bbox() {\n    return new Box();\n  }\n  targets() {\n    return baseFind('svg [fill*=' + this.id() + ']');\n  }\n\n  // Alias string conversion to fill\n  toString() {\n    return this.url();\n  }\n\n  // Update pattern by rebuilding\n  update(block) {\n    // remove content\n    this.clear();\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this);\n    }\n    return this;\n  }\n\n  // Return the fill id\n  url() {\n    return 'url(#' + this.id() + ')';\n  }\n}\nregisterMethods({\n  Container: {\n    // Create pattern element in defs\n    pattern(...args) {\n      return this.defs().pattern(...args);\n    }\n  },\n  Defs: {\n    pattern: wrapWithAttrCheck(function (width, height, block) {\n      return this.put(new Pattern()).update(block).attr({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        patternUnits: 'userSpaceOnUse'\n      });\n    })\n  }\n});\nregister(Pattern, 'Pattern');\n\nclass Image extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('image', node), attrs);\n  }\n\n  // (re)load image\n  load(url, callback) {\n    if (!url) return this;\n    const img = new globals.window.Image();\n    on(img, 'load', function (e) {\n      const p = this.parent(Pattern);\n\n      // ensure image size\n      if (this.width() === 0 && this.height() === 0) {\n        this.size(img.width, img.height);\n      }\n      if (p instanceof Pattern) {\n        // ensure pattern size if not set\n        if (p.width() === 0 && p.height() === 0) {\n          p.size(this.width(), this.height());\n        }\n      }\n      if (typeof callback === 'function') {\n        callback.call(this, e);\n      }\n    }, this);\n    on(img, 'load error', function () {\n      // dont forget to unbind memory leaking events\n      off(img);\n    });\n    return this.attr('href', img.src = url, xlink);\n  }\n}\nregisterAttrHook(function (attr, val, _this) {\n  // convert image fill and stroke to patterns\n  if (attr === 'fill' || attr === 'stroke') {\n    if (isImage.test(val)) {\n      val = _this.root().defs().image(val);\n    }\n  }\n  if (val instanceof Image) {\n    val = _this.root().defs().pattern(0, 0, pattern => {\n      pattern.add(val);\n    });\n  }\n  return val;\n});\nregisterMethods({\n  Container: {\n    // create image element, load image and set its size\n    image: wrapWithAttrCheck(function (source, callback) {\n      return this.put(new Image()).size(0, 0).load(source, callback);\n    })\n  }\n});\nregister(Image, 'Image');\n\nclass PointArray extends SVGArray {\n  // Get bounding box of points\n  bbox() {\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    let minX = Infinity;\n    let minY = Infinity;\n    this.forEach(function (el) {\n      maxX = Math.max(el[0], maxX);\n      maxY = Math.max(el[1], maxY);\n      minX = Math.min(el[0], minX);\n      minY = Math.min(el[1], minY);\n    });\n    return new Box(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  // Move point string\n  move(x, y) {\n    const box = this.bbox();\n\n    // get relative offset\n    x -= box.x;\n    y -= box.y;\n\n    // move every point\n    if (!isNaN(x) && !isNaN(y)) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        this[i] = [this[i][0] + x, this[i][1] + y];\n      }\n    }\n    return this;\n  }\n\n  // Parse point string and flat array\n  parse(array = [0, 0]) {\n    const points = [];\n\n    // if it is an array, we flatten it and therefore clone it to 1 depths\n    if (array instanceof Array) {\n      array = Array.prototype.concat.apply([], array);\n    } else {\n      // Else, it is considered as a string\n      // parse points\n      array = array.trim().split(delimiter).map(parseFloat);\n    }\n\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n    if (array.length % 2 !== 0) array.pop();\n\n    // wrap points in two-tuples\n    for (let i = 0, len = array.length; i < len; i = i + 2) {\n      points.push([array[i], array[i + 1]]);\n    }\n    return points;\n  }\n\n  // Resize poly string\n  size(width, height) {\n    let i;\n    const box = this.bbox();\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      if (box.width) this[i][0] = (this[i][0] - box.x) * width / box.width + box.x;\n      if (box.height) this[i][1] = (this[i][1] - box.y) * height / box.height + box.y;\n    }\n    return this;\n  }\n\n  // Convert array to line object\n  toLine() {\n    return {\n      x1: this[0][0],\n      y1: this[0][1],\n      x2: this[1][0],\n      y2: this[1][1]\n    };\n  }\n\n  // Convert array to string\n  toString() {\n    const array = [];\n    // convert to a poly point string\n    for (let i = 0, il = this.length; i < il; i++) {\n      array.push(this[i].join(','));\n    }\n    return array.join(' ');\n  }\n  transform(m) {\n    return this.clone().transformO(m);\n  }\n\n  // transform points with matrix (similar to Point.transform)\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m);\n    }\n    for (let i = this.length; i--;) {\n      // Perform the matrix multiplication\n      const [x, y] = this[i];\n      this[i][0] = m.a * x + m.c * y + m.e;\n      this[i][1] = m.b * x + m.d * y + m.f;\n    }\n    return this;\n  }\n}\n\nconst MorphArray = PointArray;\n\n// Move by left top corner over x-axis\nfunction x$2(x) {\n  return x == null ? this.bbox().x : this.move(x, this.bbox().y);\n}\n\n// Move by left top corner over y-axis\nfunction y$2(y) {\n  return y == null ? this.bbox().y : this.move(this.bbox().x, y);\n}\n\n// Set width of element\nfunction width$1(width) {\n  const b = this.bbox();\n  return width == null ? b.width : this.size(width, b.height);\n}\n\n// Set height of element\nfunction height$1(height) {\n  const b = this.bbox();\n  return height == null ? b.height : this.size(b.width, height);\n}\n\nvar pointed = {\n  __proto__: null,\n  MorphArray: MorphArray,\n  height: height$1,\n  width: width$1,\n  x: x$2,\n  y: y$2\n};\n\nclass Line extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('line', node), attrs);\n  }\n\n  // Get array\n  array() {\n    return new PointArray([[this.attr('x1'), this.attr('y1')], [this.attr('x2'), this.attr('y2')]]);\n  }\n\n  // Move by left top corner\n  move(x, y) {\n    return this.attr(this.array().move(x, y).toLine());\n  }\n\n  // Overwrite native plot() method\n  plot(x1, y1, x2, y2) {\n    if (x1 == null) {\n      return this.array();\n    } else if (typeof y1 !== 'undefined') {\n      x1 = {\n        x1,\n        y1,\n        x2,\n        y2\n      };\n    } else {\n      x1 = new PointArray(x1).toLine();\n    }\n    return this.attr(x1);\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height);\n    return this.attr(this.array().size(p.width, p.height).toLine());\n  }\n}\nextend(Line, pointed);\nregisterMethods({\n  Container: {\n    // Create a line element\n    line: wrapWithAttrCheck(function (...args) {\n      // make sure plot is called as a setter\n      // x1 is not necessarily a number, it can also be an array, a string and a PointArray\n      return Line.prototype.plot.apply(this.put(new Line()), args[0] != null ? args : [0, 0, 0, 0]);\n    })\n  }\n});\nregister(Line, 'Line');\n\nclass Marker extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('marker', node), attrs);\n  }\n\n  // Set height of element\n  height(height) {\n    return this.attr('markerHeight', height);\n  }\n  orient(orient) {\n    return this.attr('orient', orient);\n  }\n\n  // Set marker refX and refY\n  ref(x, y) {\n    return this.attr('refX', x).attr('refY', y);\n  }\n\n  // Return the fill id\n  toString() {\n    return 'url(#' + this.id() + ')';\n  }\n\n  // Update marker\n  update(block) {\n    // remove all content\n    this.clear();\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this);\n    }\n    return this;\n  }\n\n  // Set width of element\n  width(width) {\n    return this.attr('markerWidth', width);\n  }\n}\nregisterMethods({\n  Container: {\n    marker(...args) {\n      // Create marker element in defs\n      return this.defs().marker(...args);\n    }\n  },\n  Defs: {\n    // Create marker\n    marker: wrapWithAttrCheck(function (width, height, block) {\n      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n      return this.put(new Marker()).size(width, height).ref(width / 2, height / 2).viewbox(0, 0, width, height).attr('orient', 'auto').update(block);\n    })\n  },\n  marker: {\n    // Create and attach markers\n    marker(marker, width, height, block) {\n      let attr = ['marker'];\n\n      // Build attribute name\n      if (marker !== 'all') attr.push(marker);\n      attr = attr.join('-');\n\n      // Set marker attribute\n      marker = arguments[1] instanceof Marker ? arguments[1] : this.defs().marker(width, height, block);\n      return this.attr(attr, marker);\n    }\n  }\n});\nregister(Marker, 'Marker');\n\n/***\nBase Class\n==========\nThe base stepper class that will be\n***/\n\nfunction makeSetterGetter(k, f) {\n  return function (v) {\n    if (v == null) return this[k];\n    this[k] = v;\n    if (f) f.call(this);\n    return this;\n  };\n}\nconst easing = {\n  '-': function (pos) {\n    return pos;\n  },\n  '<>': function (pos) {\n    return -Math.cos(pos * Math.PI) / 2 + 0.5;\n  },\n  '>': function (pos) {\n    return Math.sin(pos * Math.PI / 2);\n  },\n  '<': function (pos) {\n    return -Math.cos(pos * Math.PI / 2) + 1;\n  },\n  bezier: function (x1, y1, x2, y2) {\n    // see https://www.w3.org/TR/css-easing-1/#cubic-bezier-algo\n    return function (t) {\n      if (t < 0) {\n        if (x1 > 0) {\n          return y1 / x1 * t;\n        } else if (x2 > 0) {\n          return y2 / x2 * t;\n        } else {\n          return 0;\n        }\n      } else if (t > 1) {\n        if (x2 < 1) {\n          return (1 - y2) / (1 - x2) * t + (y2 - x2) / (1 - x2);\n        } else if (x1 < 1) {\n          return (1 - y1) / (1 - x1) * t + (y1 - x1) / (1 - x1);\n        } else {\n          return 1;\n        }\n      } else {\n        return 3 * t * (1 - t) ** 2 * y1 + 3 * t ** 2 * (1 - t) * y2 + t ** 3;\n      }\n    };\n  },\n  // see https://www.w3.org/TR/css-easing-1/#step-timing-function-algo\n  steps: function (steps, stepPosition = 'end') {\n    // deal with \"jump-\" prefix\n    stepPosition = stepPosition.split('-').reverse()[0];\n    let jumps = steps;\n    if (stepPosition === 'none') {\n      --jumps;\n    } else if (stepPosition === 'both') {\n      ++jumps;\n    }\n\n    // The beforeFlag is essentially useless\n    return (t, beforeFlag = false) => {\n      // Step is called currentStep in referenced url\n      let step = Math.floor(t * steps);\n      const jumping = t * step % 1 === 0;\n      if (stepPosition === 'start' || stepPosition === 'both') {\n        ++step;\n      }\n      if (beforeFlag && jumping) {\n        --step;\n      }\n      if (t >= 0 && step < 0) {\n        step = 0;\n      }\n      if (t <= 1 && step > jumps) {\n        step = jumps;\n      }\n      return step / jumps;\n    };\n  }\n};\nclass Stepper {\n  done() {\n    return false;\n  }\n}\n\n/***\nEasing Functions\n================\n***/\n\nclass Ease extends Stepper {\n  constructor(fn = timeline.ease) {\n    super();\n    this.ease = easing[fn] || fn;\n  }\n  step(from, to, pos) {\n    if (typeof from !== 'number') {\n      return pos < 1 ? from : to;\n    }\n    return from + (to - from) * this.ease(pos);\n  }\n}\n\n/***\nController Types\n================\n***/\n\nclass Controller extends Stepper {\n  constructor(fn) {\n    super();\n    this.stepper = fn;\n  }\n  done(c) {\n    return c.done;\n  }\n  step(current, target, dt, c) {\n    return this.stepper(current, target, dt, c);\n  }\n}\nfunction recalculate() {\n  // Apply the default parameters\n  const duration = (this._duration || 500) / 1000;\n  const overshoot = this._overshoot || 0;\n\n  // Calculate the PID natural response\n  const eps = 1e-10;\n  const pi = Math.PI;\n  const os = Math.log(overshoot / 100 + eps);\n  const zeta = -os / Math.sqrt(pi * pi + os * os);\n  const wn = 3.9 / (zeta * duration);\n\n  // Calculate the Spring values\n  this.d = 2 * zeta * wn;\n  this.k = wn * wn;\n}\nclass Spring extends Controller {\n  constructor(duration = 500, overshoot = 0) {\n    super();\n    this.duration(duration).overshoot(overshoot);\n  }\n  step(current, target, dt, c) {\n    if (typeof current === 'string') return current;\n    c.done = dt === Infinity;\n    if (dt === Infinity) return target;\n    if (dt === 0) return current;\n    if (dt > 100) dt = 16;\n    dt /= 1000;\n\n    // Get the previous velocity\n    const velocity = c.velocity || 0;\n\n    // Apply the control to get the new position and store it\n    const acceleration = -this.d * velocity - this.k * (current - target);\n    const newPosition = current + velocity * dt + acceleration * dt * dt / 2;\n\n    // Store the velocity\n    c.velocity = velocity + acceleration * dt;\n\n    // Figure out if we have converged, and if so, pass the value\n    c.done = Math.abs(target - newPosition) + Math.abs(velocity) < 0.002;\n    return c.done ? target : newPosition;\n  }\n}\nextend(Spring, {\n  duration: makeSetterGetter('_duration', recalculate),\n  overshoot: makeSetterGetter('_overshoot', recalculate)\n});\nclass PID extends Controller {\n  constructor(p = 0.1, i = 0.01, d = 0, windup = 1000) {\n    super();\n    this.p(p).i(i).d(d).windup(windup);\n  }\n  step(current, target, dt, c) {\n    if (typeof current === 'string') return current;\n    c.done = dt === Infinity;\n    if (dt === Infinity) return target;\n    if (dt === 0) return current;\n    const p = target - current;\n    let i = (c.integral || 0) + p * dt;\n    const d = (p - (c.error || 0)) / dt;\n    const windup = this._windup;\n\n    // antiwindup\n    if (windup !== false) {\n      i = Math.max(-windup, Math.min(i, windup));\n    }\n    c.error = p;\n    c.integral = i;\n    c.done = Math.abs(p) < 0.001;\n    return c.done ? target : current + (this.P * p + this.I * i + this.D * d);\n  }\n}\nextend(PID, {\n  windup: makeSetterGetter('_windup'),\n  p: makeSetterGetter('P'),\n  i: makeSetterGetter('I'),\n  d: makeSetterGetter('D')\n});\n\nconst segmentParameters = {\n  M: 2,\n  L: 2,\n  H: 1,\n  V: 1,\n  C: 6,\n  S: 4,\n  Q: 4,\n  T: 2,\n  A: 7,\n  Z: 0\n};\nconst pathHandlers = {\n  M: function (c, p, p0) {\n    p.x = p0.x = c[0];\n    p.y = p0.y = c[1];\n    return ['M', p.x, p.y];\n  },\n  L: function (c, p) {\n    p.x = c[0];\n    p.y = c[1];\n    return ['L', c[0], c[1]];\n  },\n  H: function (c, p) {\n    p.x = c[0];\n    return ['H', c[0]];\n  },\n  V: function (c, p) {\n    p.y = c[0];\n    return ['V', c[0]];\n  },\n  C: function (c, p) {\n    p.x = c[4];\n    p.y = c[5];\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]];\n  },\n  S: function (c, p) {\n    p.x = c[2];\n    p.y = c[3];\n    return ['S', c[0], c[1], c[2], c[3]];\n  },\n  Q: function (c, p) {\n    p.x = c[2];\n    p.y = c[3];\n    return ['Q', c[0], c[1], c[2], c[3]];\n  },\n  T: function (c, p) {\n    p.x = c[0];\n    p.y = c[1];\n    return ['T', c[0], c[1]];\n  },\n  Z: function (c, p, p0) {\n    p.x = p0.x;\n    p.y = p0.y;\n    return ['Z'];\n  },\n  A: function (c, p) {\n    p.x = c[5];\n    p.y = c[6];\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]];\n  }\n};\nconst mlhvqtcsaz = 'mlhvqtcsaz'.split('');\nfor (let i = 0, il = mlhvqtcsaz.length; i < il; ++i) {\n  pathHandlers[mlhvqtcsaz[i]] = function (i) {\n    return function (c, p, p0) {\n      if (i === 'H') c[0] = c[0] + p.x;else if (i === 'V') c[0] = c[0] + p.y;else if (i === 'A') {\n        c[5] = c[5] + p.x;\n        c[6] = c[6] + p.y;\n      } else {\n        for (let j = 0, jl = c.length; j < jl; ++j) {\n          c[j] = c[j] + (j % 2 ? p.y : p.x);\n        }\n      }\n      return pathHandlers[i](c, p, p0);\n    };\n  }(mlhvqtcsaz[i].toUpperCase());\n}\nfunction makeAbsolut(parser) {\n  const command = parser.segment[0];\n  return pathHandlers[command](parser.segment.slice(1), parser.p, parser.p0);\n}\nfunction segmentComplete(parser) {\n  return parser.segment.length && parser.segment.length - 1 === segmentParameters[parser.segment[0].toUpperCase()];\n}\nfunction startNewSegment(parser, token) {\n  parser.inNumber && finalizeNumber(parser, false);\n  const pathLetter = isPathLetter.test(token);\n  if (pathLetter) {\n    parser.segment = [token];\n  } else {\n    const lastCommand = parser.lastCommand;\n    const small = lastCommand.toLowerCase();\n    const isSmall = lastCommand === small;\n    parser.segment = [small === 'm' ? isSmall ? 'l' : 'L' : lastCommand];\n  }\n  parser.inSegment = true;\n  parser.lastCommand = parser.segment[0];\n  return pathLetter;\n}\nfunction finalizeNumber(parser, inNumber) {\n  if (!parser.inNumber) throw new Error('Parser Error');\n  parser.number && parser.segment.push(parseFloat(parser.number));\n  parser.inNumber = inNumber;\n  parser.number = '';\n  parser.pointSeen = false;\n  parser.hasExponent = false;\n  if (segmentComplete(parser)) {\n    finalizeSegment(parser);\n  }\n}\nfunction finalizeSegment(parser) {\n  parser.inSegment = false;\n  if (parser.absolute) {\n    parser.segment = makeAbsolut(parser);\n  }\n  parser.segments.push(parser.segment);\n}\nfunction isArcFlag(parser) {\n  if (!parser.segment.length) return false;\n  const isArc = parser.segment[0].toUpperCase() === 'A';\n  const length = parser.segment.length;\n  return isArc && (length === 4 || length === 5);\n}\nfunction isExponential(parser) {\n  return parser.lastToken.toUpperCase() === 'E';\n}\nconst pathDelimiters = new Set([' ', ',', '\\t', '\\n', '\\r', '\\f']);\nfunction pathParser(d, toAbsolute = true) {\n  let index = 0;\n  let token = '';\n  const parser = {\n    segment: [],\n    inNumber: false,\n    number: '',\n    lastToken: '',\n    inSegment: false,\n    segments: [],\n    pointSeen: false,\n    hasExponent: false,\n    absolute: toAbsolute,\n    p0: new Point(),\n    p: new Point()\n  };\n  while (parser.lastToken = token, token = d.charAt(index++)) {\n    if (!parser.inSegment) {\n      if (startNewSegment(parser, token)) {\n        continue;\n      }\n    }\n    if (token === '.') {\n      if (parser.pointSeen || parser.hasExponent) {\n        finalizeNumber(parser, false);\n        --index;\n        continue;\n      }\n      parser.inNumber = true;\n      parser.pointSeen = true;\n      parser.number += token;\n      continue;\n    }\n    if (!isNaN(parseInt(token))) {\n      if (parser.number === '0' || isArcFlag(parser)) {\n        parser.inNumber = true;\n        parser.number = token;\n        finalizeNumber(parser, true);\n        continue;\n      }\n      parser.inNumber = true;\n      parser.number += token;\n      continue;\n    }\n    if (pathDelimiters.has(token)) {\n      if (parser.inNumber) {\n        finalizeNumber(parser, false);\n      }\n      continue;\n    }\n    if (token === '-' || token === '+') {\n      if (parser.inNumber && !isExponential(parser)) {\n        finalizeNumber(parser, false);\n        --index;\n        continue;\n      }\n      parser.number += token;\n      parser.inNumber = true;\n      continue;\n    }\n    if (token.toUpperCase() === 'E') {\n      parser.number += token;\n      parser.hasExponent = true;\n      continue;\n    }\n    if (isPathLetter.test(token)) {\n      if (parser.inNumber) {\n        finalizeNumber(parser, false);\n      } else if (!segmentComplete(parser)) {\n        throw new Error('parser Error');\n      } else {\n        finalizeSegment(parser);\n      }\n      --index;\n    }\n  }\n  if (parser.inNumber) {\n    finalizeNumber(parser, false);\n  }\n  if (parser.inSegment && segmentComplete(parser)) {\n    finalizeSegment(parser);\n  }\n  return parser.segments;\n}\n\nfunction arrayToString(a) {\n  let s = '';\n  for (let i = 0, il = a.length; i < il; i++) {\n    s += a[i][0];\n    if (a[i][1] != null) {\n      s += a[i][1];\n      if (a[i][2] != null) {\n        s += ' ';\n        s += a[i][2];\n        if (a[i][3] != null) {\n          s += ' ';\n          s += a[i][3];\n          s += ' ';\n          s += a[i][4];\n          if (a[i][5] != null) {\n            s += ' ';\n            s += a[i][5];\n            s += ' ';\n            s += a[i][6];\n            if (a[i][7] != null) {\n              s += ' ';\n              s += a[i][7];\n            }\n          }\n        }\n      }\n    }\n  }\n  return s + ' ';\n}\nclass PathArray extends SVGArray {\n  // Get bounding box of path\n  bbox() {\n    parser().path.setAttribute('d', this.toString());\n    return new Box(parser.nodes.path.getBBox());\n  }\n\n  // Move path string\n  move(x, y) {\n    // get bounding box of current situation\n    const box = this.bbox();\n\n    // get relative offset\n    x -= box.x;\n    y -= box.y;\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (let l, i = this.length - 1; i >= 0; i--) {\n        l = this[i][0];\n        if (l === 'M' || l === 'L' || l === 'T') {\n          this[i][1] += x;\n          this[i][2] += y;\n        } else if (l === 'H') {\n          this[i][1] += x;\n        } else if (l === 'V') {\n          this[i][1] += y;\n        } else if (l === 'C' || l === 'S' || l === 'Q') {\n          this[i][1] += x;\n          this[i][2] += y;\n          this[i][3] += x;\n          this[i][4] += y;\n          if (l === 'C') {\n            this[i][5] += x;\n            this[i][6] += y;\n          }\n        } else if (l === 'A') {\n          this[i][6] += x;\n          this[i][7] += y;\n        }\n      }\n    }\n    return this;\n  }\n\n  // Absolutize and parse path to array\n  parse(d = 'M0 0') {\n    if (Array.isArray(d)) {\n      d = Array.prototype.concat.apply([], d).toString();\n    }\n    return pathParser(d);\n  }\n\n  // Resize path string\n  size(width, height) {\n    // get bounding box of current situation\n    const box = this.bbox();\n    let i, l;\n\n    // If the box width or height is 0 then we ignore\n    // transformations on the respective axis\n    box.width = box.width === 0 ? 1 : box.width;\n    box.height = box.height === 0 ? 1 : box.height;\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      l = this[i][0];\n      if (l === 'M' || l === 'L' || l === 'T') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n        this[i][2] = (this[i][2] - box.y) * height / box.height + box.y;\n      } else if (l === 'H') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n      } else if (l === 'V') {\n        this[i][1] = (this[i][1] - box.y) * height / box.height + box.y;\n      } else if (l === 'C' || l === 'S' || l === 'Q') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n        this[i][2] = (this[i][2] - box.y) * height / box.height + box.y;\n        this[i][3] = (this[i][3] - box.x) * width / box.width + box.x;\n        this[i][4] = (this[i][4] - box.y) * height / box.height + box.y;\n        if (l === 'C') {\n          this[i][5] = (this[i][5] - box.x) * width / box.width + box.x;\n          this[i][6] = (this[i][6] - box.y) * height / box.height + box.y;\n        }\n      } else if (l === 'A') {\n        // resize radii\n        this[i][1] = this[i][1] * width / box.width;\n        this[i][2] = this[i][2] * height / box.height;\n\n        // move position values\n        this[i][6] = (this[i][6] - box.x) * width / box.width + box.x;\n        this[i][7] = (this[i][7] - box.y) * height / box.height + box.y;\n      }\n    }\n    return this;\n  }\n\n  // Convert array to string\n  toString() {\n    return arrayToString(this);\n  }\n}\n\nconst getClassForType = value => {\n  const type = typeof value;\n  if (type === 'number') {\n    return SVGNumber;\n  } else if (type === 'string') {\n    if (Color.isColor(value)) {\n      return Color;\n    } else if (delimiter.test(value)) {\n      return isPathLetter.test(value) ? PathArray : SVGArray;\n    } else if (numberAndUnit.test(value)) {\n      return SVGNumber;\n    } else {\n      return NonMorphable;\n    }\n  } else if (morphableTypes.indexOf(value.constructor) > -1) {\n    return value.constructor;\n  } else if (Array.isArray(value)) {\n    return SVGArray;\n  } else if (type === 'object') {\n    return ObjectBag;\n  } else {\n    return NonMorphable;\n  }\n};\nclass Morphable {\n  constructor(stepper) {\n    this._stepper = stepper || new Ease('-');\n    this._from = null;\n    this._to = null;\n    this._type = null;\n    this._context = null;\n    this._morphObj = null;\n  }\n  at(pos) {\n    return this._morphObj.morph(this._from, this._to, pos, this._stepper, this._context);\n  }\n  done() {\n    const complete = this._context.map(this._stepper.done).reduce(function (last, curr) {\n      return last && curr;\n    }, true);\n    return complete;\n  }\n  from(val) {\n    if (val == null) {\n      return this._from;\n    }\n    this._from = this._set(val);\n    return this;\n  }\n  stepper(stepper) {\n    if (stepper == null) return this._stepper;\n    this._stepper = stepper;\n    return this;\n  }\n  to(val) {\n    if (val == null) {\n      return this._to;\n    }\n    this._to = this._set(val);\n    return this;\n  }\n  type(type) {\n    // getter\n    if (type == null) {\n      return this._type;\n    }\n\n    // setter\n    this._type = type;\n    return this;\n  }\n  _set(value) {\n    if (!this._type) {\n      this.type(getClassForType(value));\n    }\n    let result = new this._type(value);\n    if (this._type === Color) {\n      result = this._to ? result[this._to[4]]() : this._from ? result[this._from[4]]() : result;\n    }\n    if (this._type === ObjectBag) {\n      result = this._to ? result.align(this._to) : this._from ? result.align(this._from) : result;\n    }\n    result = result.toConsumable();\n    this._morphObj = this._morphObj || new this._type();\n    this._context = this._context || Array.apply(null, Array(result.length)).map(Object).map(function (o) {\n      o.done = true;\n      return o;\n    });\n    return result;\n  }\n}\nclass NonMorphable {\n  constructor(...args) {\n    this.init(...args);\n  }\n  init(val) {\n    val = Array.isArray(val) ? val[0] : val;\n    this.value = val;\n    return this;\n  }\n  toArray() {\n    return [this.value];\n  }\n  valueOf() {\n    return this.value;\n  }\n}\nclass TransformBag {\n  constructor(...args) {\n    this.init(...args);\n  }\n  init(obj) {\n    if (Array.isArray(obj)) {\n      obj = {\n        scaleX: obj[0],\n        scaleY: obj[1],\n        shear: obj[2],\n        rotate: obj[3],\n        translateX: obj[4],\n        translateY: obj[5],\n        originX: obj[6],\n        originY: obj[7]\n      };\n    }\n    Object.assign(this, TransformBag.defaults, obj);\n    return this;\n  }\n  toArray() {\n    const v = this;\n    return [v.scaleX, v.scaleY, v.shear, v.rotate, v.translateX, v.translateY, v.originX, v.originY];\n  }\n}\nTransformBag.defaults = {\n  scaleX: 1,\n  scaleY: 1,\n  shear: 0,\n  rotate: 0,\n  translateX: 0,\n  translateY: 0,\n  originX: 0,\n  originY: 0\n};\nconst sortByKey = (a, b) => {\n  return a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0;\n};\nclass ObjectBag {\n  constructor(...args) {\n    this.init(...args);\n  }\n  align(other) {\n    const values = this.values;\n    for (let i = 0, il = values.length; i < il; ++i) {\n      // If the type is the same we only need to check if the color is in the correct format\n      if (values[i + 1] === other[i + 1]) {\n        if (values[i + 1] === Color && other[i + 7] !== values[i + 7]) {\n          const space = other[i + 7];\n          const color = new Color(this.values.splice(i + 3, 5))[space]().toArray();\n          this.values.splice(i + 3, 0, ...color);\n        }\n        i += values[i + 2] + 2;\n        continue;\n      }\n      if (!other[i + 1]) {\n        return this;\n      }\n\n      // The types differ, so we overwrite the new type with the old one\n      // And initialize it with the types default (e.g. black for color or 0 for number)\n      const defaultObject = new other[i + 1]().toArray();\n\n      // Than we fix the values array\n      const toDelete = values[i + 2] + 3;\n      values.splice(i, toDelete, other[i], other[i + 1], other[i + 2], ...defaultObject);\n      i += values[i + 2] + 2;\n    }\n    return this;\n  }\n  init(objOrArr) {\n    this.values = [];\n    if (Array.isArray(objOrArr)) {\n      this.values = objOrArr.slice();\n      return;\n    }\n    objOrArr = objOrArr || {};\n    const entries = [];\n    for (const i in objOrArr) {\n      const Type = getClassForType(objOrArr[i]);\n      const val = new Type(objOrArr[i]).toArray();\n      entries.push([i, Type, val.length, ...val]);\n    }\n    entries.sort(sortByKey);\n    this.values = entries.reduce((last, curr) => last.concat(curr), []);\n    return this;\n  }\n  toArray() {\n    return this.values;\n  }\n  valueOf() {\n    const obj = {};\n    const arr = this.values;\n\n    // for (var i = 0, len = arr.length; i < len; i += 2) {\n    while (arr.length) {\n      const key = arr.shift();\n      const Type = arr.shift();\n      const num = arr.shift();\n      const values = arr.splice(0, num);\n      obj[key] = new Type(values); // .valueOf()\n    }\n    return obj;\n  }\n}\nconst morphableTypes = [NonMorphable, TransformBag, ObjectBag];\nfunction registerMorphableType(type = []) {\n  morphableTypes.push(...[].concat(type));\n}\nfunction makeMorphable() {\n  extend(morphableTypes, {\n    to(val) {\n      return new Morphable().type(this.constructor).from(this.toArray()) // this.valueOf())\n      .to(val);\n    },\n    fromArray(arr) {\n      this.init(arr);\n      return this;\n    },\n    toConsumable() {\n      return this.toArray();\n    },\n    morph(from, to, pos, stepper, context) {\n      const mapper = function (i, index) {\n        return stepper.step(i, to[index], pos, context[index], context);\n      };\n      return this.fromArray(from.map(mapper));\n    }\n  });\n}\n\nclass Path extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('path', node), attrs);\n  }\n\n  // Get array\n  array() {\n    return this._array || (this._array = new PathArray(this.attr('d')));\n  }\n\n  // Clear array cache\n  clear() {\n    delete this._array;\n    return this;\n  }\n\n  // Set height of element\n  height(height) {\n    return height == null ? this.bbox().height : this.size(this.bbox().width, height);\n  }\n\n  // Move by left top corner\n  move(x, y) {\n    return this.attr('d', this.array().move(x, y));\n  }\n\n  // Plot new path\n  plot(d) {\n    return d == null ? this.array() : this.clear().attr('d', typeof d === 'string' ? d : this._array = new PathArray(d));\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height);\n    return this.attr('d', this.array().size(p.width, p.height));\n  }\n\n  // Set width of element\n  width(width) {\n    return width == null ? this.bbox().width : this.size(width, this.bbox().height);\n  }\n\n  // Move by left top corner over x-axis\n  x(x) {\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y);\n  }\n\n  // Move by left top corner over y-axis\n  y(y) {\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y);\n  }\n}\n\n// Define morphable array\nPath.prototype.MorphArray = PathArray;\n\n// Add parent method\nregisterMethods({\n  Container: {\n    // Create a wrapped path element\n    path: wrapWithAttrCheck(function (d) {\n      // make sure plot is called as a setter\n      return this.put(new Path()).plot(d || new PathArray());\n    })\n  }\n});\nregister(Path, 'Path');\n\n// Get array\nfunction array() {\n  return this._array || (this._array = new PointArray(this.attr('points')));\n}\n\n// Clear array cache\nfunction clear() {\n  delete this._array;\n  return this;\n}\n\n// Move by left top corner\nfunction move$2(x, y) {\n  return this.attr('points', this.array().move(x, y));\n}\n\n// Plot new path\nfunction plot(p) {\n  return p == null ? this.array() : this.clear().attr('points', typeof p === 'string' ? p : this._array = new PointArray(p));\n}\n\n// Set element size to given width and height\nfunction size$1(width, height) {\n  const p = proportionalSize(this, width, height);\n  return this.attr('points', this.array().size(p.width, p.height));\n}\n\nvar poly = {\n  __proto__: null,\n  array: array,\n  clear: clear,\n  move: move$2,\n  plot: plot,\n  size: size$1\n};\n\nclass Polygon extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('polygon', node), attrs);\n  }\n}\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polygon: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polygon()).plot(p || new PointArray());\n    })\n  }\n});\nextend(Polygon, pointed);\nextend(Polygon, poly);\nregister(Polygon, 'Polygon');\n\nclass Polyline extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('polyline', node), attrs);\n  }\n}\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polyline: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polyline()).plot(p || new PointArray());\n    })\n  }\n});\nextend(Polyline, pointed);\nextend(Polyline, poly);\nregister(Polyline, 'Polyline');\n\nclass Rect extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('rect', node), attrs);\n  }\n}\nextend(Rect, {\n  rx,\n  ry\n});\nregisterMethods({\n  Container: {\n    // Create a rect element\n    rect: wrapWithAttrCheck(function (width, height) {\n      return this.put(new Rect()).size(width, height);\n    })\n  }\n});\nregister(Rect, 'Rect');\n\nclass Queue {\n  constructor() {\n    this._first = null;\n    this._last = null;\n  }\n\n  // Shows us the first item in the list\n  first() {\n    return this._first && this._first.value;\n  }\n\n  // Shows us the last item in the list\n  last() {\n    return this._last && this._last.value;\n  }\n  push(value) {\n    // An item stores an id and the provided value\n    const item = typeof value.next !== 'undefined' ? value : {\n      value: value,\n      next: null,\n      prev: null\n    };\n\n    // Deal with the queue being empty or populated\n    if (this._last) {\n      item.prev = this._last;\n      this._last.next = item;\n      this._last = item;\n    } else {\n      this._last = item;\n      this._first = item;\n    }\n\n    // Return the current item\n    return item;\n  }\n\n  // Removes the item that was returned from the push\n  remove(item) {\n    // Relink the previous item\n    if (item.prev) item.prev.next = item.next;\n    if (item.next) item.next.prev = item.prev;\n    if (item === this._last) this._last = item.prev;\n    if (item === this._first) this._first = item.next;\n\n    // Invalidate item\n    item.prev = null;\n    item.next = null;\n  }\n  shift() {\n    // Check if we have a value\n    const remove = this._first;\n    if (!remove) return null;\n\n    // If we do, remove it and relink things\n    this._first = remove.next;\n    if (this._first) this._first.prev = null;\n    this._last = this._first ? this._last : null;\n    return remove.value;\n  }\n}\n\nconst Animator = {\n  nextDraw: null,\n  frames: new Queue(),\n  timeouts: new Queue(),\n  immediates: new Queue(),\n  timer: () => globals.window.performance || globals.window.Date,\n  transforms: [],\n  frame(fn) {\n    // Store the node\n    const node = Animator.frames.push({\n      run: fn\n    });\n\n    // Request an animation frame if we don't have one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);\n    }\n\n    // Return the node so we can remove it easily\n    return node;\n  },\n  timeout(fn, delay) {\n    delay = delay || 0;\n\n    // Work out when the event should fire\n    const time = Animator.timer().now() + delay;\n\n    // Add the timeout to the end of the queue\n    const node = Animator.timeouts.push({\n      run: fn,\n      time: time\n    });\n\n    // Request another animation frame if we need one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);\n    }\n    return node;\n  },\n  immediate(fn) {\n    // Add the immediate fn to the end of the queue\n    const node = Animator.immediates.push(fn);\n    // Request another animation frame if we need one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);\n    }\n    return node;\n  },\n  cancelFrame(node) {\n    node != null && Animator.frames.remove(node);\n  },\n  clearTimeout(node) {\n    node != null && Animator.timeouts.remove(node);\n  },\n  cancelImmediate(node) {\n    node != null && Animator.immediates.remove(node);\n  },\n  _draw(now) {\n    // Run all the timeouts we can run, if they are not ready yet, add them\n    // to the end of the queue immediately! (bad timeouts!!! [sarcasm])\n    let nextTimeout = null;\n    const lastTimeout = Animator.timeouts.last();\n    while (nextTimeout = Animator.timeouts.shift()) {\n      // Run the timeout if its time, or push it to the end\n      if (now >= nextTimeout.time) {\n        nextTimeout.run();\n      } else {\n        Animator.timeouts.push(nextTimeout);\n      }\n\n      // If we hit the last item, we should stop shifting out more items\n      if (nextTimeout === lastTimeout) break;\n    }\n\n    // Run all of the animation frames\n    let nextFrame = null;\n    const lastFrame = Animator.frames.last();\n    while (nextFrame !== lastFrame && (nextFrame = Animator.frames.shift())) {\n      nextFrame.run(now);\n    }\n    let nextImmediate = null;\n    while (nextImmediate = Animator.immediates.shift()) {\n      nextImmediate();\n    }\n\n    // If we have remaining timeouts or frames, draw until we don't anymore\n    Animator.nextDraw = Animator.timeouts.first() || Animator.frames.first() ? globals.window.requestAnimationFrame(Animator._draw) : null;\n  }\n};\n\nconst makeSchedule = function (runnerInfo) {\n  const start = runnerInfo.start;\n  const duration = runnerInfo.runner.duration();\n  const end = start + duration;\n  return {\n    start: start,\n    duration: duration,\n    end: end,\n    runner: runnerInfo.runner\n  };\n};\nconst defaultSource = function () {\n  const w = globals.window;\n  return (w.performance || w.Date).now();\n};\nclass Timeline extends EventTarget {\n  // Construct a new timeline on the given element\n  constructor(timeSource = defaultSource) {\n    super();\n    this._timeSource = timeSource;\n\n    // terminate resets all variables to their initial state\n    this.terminate();\n  }\n  active() {\n    return !!this._nextFrame;\n  }\n  finish() {\n    // Go to end and pause\n    this.time(this.getEndTimeOfTimeline() + 1);\n    return this.pause();\n  }\n\n  // Calculates the end of the timeline\n  getEndTime() {\n    const lastRunnerInfo = this.getLastRunnerInfo();\n    const lastDuration = lastRunnerInfo ? lastRunnerInfo.runner.duration() : 0;\n    const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time;\n    return lastStartTime + lastDuration;\n  }\n  getEndTimeOfTimeline() {\n    const endTimes = this._runners.map(i => i.start + i.runner.duration());\n    return Math.max(0, ...endTimes);\n  }\n  getLastRunnerInfo() {\n    return this.getRunnerInfoById(this._lastRunnerId);\n  }\n  getRunnerInfoById(id) {\n    return this._runners[this._runnerIds.indexOf(id)] || null;\n  }\n  pause() {\n    this._paused = true;\n    return this._continue();\n  }\n  persist(dtOrForever) {\n    if (dtOrForever == null) return this._persist;\n    this._persist = dtOrForever;\n    return this;\n  }\n  play() {\n    // Now make sure we are not paused and continue the animation\n    this._paused = false;\n    return this.updateTime()._continue();\n  }\n  reverse(yes) {\n    const currentSpeed = this.speed();\n    if (yes == null) return this.speed(-currentSpeed);\n    const positive = Math.abs(currentSpeed);\n    return this.speed(yes ? -positive : positive);\n  }\n\n  // schedules a runner on the timeline\n  schedule(runner, delay, when) {\n    if (runner == null) {\n      return this._runners.map(makeSchedule);\n    }\n\n    // The start time for the next animation can either be given explicitly,\n    // derived from the current timeline time or it can be relative to the\n    // last start time to chain animations directly\n\n    let absoluteStartTime = 0;\n    const endTime = this.getEndTime();\n    delay = delay || 0;\n\n    // Work out when to start the animation\n    if (when == null || when === 'last' || when === 'after') {\n      // Take the last time and increment\n      absoluteStartTime = endTime;\n    } else if (when === 'absolute' || when === 'start') {\n      absoluteStartTime = delay;\n      delay = 0;\n    } else if (when === 'now') {\n      absoluteStartTime = this._time;\n    } else if (when === 'relative') {\n      const runnerInfo = this.getRunnerInfoById(runner.id);\n      if (runnerInfo) {\n        absoluteStartTime = runnerInfo.start + delay;\n        delay = 0;\n      }\n    } else if (when === 'with-last') {\n      const lastRunnerInfo = this.getLastRunnerInfo();\n      const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time;\n      absoluteStartTime = lastStartTime;\n    } else {\n      throw new Error('Invalid value for the \"when\" parameter');\n    }\n\n    // Manage runner\n    runner.unschedule();\n    runner.timeline(this);\n    const persist = runner.persist();\n    const runnerInfo = {\n      persist: persist === null ? this._persist : persist,\n      start: absoluteStartTime + delay,\n      runner\n    };\n    this._lastRunnerId = runner.id;\n    this._runners.push(runnerInfo);\n    this._runners.sort((a, b) => a.start - b.start);\n    this._runnerIds = this._runners.map(info => info.runner.id);\n    this.updateTime()._continue();\n    return this;\n  }\n  seek(dt) {\n    return this.time(this._time + dt);\n  }\n  source(fn) {\n    if (fn == null) return this._timeSource;\n    this._timeSource = fn;\n    return this;\n  }\n  speed(speed) {\n    if (speed == null) return this._speed;\n    this._speed = speed;\n    return this;\n  }\n  stop() {\n    // Go to start and pause\n    this.time(0);\n    return this.pause();\n  }\n  time(time) {\n    if (time == null) return this._time;\n    this._time = time;\n    return this._continue(true);\n  }\n\n  // Remove the runner from this timeline\n  unschedule(runner) {\n    const index = this._runnerIds.indexOf(runner.id);\n    if (index < 0) return this;\n    this._runners.splice(index, 1);\n    this._runnerIds.splice(index, 1);\n    runner.timeline(null);\n    return this;\n  }\n\n  // Makes sure, that after pausing the time doesn't jump\n  updateTime() {\n    if (!this.active()) {\n      this._lastSourceTime = this._timeSource();\n    }\n    return this;\n  }\n\n  // Checks if we are running and continues the animation\n  _continue(immediateStep = false) {\n    Animator.cancelFrame(this._nextFrame);\n    this._nextFrame = null;\n    if (immediateStep) return this._stepImmediate();\n    if (this._paused) return this;\n    this._nextFrame = Animator.frame(this._step);\n    return this;\n  }\n  _stepFn(immediateStep = false) {\n    // Get the time delta from the last time and update the time\n    const time = this._timeSource();\n    let dtSource = time - this._lastSourceTime;\n    if (immediateStep) dtSource = 0;\n    const dtTime = this._speed * dtSource + (this._time - this._lastStepTime);\n    this._lastSourceTime = time;\n\n    // Only update the time if we use the timeSource.\n    // Otherwise use the current time\n    if (!immediateStep) {\n      // Update the time\n      this._time += dtTime;\n      this._time = this._time < 0 ? 0 : this._time;\n    }\n    this._lastStepTime = this._time;\n    this.fire('time', this._time);\n\n    // This is for the case that the timeline was seeked so that the time\n    // is now before the startTime of the runner. That is why we need to set\n    // the runner to position 0\n\n    // FIXME:\n    // However, resetting in insertion order leads to bugs. Considering the case,\n    // where 2 runners change the same attribute but in different times,\n    // resetting both of them will lead to the case where the later defined\n    // runner always wins the reset even if the other runner started earlier\n    // and therefore should win the attribute battle\n    // this can be solved by resetting them backwards\n    for (let k = this._runners.length; k--;) {\n      // Get and run the current runner and ignore it if its inactive\n      const runnerInfo = this._runners[k];\n      const runner = runnerInfo.runner;\n\n      // Make sure that we give the actual difference\n      // between runner start time and now\n      const dtToStart = this._time - runnerInfo.start;\n\n      // Dont run runner if not started yet\n      // and try to reset it\n      if (dtToStart <= 0) {\n        runner.reset();\n      }\n    }\n\n    // Run all of the runners directly\n    let runnersLeft = false;\n    for (let i = 0, len = this._runners.length; i < len; i++) {\n      // Get and run the current runner and ignore it if its inactive\n      const runnerInfo = this._runners[i];\n      const runner = runnerInfo.runner;\n      let dt = dtTime;\n\n      // Make sure that we give the actual difference\n      // between runner start time and now\n      const dtToStart = this._time - runnerInfo.start;\n\n      // Dont run runner if not started yet\n      if (dtToStart <= 0) {\n        runnersLeft = true;\n        continue;\n      } else if (dtToStart < dt) {\n        // Adjust dt to make sure that animation is on point\n        dt = dtToStart;\n      }\n      if (!runner.active()) continue;\n\n      // If this runner is still going, signal that we need another animation\n      // frame, otherwise, remove the completed runner\n      const finished = runner.step(dt).done;\n      if (!finished) {\n        runnersLeft = true;\n        // continue\n      } else if (runnerInfo.persist !== true) {\n        // runner is finished. And runner might get removed\n        const endTime = runner.duration() - runner.time() + this._time;\n        if (endTime + runnerInfo.persist < this._time) {\n          // Delete runner and correct index\n          runner.unschedule();\n          --i;\n          --len;\n        }\n      }\n    }\n\n    // Basically: we continue when there are runners right from us in time\n    // when -->, and when runners are left from us when <--\n    if (runnersLeft && !(this._speed < 0 && this._time === 0) || this._runnerIds.length && this._speed < 0 && this._time > 0) {\n      this._continue();\n    } else {\n      this.pause();\n      this.fire('finished');\n    }\n    return this;\n  }\n  terminate() {\n    // cleanup memory\n\n    // Store the timing variables\n    this._startTime = 0;\n    this._speed = 1.0;\n\n    // Determines how long a runner is hold in memory. Can be a dt or true/false\n    this._persist = 0;\n\n    // Keep track of the running animations and their starting parameters\n    this._nextFrame = null;\n    this._paused = true;\n    this._runners = [];\n    this._runnerIds = [];\n    this._lastRunnerId = -1;\n    this._time = 0;\n    this._lastSourceTime = 0;\n    this._lastStepTime = 0;\n\n    // Make sure that step is always called in class context\n    this._step = this._stepFn.bind(this, false);\n    this._stepImmediate = this._stepFn.bind(this, true);\n  }\n}\nregisterMethods({\n  Element: {\n    timeline: function (timeline) {\n      if (timeline == null) {\n        this._timeline = this._timeline || new Timeline();\n        return this._timeline;\n      } else {\n        this._timeline = timeline;\n        return this;\n      }\n    }\n  }\n});\n\nclass Runner extends EventTarget {\n  constructor(options) {\n    super();\n\n    // Store a unique id on the runner, so that we can identify it later\n    this.id = Runner.id++;\n\n    // Ensure a default value\n    options = options == null ? timeline.duration : options;\n\n    // Ensure that we get a controller\n    options = typeof options === 'function' ? new Controller(options) : options;\n\n    // Declare all of the variables\n    this._element = null;\n    this._timeline = null;\n    this.done = false;\n    this._queue = [];\n\n    // Work out the stepper and the duration\n    this._duration = typeof options === 'number' && options;\n    this._isDeclarative = options instanceof Controller;\n    this._stepper = this._isDeclarative ? options : new Ease();\n\n    // We copy the current values from the timeline because they can change\n    this._history = {};\n\n    // Store the state of the runner\n    this.enabled = true;\n    this._time = 0;\n    this._lastTime = 0;\n\n    // At creation, the runner is in reset state\n    this._reseted = true;\n\n    // Save transforms applied to this runner\n    this.transforms = new Matrix();\n    this.transformId = 1;\n\n    // Looping variables\n    this._haveReversed = false;\n    this._reverse = false;\n    this._loopsDone = 0;\n    this._swing = false;\n    this._wait = 0;\n    this._times = 1;\n    this._frameId = null;\n\n    // Stores how long a runner is stored after being done\n    this._persist = this._isDeclarative ? true : null;\n  }\n  static sanitise(duration, delay, when) {\n    // Initialise the default parameters\n    let times = 1;\n    let swing = false;\n    let wait = 0;\n    duration = duration ?? timeline.duration;\n    delay = delay ?? timeline.delay;\n    when = when || 'last';\n\n    // If we have an object, unpack the values\n    if (typeof duration === 'object' && !(duration instanceof Stepper)) {\n      delay = duration.delay ?? delay;\n      when = duration.when ?? when;\n      swing = duration.swing || swing;\n      times = duration.times ?? times;\n      wait = duration.wait ?? wait;\n      duration = duration.duration ?? timeline.duration;\n    }\n    return {\n      duration: duration,\n      delay: delay,\n      swing: swing,\n      times: times,\n      wait: wait,\n      when: when\n    };\n  }\n  active(enabled) {\n    if (enabled == null) return this.enabled;\n    this.enabled = enabled;\n    return this;\n  }\n\n  /*\n  Private Methods\n  ===============\n  Methods that shouldn't be used externally\n  */\n  addTransform(transform) {\n    this.transforms.lmultiplyO(transform);\n    return this;\n  }\n  after(fn) {\n    return this.on('finished', fn);\n  }\n  animate(duration, delay, when) {\n    const o = Runner.sanitise(duration, delay, when);\n    const runner = new Runner(o.duration);\n    if (this._timeline) runner.timeline(this._timeline);\n    if (this._element) runner.element(this._element);\n    return runner.loop(o).schedule(o.delay, o.when);\n  }\n  clearTransform() {\n    this.transforms = new Matrix();\n    return this;\n  }\n\n  // TODO: Keep track of all transformations so that deletion is faster\n  clearTransformsFromQueue() {\n    if (!this.done || !this._timeline || !this._timeline._runnerIds.includes(this.id)) {\n      this._queue = this._queue.filter(item => {\n        return !item.isTransform;\n      });\n    }\n  }\n  delay(delay) {\n    return this.animate(0, delay);\n  }\n  duration() {\n    return this._times * (this._wait + this._duration) - this._wait;\n  }\n  during(fn) {\n    return this.queue(null, fn);\n  }\n  ease(fn) {\n    this._stepper = new Ease(fn);\n    return this;\n  }\n  /*\n  Runner Definitions\n  ==================\n  These methods help us define the runtime behaviour of the Runner or they\n  help us make new runners from the current runner\n  */\n\n  element(element) {\n    if (element == null) return this._element;\n    this._element = element;\n    element._prepareRunner();\n    return this;\n  }\n  finish() {\n    return this.step(Infinity);\n  }\n  loop(times, swing, wait) {\n    // Deal with the user passing in an object\n    if (typeof times === 'object') {\n      swing = times.swing;\n      wait = times.wait;\n      times = times.times;\n    }\n\n    // Sanitise the values and store them\n    this._times = times || Infinity;\n    this._swing = swing || false;\n    this._wait = wait || 0;\n\n    // Allow true to be passed\n    if (this._times === true) {\n      this._times = Infinity;\n    }\n    return this;\n  }\n  loops(p) {\n    const loopDuration = this._duration + this._wait;\n    if (p == null) {\n      const loopsDone = Math.floor(this._time / loopDuration);\n      const relativeTime = this._time - loopsDone * loopDuration;\n      const position = relativeTime / this._duration;\n      return Math.min(loopsDone + position, this._times);\n    }\n    const whole = Math.floor(p);\n    const partial = p % 1;\n    const time = loopDuration * whole + this._duration * partial;\n    return this.time(time);\n  }\n  persist(dtOrForever) {\n    if (dtOrForever == null) return this._persist;\n    this._persist = dtOrForever;\n    return this;\n  }\n  position(p) {\n    // Get all of the variables we need\n    const x = this._time;\n    const d = this._duration;\n    const w = this._wait;\n    const t = this._times;\n    const s = this._swing;\n    const r = this._reverse;\n    let position;\n    if (p == null) {\n      /*\n      This function converts a time to a position in the range [0, 1]\n      The full explanation can be found in this desmos demonstration\n        https://www.desmos.com/calculator/u4fbavgche\n      The logic is slightly simplified here because we can use booleans\n      */\n\n      // Figure out the value without thinking about the start or end time\n      const f = function (x) {\n        const swinging = s * Math.floor(x % (2 * (w + d)) / (w + d));\n        const backwards = swinging && !r || !swinging && r;\n        const uncliped = Math.pow(-1, backwards) * (x % (w + d)) / d + backwards;\n        const clipped = Math.max(Math.min(uncliped, 1), 0);\n        return clipped;\n      };\n\n      // Figure out the value by incorporating the start time\n      const endTime = t * (w + d) - w;\n      position = x <= 0 ? Math.round(f(1e-5)) : x < endTime ? f(x) : Math.round(f(endTime - 1e-5));\n      return position;\n    }\n\n    // Work out the loops done and add the position to the loops done\n    const loopsDone = Math.floor(this.loops());\n    const swingForward = s && loopsDone % 2 === 0;\n    const forwards = swingForward && !r || r && swingForward;\n    position = loopsDone + (forwards ? p : 1 - p);\n    return this.loops(position);\n  }\n  progress(p) {\n    if (p == null) {\n      return Math.min(1, this._time / this.duration());\n    }\n    return this.time(p * this.duration());\n  }\n\n  /*\n  Basic Functionality\n  ===================\n  These methods allow us to attach basic functions to the runner directly\n  */\n  queue(initFn, runFn, retargetFn, isTransform) {\n    this._queue.push({\n      initialiser: initFn || noop,\n      runner: runFn || noop,\n      retarget: retargetFn,\n      isTransform: isTransform,\n      initialised: false,\n      finished: false\n    });\n    const timeline = this.timeline();\n    timeline && this.timeline()._continue();\n    return this;\n  }\n  reset() {\n    if (this._reseted) return this;\n    this.time(0);\n    this._reseted = true;\n    return this;\n  }\n  reverse(reverse) {\n    this._reverse = reverse == null ? !this._reverse : reverse;\n    return this;\n  }\n  schedule(timeline, delay, when) {\n    // The user doesn't need to pass a timeline if we already have one\n    if (!(timeline instanceof Timeline)) {\n      when = delay;\n      delay = timeline;\n      timeline = this.timeline();\n    }\n\n    // If there is no timeline, yell at the user...\n    if (!timeline) {\n      throw Error('Runner cannot be scheduled without timeline');\n    }\n\n    // Schedule the runner on the timeline provided\n    timeline.schedule(this, delay, when);\n    return this;\n  }\n  step(dt) {\n    // If we are inactive, this stepper just gets skipped\n    if (!this.enabled) return this;\n\n    // Update the time and get the new position\n    dt = dt == null ? 16 : dt;\n    this._time += dt;\n    const position = this.position();\n\n    // Figure out if we need to run the stepper in this frame\n    const running = this._lastPosition !== position && this._time >= 0;\n    this._lastPosition = position;\n\n    // Figure out if we just started\n    const duration = this.duration();\n    const justStarted = this._lastTime <= 0 && this._time > 0;\n    const justFinished = this._lastTime < duration && this._time >= duration;\n    this._lastTime = this._time;\n    if (justStarted) {\n      this.fire('start', this);\n    }\n\n    // Work out if the runner is finished set the done flag here so animations\n    // know, that they are running in the last step (this is good for\n    // transformations which can be merged)\n    const declarative = this._isDeclarative;\n    this.done = !declarative && !justFinished && this._time >= duration;\n\n    // Runner is running. So its not in reset state anymore\n    this._reseted = false;\n    let converged = false;\n    // Call initialise and the run function\n    if (running || declarative) {\n      this._initialise(running);\n\n      // clear the transforms on this runner so they dont get added again and again\n      this.transforms = new Matrix();\n      converged = this._run(declarative ? dt : position);\n      this.fire('step', this);\n    }\n    // correct the done flag here\n    // declarative animations itself know when they converged\n    this.done = this.done || converged && declarative;\n    if (justFinished) {\n      this.fire('finished', this);\n    }\n    return this;\n  }\n\n  /*\n  Runner animation methods\n  ========================\n  Control how the animation plays\n  */\n  time(time) {\n    if (time == null) {\n      return this._time;\n    }\n    const dt = time - this._time;\n    this.step(dt);\n    return this;\n  }\n  timeline(timeline) {\n    // check explicitly for undefined so we can set the timeline to null\n    if (typeof timeline === 'undefined') return this._timeline;\n    this._timeline = timeline;\n    return this;\n  }\n  unschedule() {\n    const timeline = this.timeline();\n    timeline && timeline.unschedule(this);\n    return this;\n  }\n\n  // Run each initialise function in the runner if required\n  _initialise(running) {\n    // If we aren't running, we shouldn't initialise when not declarative\n    if (!running && !this._isDeclarative) return;\n\n    // Loop through all of the initialisers\n    for (let i = 0, len = this._queue.length; i < len; ++i) {\n      // Get the current initialiser\n      const current = this._queue[i];\n\n      // Determine whether we need to initialise\n      const needsIt = this._isDeclarative || !current.initialised && running;\n      running = !current.finished;\n\n      // Call the initialiser if we need to\n      if (needsIt && running) {\n        current.initialiser.call(this);\n        current.initialised = true;\n      }\n    }\n  }\n\n  // Save a morpher to the morpher list so that we can retarget it later\n  _rememberMorpher(method, morpher) {\n    this._history[method] = {\n      morpher: morpher,\n      caller: this._queue[this._queue.length - 1]\n    };\n\n    // We have to resume the timeline in case a controller\n    // is already done without being ever run\n    // This can happen when e.g. this is done:\n    //    anim = el.animate(new SVG.Spring)\n    // and later\n    //    anim.move(...)\n    if (this._isDeclarative) {\n      const timeline = this.timeline();\n      timeline && timeline.play();\n    }\n  }\n\n  // Try to set the target for a morpher if the morpher exists, otherwise\n  // Run each run function for the position or dt given\n  _run(positionOrDt) {\n    // Run all of the _queue directly\n    let allfinished = true;\n    for (let i = 0, len = this._queue.length; i < len; ++i) {\n      // Get the current function to run\n      const current = this._queue[i];\n\n      // Run the function if its not finished, we keep track of the finished\n      // flag for the sake of declarative _queue\n      const converged = current.runner.call(this, positionOrDt);\n      current.finished = current.finished || converged === true;\n      allfinished = allfinished && current.finished;\n    }\n\n    // We report when all of the constructors are finished\n    return allfinished;\n  }\n\n  // do nothing and return false\n  _tryRetarget(method, target, extra) {\n    if (this._history[method]) {\n      // if the last method wasn't even initialised, throw it away\n      if (!this._history[method].caller.initialised) {\n        const index = this._queue.indexOf(this._history[method].caller);\n        this._queue.splice(index, 1);\n        return false;\n      }\n\n      // for the case of transformations, we use the special retarget function\n      // which has access to the outer scope\n      if (this._history[method].caller.retarget) {\n        this._history[method].caller.retarget.call(this, target, extra);\n        // for everything else a simple morpher change is sufficient\n      } else {\n        this._history[method].morpher.to(target);\n      }\n      this._history[method].caller.finished = false;\n      const timeline = this.timeline();\n      timeline && timeline.play();\n      return true;\n    }\n    return false;\n  }\n}\nRunner.id = 0;\nclass FakeRunner {\n  constructor(transforms = new Matrix(), id = -1, done = true) {\n    this.transforms = transforms;\n    this.id = id;\n    this.done = done;\n  }\n  clearTransformsFromQueue() {}\n}\nextend([Runner, FakeRunner], {\n  mergeWith(runner) {\n    return new FakeRunner(runner.transforms.lmultiply(this.transforms), runner.id);\n  }\n});\n\n// FakeRunner.emptyRunner = new FakeRunner()\n\nconst lmultiply = (last, curr) => last.lmultiplyO(curr);\nconst getRunnerTransform = runner => runner.transforms;\nfunction mergeTransforms() {\n  // Find the matrix to apply to the element and apply it\n  const runners = this._transformationRunners.runners;\n  const netTransform = runners.map(getRunnerTransform).reduce(lmultiply, new Matrix());\n  this.transform(netTransform);\n  this._transformationRunners.merge();\n  if (this._transformationRunners.length() === 1) {\n    this._frameId = null;\n  }\n}\nclass RunnerArray {\n  constructor() {\n    this.runners = [];\n    this.ids = [];\n  }\n  add(runner) {\n    if (this.runners.includes(runner)) return;\n    const id = runner.id + 1;\n    this.runners.push(runner);\n    this.ids.push(id);\n    return this;\n  }\n  clearBefore(id) {\n    const deleteCnt = this.ids.indexOf(id + 1) || 1;\n    this.ids.splice(0, deleteCnt, 0);\n    this.runners.splice(0, deleteCnt, new FakeRunner()).forEach(r => r.clearTransformsFromQueue());\n    return this;\n  }\n  edit(id, newRunner) {\n    const index = this.ids.indexOf(id + 1);\n    this.ids.splice(index, 1, id + 1);\n    this.runners.splice(index, 1, newRunner);\n    return this;\n  }\n  getByID(id) {\n    return this.runners[this.ids.indexOf(id + 1)];\n  }\n  length() {\n    return this.ids.length;\n  }\n  merge() {\n    let lastRunner = null;\n    for (let i = 0; i < this.runners.length; ++i) {\n      const runner = this.runners[i];\n      const condition = lastRunner && runner.done && lastRunner.done && (\n      // don't merge runner when persisted on timeline\n      !runner._timeline || !runner._timeline._runnerIds.includes(runner.id)) && (!lastRunner._timeline || !lastRunner._timeline._runnerIds.includes(lastRunner.id));\n      if (condition) {\n        // the +1 happens in the function\n        this.remove(runner.id);\n        const newRunner = runner.mergeWith(lastRunner);\n        this.edit(lastRunner.id, newRunner);\n        lastRunner = newRunner;\n        --i;\n      } else {\n        lastRunner = runner;\n      }\n    }\n    return this;\n  }\n  remove(id) {\n    const index = this.ids.indexOf(id + 1);\n    this.ids.splice(index, 1);\n    this.runners.splice(index, 1);\n    return this;\n  }\n}\nregisterMethods({\n  Element: {\n    animate(duration, delay, when) {\n      const o = Runner.sanitise(duration, delay, when);\n      const timeline = this.timeline();\n      return new Runner(o.duration).loop(o).element(this).timeline(timeline.play()).schedule(o.delay, o.when);\n    },\n    delay(by, when) {\n      return this.animate(0, by, when);\n    },\n    // this function searches for all runners on the element and deletes the ones\n    // which run before the current one. This is because absolute transformations\n    // overwrite anything anyway so there is no need to waste time computing\n    // other runners\n    _clearTransformRunnersBefore(currentRunner) {\n      this._transformationRunners.clearBefore(currentRunner.id);\n    },\n    _currentTransform(current) {\n      return this._transformationRunners.runners\n      // we need the equal sign here to make sure, that also transformations\n      // on the same runner which execute before the current transformation are\n      // taken into account\n      .filter(runner => runner.id <= current.id).map(getRunnerTransform).reduce(lmultiply, new Matrix());\n    },\n    _addRunner(runner) {\n      this._transformationRunners.add(runner);\n\n      // Make sure that the runner merge is executed at the very end of\n      // all Animator functions. That is why we use immediate here to execute\n      // the merge right after all frames are run\n      Animator.cancelImmediate(this._frameId);\n      this._frameId = Animator.immediate(mergeTransforms.bind(this));\n    },\n    _prepareRunner() {\n      if (this._frameId == null) {\n        this._transformationRunners = new RunnerArray().add(new FakeRunner(new Matrix(this)));\n      }\n    }\n  }\n});\n\n// Will output the elements from array A that are not in the array B\nconst difference = (a, b) => a.filter(x => !b.includes(x));\nextend(Runner, {\n  attr(a, v) {\n    return this.styleAttr('attr', a, v);\n  },\n  // Add animatable styles\n  css(s, v) {\n    return this.styleAttr('css', s, v);\n  },\n  styleAttr(type, nameOrAttrs, val) {\n    if (typeof nameOrAttrs === 'string') {\n      return this.styleAttr(type, {\n        [nameOrAttrs]: val\n      });\n    }\n    let attrs = nameOrAttrs;\n    if (this._tryRetarget(type, attrs)) return this;\n    let morpher = new Morphable(this._stepper).to(attrs);\n    let keys = Object.keys(attrs);\n    this.queue(function () {\n      morpher = morpher.from(this.element()[type](keys));\n    }, function (pos) {\n      this.element()[type](morpher.at(pos).valueOf());\n      return morpher.done();\n    }, function (newToAttrs) {\n      // Check if any new keys were added\n      const newKeys = Object.keys(newToAttrs);\n      const differences = difference(newKeys, keys);\n\n      // If their are new keys, initialize them and add them to morpher\n      if (differences.length) {\n        // Get the values\n        const addedFromAttrs = this.element()[type](differences);\n\n        // Get the already initialized values\n        const oldFromAttrs = new ObjectBag(morpher.from()).valueOf();\n\n        // Merge old and new\n        Object.assign(oldFromAttrs, addedFromAttrs);\n        morpher.from(oldFromAttrs);\n      }\n\n      // Get the object from the morpher\n      const oldToAttrs = new ObjectBag(morpher.to()).valueOf();\n\n      // Merge in new attributes\n      Object.assign(oldToAttrs, newToAttrs);\n\n      // Change morpher target\n      morpher.to(oldToAttrs);\n\n      // Make sure that we save the work we did so we don't need it to do again\n      keys = newKeys;\n      attrs = newToAttrs;\n    });\n    this._rememberMorpher(type, morpher);\n    return this;\n  },\n  zoom(level, point) {\n    if (this._tryRetarget('zoom', level, point)) return this;\n    let morpher = new Morphable(this._stepper).to(new SVGNumber(level));\n    this.queue(function () {\n      morpher = morpher.from(this.element().zoom());\n    }, function (pos) {\n      this.element().zoom(morpher.at(pos), point);\n      return morpher.done();\n    }, function (newLevel, newPoint) {\n      point = newPoint;\n      morpher.to(newLevel);\n    });\n    this._rememberMorpher('zoom', morpher);\n    return this;\n  },\n  /**\n   ** absolute transformations\n   **/\n\n  //\n  // M v -----|-----(D M v = F v)------|----->  T v\n  //\n  // 1. define the final state (T) and decompose it (once)\n  //    t = [tx, ty, the, lam, sy, sx]\n  // 2. on every frame: pull the current state of all previous transforms\n  //    (M - m can change)\n  //   and then write this as m = [tx0, ty0, the0, lam0, sy0, sx0]\n  // 3. Find the interpolated matrix F(pos) = m + pos * (t - m)\n  //   - Note F(0) = M\n  //   - Note F(1) = T\n  // 4. Now you get the delta matrix as a result: D = F * inv(M)\n\n  transform(transforms, relative, affine) {\n    // If we have a declarative function, we should retarget it if possible\n    relative = transforms.relative || relative;\n    if (this._isDeclarative && !relative && this._tryRetarget('transform', transforms)) {\n      return this;\n    }\n\n    // Parse the parameters\n    const isMatrix = Matrix.isMatrixLike(transforms);\n    affine = transforms.affine != null ? transforms.affine : affine != null ? affine : !isMatrix;\n\n    // Create a morpher and set its type\n    const morpher = new Morphable(this._stepper).type(affine ? TransformBag : Matrix);\n    let origin;\n    let element;\n    let current;\n    let currentAngle;\n    let startTransform;\n    function setup() {\n      // make sure element and origin is defined\n      element = element || this.element();\n      origin = origin || getOrigin(transforms, element);\n      startTransform = new Matrix(relative ? undefined : element);\n\n      // add the runner to the element so it can merge transformations\n      element._addRunner(this);\n\n      // Deactivate all transforms that have run so far if we are absolute\n      if (!relative) {\n        element._clearTransformRunnersBefore(this);\n      }\n    }\n    function run(pos) {\n      // clear all other transforms before this in case something is saved\n      // on this runner. We are absolute. We dont need these!\n      if (!relative) this.clearTransform();\n      const {\n        x,\n        y\n      } = new Point(origin).transform(element._currentTransform(this));\n      let target = new Matrix({\n        ...transforms,\n        origin: [x, y]\n      });\n      let start = this._isDeclarative && current ? current : startTransform;\n      if (affine) {\n        target = target.decompose(x, y);\n        start = start.decompose(x, y);\n\n        // Get the current and target angle as it was set\n        const rTarget = target.rotate;\n        const rCurrent = start.rotate;\n\n        // Figure out the shortest path to rotate directly\n        const possibilities = [rTarget - 360, rTarget, rTarget + 360];\n        const distances = possibilities.map(a => Math.abs(a - rCurrent));\n        const shortest = Math.min(...distances);\n        const index = distances.indexOf(shortest);\n        target.rotate = possibilities[index];\n      }\n      if (relative) {\n        // we have to be careful here not to overwrite the rotation\n        // with the rotate method of Matrix\n        if (!isMatrix) {\n          target.rotate = transforms.rotate || 0;\n        }\n        if (this._isDeclarative && currentAngle) {\n          start.rotate = currentAngle;\n        }\n      }\n      morpher.from(start);\n      morpher.to(target);\n      const affineParameters = morpher.at(pos);\n      currentAngle = affineParameters.rotate;\n      current = new Matrix(affineParameters);\n      this.addTransform(current);\n      element._addRunner(this);\n      return morpher.done();\n    }\n    function retarget(newTransforms) {\n      // only get a new origin if it changed since the last call\n      if ((newTransforms.origin || 'center').toString() !== (transforms.origin || 'center').toString()) {\n        origin = getOrigin(newTransforms, element);\n      }\n\n      // overwrite the old transformations with the new ones\n      transforms = {\n        ...newTransforms,\n        origin\n      };\n    }\n    this.queue(setup, run, retarget, true);\n    this._isDeclarative && this._rememberMorpher('transform', morpher);\n    return this;\n  },\n  // Animatable x-axis\n  x(x) {\n    return this._queueNumber('x', x);\n  },\n  // Animatable y-axis\n  y(y) {\n    return this._queueNumber('y', y);\n  },\n  ax(x) {\n    return this._queueNumber('ax', x);\n  },\n  ay(y) {\n    return this._queueNumber('ay', y);\n  },\n  dx(x = 0) {\n    return this._queueNumberDelta('x', x);\n  },\n  dy(y = 0) {\n    return this._queueNumberDelta('y', y);\n  },\n  dmove(x, y) {\n    return this.dx(x).dy(y);\n  },\n  _queueNumberDelta(method, to) {\n    to = new SVGNumber(to);\n\n    // Try to change the target if we have this method already registered\n    if (this._tryRetarget(method, to)) return this;\n\n    // Make a morpher and queue the animation\n    const morpher = new Morphable(this._stepper).to(to);\n    let from = null;\n    this.queue(function () {\n      from = this.element()[method]();\n      morpher.from(from);\n      morpher.to(from + to);\n    }, function (pos) {\n      this.element()[method](morpher.at(pos));\n      return morpher.done();\n    }, function (newTo) {\n      morpher.to(from + new SVGNumber(newTo));\n    });\n\n    // Register the morpher so that if it is changed again, we can retarget it\n    this._rememberMorpher(method, morpher);\n    return this;\n  },\n  _queueObject(method, to) {\n    // Try to change the target if we have this method already registered\n    if (this._tryRetarget(method, to)) return this;\n\n    // Make a morpher and queue the animation\n    const morpher = new Morphable(this._stepper).to(to);\n    this.queue(function () {\n      morpher.from(this.element()[method]());\n    }, function (pos) {\n      this.element()[method](morpher.at(pos));\n      return morpher.done();\n    });\n\n    // Register the morpher so that if it is changed again, we can retarget it\n    this._rememberMorpher(method, morpher);\n    return this;\n  },\n  _queueNumber(method, value) {\n    return this._queueObject(method, new SVGNumber(value));\n  },\n  // Animatable center x-axis\n  cx(x) {\n    return this._queueNumber('cx', x);\n  },\n  // Animatable center y-axis\n  cy(y) {\n    return this._queueNumber('cy', y);\n  },\n  // Add animatable move\n  move(x, y) {\n    return this.x(x).y(y);\n  },\n  amove(x, y) {\n    return this.ax(x).ay(y);\n  },\n  // Add animatable center\n  center(x, y) {\n    return this.cx(x).cy(y);\n  },\n  // Add animatable size\n  size(width, height) {\n    // animate bbox based size for all other elements\n    let box;\n    if (!width || !height) {\n      box = this._element.bbox();\n    }\n    if (!width) {\n      width = box.width / box.height * height;\n    }\n    if (!height) {\n      height = box.height / box.width * width;\n    }\n    return this.width(width).height(height);\n  },\n  // Add animatable width\n  width(width) {\n    return this._queueNumber('width', width);\n  },\n  // Add animatable height\n  height(height) {\n    return this._queueNumber('height', height);\n  },\n  // Add animatable plot\n  plot(a, b, c, d) {\n    // Lines can be plotted with 4 arguments\n    if (arguments.length === 4) {\n      return this.plot([a, b, c, d]);\n    }\n    if (this._tryRetarget('plot', a)) return this;\n    const morpher = new Morphable(this._stepper).type(this._element.MorphArray).to(a);\n    this.queue(function () {\n      morpher.from(this._element.array());\n    }, function (pos) {\n      this._element.plot(morpher.at(pos));\n      return morpher.done();\n    });\n    this._rememberMorpher('plot', morpher);\n    return this;\n  },\n  // Add leading method\n  leading(value) {\n    return this._queueNumber('leading', value);\n  },\n  // Add animatable viewbox\n  viewbox(x, y, width, height) {\n    return this._queueObject('viewbox', new Box(x, y, width, height));\n  },\n  update(o) {\n    if (typeof o !== 'object') {\n      return this.update({\n        offset: arguments[0],\n        color: arguments[1],\n        opacity: arguments[2]\n      });\n    }\n    if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n    if (o.color != null) this.attr('stop-color', o.color);\n    if (o.offset != null) this.attr('offset', o.offset);\n    return this;\n  }\n});\nextend(Runner, {\n  rx,\n  ry,\n  from,\n  to\n});\nregister(Runner, 'Runner');\n\nclass Svg extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('svg', node), attrs);\n    this.namespace();\n  }\n\n  // Creates and returns defs element\n  defs() {\n    if (!this.isRoot()) return this.root().defs();\n    return adopt(this.node.querySelector('defs')) || this.put(new Defs());\n  }\n  isRoot() {\n    return !this.node.parentNode || !(this.node.parentNode instanceof globals.window.SVGElement) && this.node.parentNode.nodeName !== '#document-fragment';\n  }\n\n  // Add namespaces\n  namespace() {\n    if (!this.isRoot()) return this.root().namespace();\n    return this.attr({\n      xmlns: svg,\n      version: '1.1'\n    }).attr('xmlns:xlink', xlink, xmlns);\n  }\n  removeNamespace() {\n    return this.attr({\n      xmlns: null,\n      version: null\n    }).attr('xmlns:xlink', null, xmlns).attr('xmlns:svgjs', null, xmlns);\n  }\n\n  // Check if this is a root svg\n  // If not, call root() from this element\n  root() {\n    if (this.isRoot()) return this;\n    return super.root();\n  }\n}\nregisterMethods({\n  Container: {\n    // Create nested svg document\n    nested: wrapWithAttrCheck(function () {\n      return this.put(new Svg());\n    })\n  }\n});\nregister(Svg, 'Svg', true);\n\nclass Symbol extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('symbol', node), attrs);\n  }\n}\nregisterMethods({\n  Container: {\n    symbol: wrapWithAttrCheck(function () {\n      return this.put(new Symbol());\n    })\n  }\n});\nregister(Symbol, 'Symbol');\n\n// Create plain text node\nfunction plain(text) {\n  // clear if build mode is disabled\n  if (this._build === false) {\n    this.clear();\n  }\n\n  // create text node\n  this.node.appendChild(globals.document.createTextNode(text));\n  return this;\n}\n\n// Get length of text element\nfunction length() {\n  return this.node.getComputedTextLength();\n}\n\n// Move over x-axis\n// Text is moved by its bounding box\n// text-anchor does NOT matter\nfunction x$1(x, box = this.bbox()) {\n  if (x == null) {\n    return box.x;\n  }\n  return this.attr('x', this.attr('x') + x - box.x);\n}\n\n// Move over y-axis\nfunction y$1(y, box = this.bbox()) {\n  if (y == null) {\n    return box.y;\n  }\n  return this.attr('y', this.attr('y') + y - box.y);\n}\nfunction move$1(x, y, box = this.bbox()) {\n  return this.x(x, box).y(y, box);\n}\n\n// Move center over x-axis\nfunction cx(x, box = this.bbox()) {\n  if (x == null) {\n    return box.cx;\n  }\n  return this.attr('x', this.attr('x') + x - box.cx);\n}\n\n// Move center over y-axis\nfunction cy(y, box = this.bbox()) {\n  if (y == null) {\n    return box.cy;\n  }\n  return this.attr('y', this.attr('y') + y - box.cy);\n}\nfunction center(x, y, box = this.bbox()) {\n  return this.cx(x, box).cy(y, box);\n}\nfunction ax(x) {\n  return this.attr('x', x);\n}\nfunction ay(y) {\n  return this.attr('y', y);\n}\nfunction amove(x, y) {\n  return this.ax(x).ay(y);\n}\n\n// Enable / disable build mode\nfunction build(build) {\n  this._build = !!build;\n  return this;\n}\n\nvar textable = {\n  __proto__: null,\n  amove: amove,\n  ax: ax,\n  ay: ay,\n  build: build,\n  center: center,\n  cx: cx,\n  cy: cy,\n  length: length,\n  move: move$1,\n  plain: plain,\n  x: x$1,\n  y: y$1\n};\n\nclass Text extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('text', node), attrs);\n    this.dom.leading = this.dom.leading ?? new SVGNumber(1.3); // store leading value for rebuilding\n    this._rebuild = true; // enable automatic updating of dy values\n    this._build = false; // disable build mode for adding multiple lines\n  }\n\n  // Set / get leading\n  leading(value) {\n    // act as getter\n    if (value == null) {\n      return this.dom.leading;\n    }\n\n    // act as setter\n    this.dom.leading = new SVGNumber(value);\n    return this.rebuild();\n  }\n\n  // Rebuild appearance type\n  rebuild(rebuild) {\n    // store new rebuild flag if given\n    if (typeof rebuild === 'boolean') {\n      this._rebuild = rebuild;\n    }\n\n    // define position of all lines\n    if (this._rebuild) {\n      const self = this;\n      let blankLineOffset = 0;\n      const leading = this.dom.leading;\n      this.each(function (i) {\n        if (isDescriptive(this.node)) return;\n        const fontSize = globals.window.getComputedStyle(this.node).getPropertyValue('font-size');\n        const dy = leading * new SVGNumber(fontSize);\n        if (this.dom.newLined) {\n          this.attr('x', self.attr('x'));\n          if (this.text() === '\\n') {\n            blankLineOffset += dy;\n          } else {\n            this.attr('dy', i ? dy + blankLineOffset : 0);\n            blankLineOffset = 0;\n          }\n        }\n      });\n      this.fire('rebuild');\n    }\n    return this;\n  }\n\n  // overwrite method from parent to set data properly\n  setData(o) {\n    this.dom = o;\n    this.dom.leading = new SVGNumber(o.leading || 1.3);\n    return this;\n  }\n  writeDataToDom() {\n    writeDataToDom(this, this.dom, {\n      leading: 1.3\n    });\n    return this;\n  }\n\n  // Set the text content\n  text(text) {\n    // act as getter\n    if (text === undefined) {\n      const children = this.node.childNodes;\n      let firstLine = 0;\n      text = '';\n      for (let i = 0, len = children.length; i < len; ++i) {\n        // skip textPaths - they are no lines\n        if (children[i].nodeName === 'textPath' || isDescriptive(children[i])) {\n          if (i === 0) firstLine = i + 1;\n          continue;\n        }\n\n        // add newline if its not the first child and newLined is set to true\n        if (i !== firstLine && children[i].nodeType !== 3 && adopt(children[i]).dom.newLined === true) {\n          text += '\\n';\n        }\n\n        // add content of this node\n        text += children[i].textContent;\n      }\n      return text;\n    }\n\n    // remove existing content\n    this.clear().build(true);\n    if (typeof text === 'function') {\n      // call block\n      text.call(this, this);\n    } else {\n      // store text and make sure text is not blank\n      text = (text + '').split('\\n');\n\n      // build new lines\n      for (let j = 0, jl = text.length; j < jl; j++) {\n        this.newLine(text[j]);\n      }\n    }\n\n    // disable build mode and rebuild lines\n    return this.build(false).rebuild();\n  }\n}\nextend(Text, textable);\nregisterMethods({\n  Container: {\n    // Create text element\n    text: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).text(text);\n    }),\n    // Create plain text element\n    plain: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).plain(text);\n    })\n  }\n});\nregister(Text, 'Text');\n\nclass Tspan extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('tspan', node), attrs);\n    this._build = false; // disable build mode for adding multiple lines\n  }\n\n  // Shortcut dx\n  dx(dx) {\n    return this.attr('dx', dx);\n  }\n\n  // Shortcut dy\n  dy(dy) {\n    return this.attr('dy', dy);\n  }\n\n  // Create new line\n  newLine() {\n    // mark new line\n    this.dom.newLined = true;\n\n    // fetch parent\n    const text = this.parent();\n\n    // early return in case we are not in a text element\n    if (!(text instanceof Text)) {\n      return this;\n    }\n    const i = text.index(this);\n    const fontSize = globals.window.getComputedStyle(this.node).getPropertyValue('font-size');\n    const dy = text.dom.leading * new SVGNumber(fontSize);\n\n    // apply new position\n    return this.dy(i ? dy : 0).attr('x', text.x());\n  }\n\n  // Set text content\n  text(text) {\n    if (text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '');\n    if (typeof text === 'function') {\n      this.clear().build(true);\n      text.call(this, this);\n      this.build(false);\n    } else {\n      this.plain(text);\n    }\n    return this;\n  }\n}\nextend(Tspan, textable);\nregisterMethods({\n  Tspan: {\n    tspan: wrapWithAttrCheck(function (text = '') {\n      const tspan = new Tspan();\n\n      // clear if build mode is disabled\n      if (!this._build) {\n        this.clear();\n      }\n\n      // add new tspan\n      return this.put(tspan).text(text);\n    })\n  },\n  Text: {\n    newLine: function (text = '') {\n      return this.tspan(text).newLine();\n    }\n  }\n});\nregister(Tspan, 'Tspan');\n\nclass Circle extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('circle', node), attrs);\n  }\n  radius(r) {\n    return this.attr('r', r);\n  }\n\n  // Radius x value\n  rx(rx) {\n    return this.attr('r', rx);\n  }\n\n  // Alias radius x value\n  ry(ry) {\n    return this.rx(ry);\n  }\n  size(size) {\n    return this.radius(new SVGNumber(size).divide(2));\n  }\n}\nextend(Circle, {\n  x: x$3,\n  y: y$3,\n  cx: cx$1,\n  cy: cy$1,\n  width: width$2,\n  height: height$2\n});\nregisterMethods({\n  Container: {\n    // Create circle element\n    circle: wrapWithAttrCheck(function (size = 0) {\n      return this.put(new Circle()).size(size).move(0, 0);\n    })\n  }\n});\nregister(Circle, 'Circle');\n\nclass ClipPath extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('clipPath', node), attrs);\n  }\n\n  // Unclip all clipped elements and remove itself\n  remove() {\n    // unclip all targets\n    this.targets().forEach(function (el) {\n      el.unclip();\n    });\n\n    // remove clipPath from parent\n    return super.remove();\n  }\n  targets() {\n    return baseFind('svg [clip-path*=' + this.id() + ']');\n  }\n}\nregisterMethods({\n  Container: {\n    // Create clipping element\n    clip: wrapWithAttrCheck(function () {\n      return this.defs().put(new ClipPath());\n    })\n  },\n  Element: {\n    // Distribute clipPath to svg element\n    clipper() {\n      return this.reference('clip-path');\n    },\n    clipWith(element) {\n      // use given clip or create a new one\n      const clipper = element instanceof ClipPath ? element : this.parent().clip().add(element);\n\n      // apply mask\n      return this.attr('clip-path', 'url(#' + clipper.id() + ')');\n    },\n    // Unclip element\n    unclip() {\n      return this.attr('clip-path', null);\n    }\n  }\n});\nregister(ClipPath, 'ClipPath');\n\nclass ForeignObject extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('foreignObject', node), attrs);\n  }\n}\nregisterMethods({\n  Container: {\n    foreignObject: wrapWithAttrCheck(function (width, height) {\n      return this.put(new ForeignObject()).size(width, height);\n    })\n  }\n});\nregister(ForeignObject, 'ForeignObject');\n\nfunction dmove(dx, dy) {\n  this.children().forEach(child => {\n    let bbox;\n\n    // We have to wrap this for elements that dont have a bbox\n    // e.g. title and other descriptive elements\n    try {\n      // Get the childs bbox\n      // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1905039\n      // Because bbox for nested svgs returns the contents bbox in the coordinate space of the svg itself (weird!), we cant use bbox for svgs\n      // Therefore we have to use getBoundingClientRect. But THAT is broken (as explained in the bug).\n      // Funnily enough the broken behavior would work for us but that breaks it in chrome\n      // So we have to replicate the broken behavior of FF by just reading the attributes of the svg itself\n      bbox = child.node instanceof getWindow().SVGSVGElement ? new Box(child.attr(['x', 'y', 'width', 'height'])) : child.bbox();\n    } catch (e) {\n      return;\n    }\n\n    // Get childs matrix\n    const m = new Matrix(child);\n    // Translate childs matrix by amount and\n    // transform it back into parents space\n    const matrix = m.translate(dx, dy).transform(m.inverse());\n    // Calculate new x and y from old box\n    const p = new Point(bbox.x, bbox.y).transform(matrix);\n    // Move element\n    child.move(p.x, p.y);\n  });\n  return this;\n}\nfunction dx(dx) {\n  return this.dmove(dx, 0);\n}\nfunction dy(dy) {\n  return this.dmove(0, dy);\n}\nfunction height(height, box = this.bbox()) {\n  if (height == null) return box.height;\n  return this.size(box.width, height, box);\n}\nfunction move(x = 0, y = 0, box = this.bbox()) {\n  const dx = x - box.x;\n  const dy = y - box.y;\n  return this.dmove(dx, dy);\n}\nfunction size(width, height, box = this.bbox()) {\n  const p = proportionalSize(this, width, height, box);\n  const scaleX = p.width / box.width;\n  const scaleY = p.height / box.height;\n  this.children().forEach(child => {\n    const o = new Point(box).transform(new Matrix(child).inverse());\n    child.scale(scaleX, scaleY, o.x, o.y);\n  });\n  return this;\n}\nfunction width(width, box = this.bbox()) {\n  if (width == null) return box.width;\n  return this.size(width, box.height, box);\n}\nfunction x(x, box = this.bbox()) {\n  if (x == null) return box.x;\n  return this.move(x, box.y, box);\n}\nfunction y(y, box = this.bbox()) {\n  if (y == null) return box.y;\n  return this.move(box.x, y, box);\n}\n\nvar containerGeometry = {\n  __proto__: null,\n  dmove: dmove,\n  dx: dx,\n  dy: dy,\n  height: height,\n  move: move,\n  size: size,\n  width: width,\n  x: x,\n  y: y\n};\n\nclass G extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('g', node), attrs);\n  }\n}\nextend(G, containerGeometry);\nregisterMethods({\n  Container: {\n    // Create a group element\n    group: wrapWithAttrCheck(function () {\n      return this.put(new G());\n    })\n  }\n});\nregister(G, 'G');\n\nclass A extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('a', node), attrs);\n  }\n\n  // Link target attribute\n  target(target) {\n    return this.attr('target', target);\n  }\n\n  // Link url\n  to(url) {\n    return this.attr('href', url, xlink);\n  }\n}\nextend(A, containerGeometry);\nregisterMethods({\n  Container: {\n    // Create a hyperlink element\n    link: wrapWithAttrCheck(function (url) {\n      return this.put(new A()).to(url);\n    })\n  },\n  Element: {\n    unlink() {\n      const link = this.linker();\n      if (!link) return this;\n      const parent = link.parent();\n      if (!parent) {\n        return this.remove();\n      }\n      const index = parent.index(link);\n      parent.add(this, index);\n      link.remove();\n      return this;\n    },\n    linkTo(url) {\n      // reuse old link if possible\n      let link = this.linker();\n      if (!link) {\n        link = new A();\n        this.wrap(link);\n      }\n      if (typeof url === 'function') {\n        url.call(link, link);\n      } else {\n        link.to(url);\n      }\n      return this;\n    },\n    linker() {\n      const link = this.parent();\n      if (link && link.node.nodeName.toLowerCase() === 'a') {\n        return link;\n      }\n      return null;\n    }\n  }\n});\nregister(A, 'A');\n\nclass Mask extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('mask', node), attrs);\n  }\n\n  // Unmask all masked elements and remove itself\n  remove() {\n    // unmask all targets\n    this.targets().forEach(function (el) {\n      el.unmask();\n    });\n\n    // remove mask from parent\n    return super.remove();\n  }\n  targets() {\n    return baseFind('svg [mask*=' + this.id() + ']');\n  }\n}\nregisterMethods({\n  Container: {\n    mask: wrapWithAttrCheck(function () {\n      return this.defs().put(new Mask());\n    })\n  },\n  Element: {\n    // Distribute mask to svg element\n    masker() {\n      return this.reference('mask');\n    },\n    maskWith(element) {\n      // use given mask or create a new one\n      const masker = element instanceof Mask ? element : this.parent().mask().add(element);\n\n      // apply mask\n      return this.attr('mask', 'url(#' + masker.id() + ')');\n    },\n    // Unmask element\n    unmask() {\n      return this.attr('mask', null);\n    }\n  }\n});\nregister(Mask, 'Mask');\n\nclass Stop extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('stop', node), attrs);\n  }\n\n  // add color stops\n  update(o) {\n    if (typeof o === 'number' || o instanceof SVGNumber) {\n      o = {\n        offset: arguments[0],\n        color: arguments[1],\n        opacity: arguments[2]\n      };\n    }\n\n    // set attributes\n    if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n    if (o.color != null) this.attr('stop-color', o.color);\n    if (o.offset != null) this.attr('offset', new SVGNumber(o.offset));\n    return this;\n  }\n}\nregisterMethods({\n  Gradient: {\n    // Add a color stop\n    stop: function (offset, color, opacity) {\n      return this.put(new Stop()).update(offset, color, opacity);\n    }\n  }\n});\nregister(Stop, 'Stop');\n\nfunction cssRule(selector, rule) {\n  if (!selector) return '';\n  if (!rule) return selector;\n  let ret = selector + '{';\n  for (const i in rule) {\n    ret += unCamelCase(i) + ':' + rule[i] + ';';\n  }\n  ret += '}';\n  return ret;\n}\nclass Style extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('style', node), attrs);\n  }\n  addText(w = '') {\n    this.node.textContent += w;\n    return this;\n  }\n  font(name, src, params = {}) {\n    return this.rule('@font-face', {\n      fontFamily: name,\n      src: src,\n      ...params\n    });\n  }\n  rule(selector, obj) {\n    return this.addText(cssRule(selector, obj));\n  }\n}\nregisterMethods('Dom', {\n  style(selector, obj) {\n    return this.put(new Style()).rule(selector, obj);\n  },\n  fontface(name, src, params) {\n    return this.put(new Style()).font(name, src, params);\n  }\n});\nregister(Style, 'Style');\n\nclass TextPath extends Text {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('textPath', node), attrs);\n  }\n\n  // return the array of the path track element\n  array() {\n    const track = this.track();\n    return track ? track.array() : null;\n  }\n\n  // Plot path if any\n  plot(d) {\n    const track = this.track();\n    let pathArray = null;\n    if (track) {\n      pathArray = track.plot(d);\n    }\n    return d == null ? pathArray : this;\n  }\n\n  // Get the path element\n  track() {\n    return this.reference('href');\n  }\n}\nregisterMethods({\n  Container: {\n    textPath: wrapWithAttrCheck(function (text, path) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = this.text(text);\n      }\n      return text.path(path);\n    })\n  },\n  Text: {\n    // Create path for text to run on\n    path: wrapWithAttrCheck(function (track, importNodes = true) {\n      const textPath = new TextPath();\n\n      // if track is a path, reuse it\n      if (!(track instanceof Path)) {\n        // create path element\n        track = this.defs().path(track);\n      }\n\n      // link textPath to path and add content\n      textPath.attr('href', '#' + track, xlink);\n\n      // Transplant all nodes from text to textPath\n      let node;\n      if (importNodes) {\n        while (node = this.node.firstChild) {\n          textPath.node.appendChild(node);\n        }\n      }\n\n      // add textPath element as child node and return textPath\n      return this.put(textPath);\n    }),\n    // Get the textPath children\n    textPath() {\n      return this.findOne('textPath');\n    }\n  },\n  Path: {\n    // creates a textPath from this path\n    text: wrapWithAttrCheck(function (text) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = new Text().addTo(this.parent()).text(text);\n      }\n\n      // Create textPath from text and path and return\n      return text.path(this);\n    }),\n    targets() {\n      return baseFind('svg textPath').filter(node => {\n        return (node.attr('href') || '').includes(this.id());\n      });\n\n      // Does not work in IE11. Use when IE support is dropped\n      // return baseFind('svg textPath[*|href*=' + this.id() + ']')\n    }\n  }\n});\nTextPath.prototype.MorphArray = PathArray;\nregister(TextPath, 'TextPath');\n\nclass Use extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('use', node), attrs);\n  }\n\n  // Use element as a reference\n  use(element, file) {\n    // Set lined element\n    return this.attr('href', (file || '') + '#' + element, xlink);\n  }\n}\nregisterMethods({\n  Container: {\n    // Create a use element\n    use: wrapWithAttrCheck(function (element, file) {\n      return this.put(new Use()).use(element, file);\n    })\n  }\n});\nregister(Use, 'Use');\n\n/* Optional Modules */\nconst SVG = makeInstance;\nextend([Svg, Symbol, Image, Pattern, Marker], getMethodsFor('viewbox'));\nextend([Line, Polyline, Polygon, Path], getMethodsFor('marker'));\nextend(Text, getMethodsFor('Text'));\nextend(Path, getMethodsFor('Path'));\nextend(Defs, getMethodsFor('Defs'));\nextend([Text, Tspan], getMethodsFor('Tspan'));\nextend([Rect, Ellipse, Gradient, Runner], getMethodsFor('radius'));\nextend(EventTarget, getMethodsFor('EventTarget'));\nextend(Dom, getMethodsFor('Dom'));\nextend(Element, getMethodsFor('Element'));\nextend(Shape, getMethodsFor('Shape'));\nextend([Container, Fragment], getMethodsFor('Container'));\nextend(Gradient, getMethodsFor('Gradient'));\nextend(Runner, getMethodsFor('Runner'));\nList.extend(getMethodNames());\nregisterMorphableType([SVGNumber, Color, Box, Matrix, SVGArray, PointArray, PathArray, Point]);\nmakeMorphable();\n\nexport { A, Animator, SVGArray as Array, Box, Circle, ClipPath, Color, Container, Controller, Defs, Dom, Ease, Element, Ellipse, EventTarget, ForeignObject, Fragment, G, Gradient, Image, Line, List, Marker, Mask, Matrix, Morphable, NonMorphable, SVGNumber as Number, ObjectBag, PID, Path, PathArray, Pattern, Point, PointArray, Polygon, Polyline, Queue, Rect, Runner, SVG, Shape, Spring, Stop, Style, Svg, Symbol, Text, TextPath, Timeline, TransformBag, Tspan, Use, adopt, assignNewId, clearEvents, create, defaults, dispatch, easing, eid, extend, baseFind as find, getClass, getEventTarget, getEvents, getWindow, makeInstance, makeMorphable, mockAdopt, namespaces, nodeOrNew, off, on, parser, regex, register, registerMorphableType, registerWindow, restoreWindow, root, saveWindow, utils, windowEvents, withWindow, wrapWithAttrCheck };\n//# sourceMappingURL=svg.esm.js.map\n","const methods = {}\nconst names = []\n\nexport function registerMethods(name, m) {\n  if (Array.isArray(name)) {\n    for (const _name of name) {\n      registerMethods(_name, m)\n    }\n    return\n  }\n\n  if (typeof name === 'object') {\n    for (const _name in name) {\n      registerMethods(_name, name[_name])\n    }\n    return\n  }\n\n  addMethodNames(Object.getOwnPropertyNames(m))\n  methods[name] = Object.assign(methods[name] || {}, m)\n}\n\nexport function getMethodsFor(name) {\n  return methods[name] || {}\n}\n\nexport function getMethodNames() {\n  return [...new Set(names)]\n}\n\nexport function addMethodNames(_names) {\n  names.push(..._names)\n}\n","// Map function\nexport function map(array, block) {\n  let i\n  const il = array.length\n  const result = []\n\n  for (i = 0; i < il; i++) {\n    result.push(block(array[i]))\n  }\n\n  return result\n}\n\n// Filter function\nexport function filter(array, block) {\n  let i\n  const il = array.length\n  const result = []\n\n  for (i = 0; i < il; i++) {\n    if (block(array[i])) {\n      result.push(array[i])\n    }\n  }\n\n  return result\n}\n\n// Degrees to radians\nexport function radians(d) {\n  return ((d % 360) * Math.PI) / 180\n}\n\n// Radians to degrees\nexport function degrees(r) {\n  return ((r * 180) / Math.PI) % 360\n}\n\n// Convert camel cased string to dash separated\nexport function unCamelCase(s) {\n  return s.replace(/([A-Z])/g, function (m, g) {\n    return '-' + g.toLowerCase()\n  })\n}\n\n// Capitalize first letter of a string\nexport function capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n// Calculate proportional width and height values when necessary\nexport function proportionalSize(element, width, height, box) {\n  if (width == null || height == null) {\n    box = box || element.bbox()\n\n    if (width == null) {\n      width = (box.width / box.height) * height\n    } else if (height == null) {\n      height = (box.height / box.width) * width\n    }\n  }\n\n  return {\n    width: width,\n    height: height\n  }\n}\n\n/**\n * This function adds support for string origins.\n * It searches for an origin in o.origin o.ox and o.originX.\n * This way, origin: {x: 'center', y: 50} can be passed as well as ox: 'center', oy: 50\n **/\nexport function getOrigin(o, element) {\n  const origin = o.origin\n  // First check if origin is in ox or originX\n  let ox = o.ox != null ? o.ox : o.originX != null ? o.originX : 'center'\n  let oy = o.oy != null ? o.oy : o.originY != null ? o.originY : 'center'\n\n  // Then check if origin was used and overwrite in that case\n  if (origin != null) {\n    ;[ox, oy] = Array.isArray(origin)\n      ? origin\n      : typeof origin === 'object'\n        ? [origin.x, origin.y]\n        : [origin, origin]\n  }\n\n  // Make sure to only call bbox when actually needed\n  const condX = typeof ox === 'string'\n  const condY = typeof oy === 'string'\n  if (condX || condY) {\n    const { height, width, x, y } = element.bbox()\n\n    // And only overwrite if string was passed for this specific axis\n    if (condX) {\n      ox = ox.includes('left')\n        ? x\n        : ox.includes('right')\n          ? x + width\n          : x + width / 2\n    }\n\n    if (condY) {\n      oy = oy.includes('top')\n        ? y\n        : oy.includes('bottom')\n          ? y + height\n          : y + height / 2\n    }\n  }\n\n  // Return the origin as it is if it wasn't a string\n  return [ox, oy]\n}\n\nconst descriptiveElements = new Set(['desc', 'metadata', 'title'])\nexport const isDescriptive = (element) =>\n  descriptiveElements.has(element.nodeName)\n\nexport const writeDataToDom = (element, data, defaults = {}) => {\n  const cloned = { ...data }\n\n  for (const key in cloned) {\n    if (cloned[key].valueOf() === defaults[key]) {\n      delete cloned[key]\n    }\n  }\n\n  if (Object.keys(cloned).length) {\n    element.node.setAttribute('data-svgjs', JSON.stringify(cloned)) // see #428\n  } else {\n    element.node.removeAttribute('data-svgjs')\n    element.node.removeAttribute('svgjs:data')\n  }\n}\n","// Default namespaces\nexport const svg = 'http://www.w3.org/2000/svg'\nexport const html = 'http://www.w3.org/1999/xhtml'\nexport const xmlns = 'http://www.w3.org/2000/xmlns/'\nexport const xlink = 'http://www.w3.org/1999/xlink'\n","export const globals = {\n  window: typeof window === 'undefined' ? null : window,\n  document: typeof document === 'undefined' ? null : document\n}\n\nexport function registerWindow(win = null, doc = null) {\n  globals.window = win\n  globals.document = doc\n}\n\nconst save = {}\n\nexport function saveWindow() {\n  save.window = globals.window\n  save.document = globals.document\n}\n\nexport function restoreWindow() {\n  globals.window = save.window\n  globals.document = save.document\n}\n\nexport function withWindow(win, fn) {\n  saveWindow()\n  registerWindow(win, win.document)\n  fn(win, win.document)\n  restoreWindow()\n}\n\nexport function getWindow() {\n  return globals.window\n}\n","export default class Base {\n  // constructor (node/*, {extensions = []} */) {\n  //   // this.tags = []\n  //   //\n  //   // for (let extension of extensions) {\n  //   //   extension.setup.call(this, node)\n  //   //   this.tags.push(extension.name)\n  //   // }\n  // }\n}\n","import { addMethodNames } from './methods.js'\nimport { capitalize } from './utils.js'\nimport { svg } from '../modules/core/namespaces.js'\nimport { globals } from '../utils/window.js'\nimport Base from '../types/Base.js'\n\nconst elements = {}\nexport const root = '___SYMBOL___ROOT___'\n\n// Method for element creation\nexport function create(name, ns = svg) {\n  // create element\n  return globals.document.createElementNS(ns, name)\n}\n\nexport function makeInstance(element, isHTML = false) {\n  if (element instanceof Base) return element\n\n  if (typeof element === 'object') {\n    return adopter(element)\n  }\n\n  if (element == null) {\n    return new elements[root]()\n  }\n\n  if (typeof element === 'string' && element.charAt(0) !== '<') {\n    return adopter(globals.document.querySelector(element))\n  }\n\n  // Make sure, that HTML elements are created with the correct namespace\n  const wrapper = isHTML ? globals.document.createElement('div') : create('svg')\n  wrapper.innerHTML = element\n\n  // We can use firstChild here because we know,\n  // that the first char is < and thus an element\n  element = adopter(wrapper.firstChild)\n\n  // make sure, that element doesn't have its wrapper attached\n  wrapper.removeChild(wrapper.firstChild)\n  return element\n}\n\nexport function nodeOrNew(name, node) {\n  return node &&\n    (node instanceof globals.window.Node ||\n      (node.ownerDocument &&\n        node instanceof node.ownerDocument.defaultView.Node))\n    ? node\n    : create(name)\n}\n\n// Adopt existing svg elements\nexport function adopt(node) {\n  // check for presence of node\n  if (!node) return null\n\n  // make sure a node isn't already adopted\n  if (node.instance instanceof Base) return node.instance\n\n  if (node.nodeName === '#document-fragment') {\n    return new elements.Fragment(node)\n  }\n\n  // initialize variables\n  let className = capitalize(node.nodeName || 'Dom')\n\n  // Make sure that gradients are adopted correctly\n  if (className === 'LinearGradient' || className === 'RadialGradient') {\n    className = 'Gradient'\n\n    // Fallback to Dom if element is not known\n  } else if (!elements[className]) {\n    className = 'Dom'\n  }\n\n  return new elements[className](node)\n}\n\nlet adopter = adopt\n\nexport function mockAdopt(mock = adopt) {\n  adopter = mock\n}\n\nexport function register(element, name = element.name, asRoot = false) {\n  elements[name] = element\n  if (asRoot) elements[root] = element\n\n  addMethodNames(Object.getOwnPropertyNames(element.prototype))\n\n  return element\n}\n\nexport function getClass(name) {\n  return elements[name]\n}\n\n// Element id sequence\nlet did = 1000\n\n// Get next named element id\nexport function eid(name) {\n  return 'Svgjs' + capitalize(name) + did++\n}\n\n// Deep new id assignment\nexport function assignNewId(node) {\n  // do the same for SVG child nodes as well\n  for (let i = node.children.length - 1; i >= 0; i--) {\n    assignNewId(node.children[i])\n  }\n\n  if (node.id) {\n    node.id = eid(node.nodeName)\n    return node\n  }\n\n  return node\n}\n\n// Method for extending objects\nexport function extend(modules, methods) {\n  let key, i\n\n  modules = Array.isArray(modules) ? modules : [modules]\n\n  for (i = modules.length - 1; i >= 0; i--) {\n    for (key in methods) {\n      modules[i].prototype[key] = methods[key]\n    }\n  }\n}\n\nexport function wrapWithAttrCheck(fn) {\n  return function (...args) {\n    const o = args[args.length - 1]\n\n    if (o && o.constructor === Object && !(o instanceof Array)) {\n      return fn.apply(this, args.slice(0, -1)).attr(o)\n    } else {\n      return fn.apply(this, args)\n    }\n  }\n}\n","import { makeInstance } from '../../utils/adopter.js'\nimport { registerMethods } from '../../utils/methods.js'\n\n// Get all siblings, including myself\nexport function siblings() {\n  return this.parent().children()\n}\n\n// Get the current position siblings\nexport function position() {\n  return this.parent().index(this)\n}\n\n// Get the next element (will return null if there is none)\nexport function next() {\n  return this.siblings()[this.position() + 1]\n}\n\n// Get the next element (will return null if there is none)\nexport function prev() {\n  return this.siblings()[this.position() - 1]\n}\n\n// Send given element one step forward\nexport function forward() {\n  const i = this.position()\n  const p = this.parent()\n\n  // move node one step forward\n  p.add(this.remove(), i + 1)\n\n  return this\n}\n\n// Send given element one step backward\nexport function backward() {\n  const i = this.position()\n  const p = this.parent()\n\n  p.add(this.remove(), i ? i - 1 : 0)\n\n  return this\n}\n\n// Send given element all the way to the front\nexport function front() {\n  const p = this.parent()\n\n  // Move node forward\n  p.add(this.remove())\n\n  return this\n}\n\n// Send given element all the way to the back\nexport function back() {\n  const p = this.parent()\n\n  // Move node back\n  p.add(this.remove(), 0)\n\n  return this\n}\n\n// Inserts a given element before the targeted element\nexport function before(element) {\n  element = makeInstance(element)\n  element.remove()\n\n  const i = this.position()\n\n  this.parent().add(element, i)\n\n  return this\n}\n\n// Inserts a given element after the targeted element\nexport function after(element) {\n  element = makeInstance(element)\n  element.remove()\n\n  const i = this.position()\n\n  this.parent().add(element, i + 1)\n\n  return this\n}\n\nexport function insertBefore(element) {\n  element = makeInstance(element)\n  element.before(this)\n  return this\n}\n\nexport function insertAfter(element) {\n  element = makeInstance(element)\n  element.after(this)\n  return this\n}\n\nregisterMethods('Dom', {\n  siblings,\n  position,\n  next,\n  prev,\n  forward,\n  backward,\n  front,\n  back,\n  before,\n  after,\n  insertBefore,\n  insertAfter\n})\n","// Parse unit value\nexport const numberAndUnit =\n  /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\n\n// Parse hex value\nexport const hex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n\n// Parse rgb value\nexport const rgb = /rgb\\((\\d+),(\\d+),(\\d+)\\)/\n\n// Parse reference id\nexport const reference = /(#[a-z_][a-z0-9\\-_]*)/i\n\n// splits a transformation chain\nexport const transforms = /\\)\\s*,?\\s*/\n\n// Whitespace\nexport const whitespace = /\\s/g\n\n// Test hex value\nexport const isHex = /^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i\n\n// Test rgb value\nexport const isRgb = /^rgb\\(/\n\n// Test for blank string\nexport const isBlank = /^(\\s+)?$/\n\n// Test for numeric string\nexport const isNumber = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\n\n// Test for image url\nexport const isImage = /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\n\n// split at whitespace and comma\nexport const delimiter = /[\\s,]+/\n\n// Test for path letter\nexport const isPathLetter = /[MLHVCSQTAZ]/i\n","import { delimiter } from '../core/regex.js'\nimport { registerMethods } from '../../utils/methods.js'\n\n// Return array of classes on the node\nexport function classes() {\n  const attr = this.attr('class')\n  return attr == null ? [] : attr.trim().split(delimiter)\n}\n\n// Return true if class exists on the node, false otherwise\nexport function hasClass(name) {\n  return this.classes().indexOf(name) !== -1\n}\n\n// Add class to the node\nexport function addClass(name) {\n  if (!this.hasClass(name)) {\n    const array = this.classes()\n    array.push(name)\n    this.attr('class', array.join(' '))\n  }\n\n  return this\n}\n\n// Remove class from the node\nexport function removeClass(name) {\n  if (this.hasClass(name)) {\n    this.attr(\n      'class',\n      this.classes()\n        .filter(function (c) {\n          return c !== name\n        })\n        .join(' ')\n    )\n  }\n\n  return this\n}\n\n// Toggle the presence of a class on the node\nexport function toggleClass(name) {\n  return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\n}\n\nregisterMethods('Dom', {\n  classes,\n  hasClass,\n  addClass,\n  removeClass,\n  toggleClass\n})\n","import { isBlank } from '../core/regex.js'\nimport { registerMethods } from '../../utils/methods.js'\n\n// Dynamic style generator\nexport function css(style, val) {\n  const ret = {}\n  if (arguments.length === 0) {\n    // get full style as object\n    this.node.style.cssText\n      .split(/\\s*;\\s*/)\n      .filter(function (el) {\n        return !!el.length\n      })\n      .forEach(function (el) {\n        const t = el.split(/\\s*:\\s*/)\n        ret[t[0]] = t[1]\n      })\n    return ret\n  }\n\n  if (arguments.length < 2) {\n    // get style properties as array\n    if (Array.isArray(style)) {\n      for (const name of style) {\n        const cased = name\n        ret[name] = this.node.style.getPropertyValue(cased)\n      }\n      return ret\n    }\n\n    // get style for property\n    if (typeof style === 'string') {\n      return this.node.style.getPropertyValue(style)\n    }\n\n    // set styles in object\n    if (typeof style === 'object') {\n      for (const name in style) {\n        // set empty string if null/undefined/'' was given\n        this.node.style.setProperty(\n          name,\n          style[name] == null || isBlank.test(style[name]) ? '' : style[name]\n        )\n      }\n    }\n  }\n\n  // set style for property\n  if (arguments.length === 2) {\n    this.node.style.setProperty(\n      style,\n      val == null || isBlank.test(val) ? '' : val\n    )\n  }\n\n  return this\n}\n\n// Show element\nexport function show() {\n  return this.css('display', '')\n}\n\n// Hide element\nexport function hide() {\n  return this.css('display', 'none')\n}\n\n// Is element visible?\nexport function visible() {\n  return this.css('display') !== 'none'\n}\n\nregisterMethods('Dom', {\n  css,\n  show,\n  hide,\n  visible\n})\n","import { registerMethods } from '../../utils/methods.js'\nimport { filter, map } from '../../utils/utils.js'\n\n// Store data values on svg nodes\nexport function data(a, v, r) {\n  if (a == null) {\n    // get an object of attributes\n    return this.data(\n      map(\n        filter(\n          this.node.attributes,\n          (el) => el.nodeName.indexOf('data-') === 0\n        ),\n        (el) => el.nodeName.slice(5)\n      )\n    )\n  } else if (a instanceof Array) {\n    const data = {}\n    for (const key of a) {\n      data[key] = this.data(key)\n    }\n    return data\n  } else if (typeof a === 'object') {\n    for (v in a) {\n      this.data(v, a[v])\n    }\n  } else if (arguments.length < 2) {\n    try {\n      return JSON.parse(this.attr('data-' + a))\n    } catch (e) {\n      return this.attr('data-' + a)\n    }\n  } else {\n    this.attr(\n      'data-' + a,\n      v === null\n        ? null\n        : r === true || typeof v === 'string' || typeof v === 'number'\n          ? v\n          : JSON.stringify(v)\n    )\n  }\n\n  return this\n}\n\nregisterMethods('Dom', { data })\n","import { registerMethods } from '../../utils/methods.js'\n\n// Remember arbitrary data\nexport function remember(k, v) {\n  // remember every item in an object individually\n  if (typeof arguments[0] === 'object') {\n    for (const key in k) {\n      this.remember(key, k[key])\n    }\n  } else if (arguments.length === 1) {\n    // retrieve memory\n    return this.memory()[k]\n  } else {\n    // store memory\n    this.memory()[k] = v\n  }\n\n  return this\n}\n\n// Erase a given memory\nexport function forget() {\n  if (arguments.length === 0) {\n    this._memory = {}\n  } else {\n    for (let i = arguments.length - 1; i >= 0; i--) {\n      delete this.memory()[arguments[i]]\n    }\n  }\n  return this\n}\n\n// This triggers creation of a new hidden class which is not performant\n// However, this function is not rarely used so it will not happen frequently\n// Return local memory object\nexport function memory() {\n  return (this._memory = this._memory || {})\n}\n\nregisterMethods('Dom', { remember, forget, memory })\n","import { hex, isHex, isRgb, rgb, whitespace } from '../modules/core/regex.js'\n\nfunction sixDigitHex(hex) {\n  return hex.length === 4\n    ? [\n        '#',\n        hex.substring(1, 2),\n        hex.substring(1, 2),\n        hex.substring(2, 3),\n        hex.substring(2, 3),\n        hex.substring(3, 4),\n        hex.substring(3, 4)\n      ].join('')\n    : hex\n}\n\nfunction componentHex(component) {\n  const integer = Math.round(component)\n  const bounded = Math.max(0, Math.min(255, integer))\n  const hex = bounded.toString(16)\n  return hex.length === 1 ? '0' + hex : hex\n}\n\nfunction is(object, space) {\n  for (let i = space.length; i--; ) {\n    if (object[space[i]] == null) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getParameters(a, b) {\n  const params = is(a, 'rgb')\n    ? { _a: a.r, _b: a.g, _c: a.b, _d: 0, space: 'rgb' }\n    : is(a, 'xyz')\n      ? { _a: a.x, _b: a.y, _c: a.z, _d: 0, space: 'xyz' }\n      : is(a, 'hsl')\n        ? { _a: a.h, _b: a.s, _c: a.l, _d: 0, space: 'hsl' }\n        : is(a, 'lab')\n          ? { _a: a.l, _b: a.a, _c: a.b, _d: 0, space: 'lab' }\n          : is(a, 'lch')\n            ? { _a: a.l, _b: a.c, _c: a.h, _d: 0, space: 'lch' }\n            : is(a, 'cmyk')\n              ? { _a: a.c, _b: a.m, _c: a.y, _d: a.k, space: 'cmyk' }\n              : { _a: 0, _b: 0, _c: 0, space: 'rgb' }\n\n  params.space = b || params.space\n  return params\n}\n\nfunction cieSpace(space) {\n  if (space === 'lab' || space === 'xyz' || space === 'lch') {\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction hueToRgb(p, q, t) {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n\nexport default class Color {\n  constructor(...inputs) {\n    this.init(...inputs)\n  }\n\n  // Test if given value is a color\n  static isColor(color) {\n    return (\n      color && (color instanceof Color || this.isRgb(color) || this.test(color))\n    )\n  }\n\n  // Test if given value is an rgb object\n  static isRgb(color) {\n    return (\n      color &&\n      typeof color.r === 'number' &&\n      typeof color.g === 'number' &&\n      typeof color.b === 'number'\n    )\n  }\n\n  /*\n  Generating random colors\n  */\n  static random(mode = 'vibrant', t) {\n    // Get the math modules\n    const { random, round, sin, PI: pi } = Math\n\n    // Run the correct generator\n    if (mode === 'vibrant') {\n      const l = (81 - 57) * random() + 57\n      const c = (83 - 45) * random() + 45\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'sine') {\n      t = t == null ? random() : t\n      const r = round(80 * sin((2 * pi * t) / 0.5 + 0.01) + 150)\n      const g = round(50 * sin((2 * pi * t) / 0.5 + 4.6) + 200)\n      const b = round(100 * sin((2 * pi * t) / 0.5 + 2.3) + 150)\n      const color = new Color(r, g, b)\n      return color\n    } else if (mode === 'pastel') {\n      const l = (94 - 86) * random() + 86\n      const c = (26 - 9) * random() + 9\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'dark') {\n      const l = 10 + 10 * random()\n      const c = (125 - 75) * random() + 86\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'rgb') {\n      const r = 255 * random()\n      const g = 255 * random()\n      const b = 255 * random()\n      const color = new Color(r, g, b)\n      return color\n    } else if (mode === 'lab') {\n      const l = 100 * random()\n      const a = 256 * random() - 128\n      const b = 256 * random() - 128\n      const color = new Color(l, a, b, 'lab')\n      return color\n    } else if (mode === 'grey') {\n      const grey = 255 * random()\n      const color = new Color(grey, grey, grey)\n      return color\n    } else {\n      throw new Error('Unsupported random color mode')\n    }\n  }\n\n  // Test if given value is a color string\n  static test(color) {\n    return typeof color === 'string' && (isHex.test(color) || isRgb.test(color))\n  }\n\n  cmyk() {\n    // Get the rgb values for the current color\n    const { _a, _b, _c } = this.rgb()\n    const [r, g, b] = [_a, _b, _c].map((v) => v / 255)\n\n    // Get the cmyk values in an unbounded format\n    const k = Math.min(1 - r, 1 - g, 1 - b)\n\n    if (k === 1) {\n      // Catch the black case\n      return new Color(0, 0, 0, 1, 'cmyk')\n    }\n\n    const c = (1 - r - k) / (1 - k)\n    const m = (1 - g - k) / (1 - k)\n    const y = (1 - b - k) / (1 - k)\n\n    // Construct the new color\n    const color = new Color(c, m, y, k, 'cmyk')\n    return color\n  }\n\n  hsl() {\n    // Get the rgb values\n    const { _a, _b, _c } = this.rgb()\n    const [r, g, b] = [_a, _b, _c].map((v) => v / 255)\n\n    // Find the maximum and minimum values to get the lightness\n    const max = Math.max(r, g, b)\n    const min = Math.min(r, g, b)\n    const l = (max + min) / 2\n\n    // If the r, g, v values are identical then we are grey\n    const isGrey = max === min\n\n    // Calculate the hue and saturation\n    const delta = max - min\n    const s = isGrey\n      ? 0\n      : l > 0.5\n        ? delta / (2 - max - min)\n        : delta / (max + min)\n    const h = isGrey\n      ? 0\n      : max === r\n        ? ((g - b) / delta + (g < b ? 6 : 0)) / 6\n        : max === g\n          ? ((b - r) / delta + 2) / 6\n          : max === b\n            ? ((r - g) / delta + 4) / 6\n            : 0\n\n    // Construct and return the new color\n    const color = new Color(360 * h, 100 * s, 100 * l, 'hsl')\n    return color\n  }\n\n  init(a = 0, b = 0, c = 0, d = 0, space = 'rgb') {\n    // This catches the case when a falsy value is passed like ''\n    a = !a ? 0 : a\n\n    // Reset all values in case the init function is rerun with new color space\n    if (this.space) {\n      for (const component in this.space) {\n        delete this[this.space[component]]\n      }\n    }\n\n    if (typeof a === 'number') {\n      // Allow for the case that we don't need d...\n      space = typeof d === 'string' ? d : space\n      d = typeof d === 'string' ? 0 : d\n\n      // Assign the values straight to the color\n      Object.assign(this, { _a: a, _b: b, _c: c, _d: d, space })\n      // If the user gave us an array, make the color from it\n    } else if (a instanceof Array) {\n      this.space = b || (typeof a[3] === 'string' ? a[3] : a[4]) || 'rgb'\n      Object.assign(this, { _a: a[0], _b: a[1], _c: a[2], _d: a[3] || 0 })\n    } else if (a instanceof Object) {\n      // Set the object up and assign its values directly\n      const values = getParameters(a, b)\n      Object.assign(this, values)\n    } else if (typeof a === 'string') {\n      if (isRgb.test(a)) {\n        const noWhitespace = a.replace(whitespace, '')\n        const [_a, _b, _c] = rgb\n          .exec(noWhitespace)\n          .slice(1, 4)\n          .map((v) => parseInt(v))\n        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' })\n      } else if (isHex.test(a)) {\n        const hexParse = (v) => parseInt(v, 16)\n        const [, _a, _b, _c] = hex.exec(sixDigitHex(a)).map(hexParse)\n        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' })\n      } else throw Error(\"Unsupported string format, can't construct Color\")\n    }\n\n    // Now add the components as a convenience\n    const { _a, _b, _c, _d } = this\n    const components =\n      this.space === 'rgb'\n        ? { r: _a, g: _b, b: _c }\n        : this.space === 'xyz'\n          ? { x: _a, y: _b, z: _c }\n          : this.space === 'hsl'\n            ? { h: _a, s: _b, l: _c }\n            : this.space === 'lab'\n              ? { l: _a, a: _b, b: _c }\n              : this.space === 'lch'\n                ? { l: _a, c: _b, h: _c }\n                : this.space === 'cmyk'\n                  ? { c: _a, m: _b, y: _c, k: _d }\n                  : {}\n    Object.assign(this, components)\n  }\n\n  lab() {\n    // Get the xyz color\n    const { x, y, z } = this.xyz()\n\n    // Get the lab components\n    const l = 116 * y - 16\n    const a = 500 * (x - y)\n    const b = 200 * (y - z)\n\n    // Construct and return a new color\n    const color = new Color(l, a, b, 'lab')\n    return color\n  }\n\n  lch() {\n    // Get the lab color directly\n    const { l, a, b } = this.lab()\n\n    // Get the chromaticity and the hue using polar coordinates\n    const c = Math.sqrt(a ** 2 + b ** 2)\n    let h = (180 * Math.atan2(b, a)) / Math.PI\n    if (h < 0) {\n      h *= -1\n      h = 360 - h\n    }\n\n    // Make a new color and return it\n    const color = new Color(l, c, h, 'lch')\n    return color\n  }\n  /*\n  Conversion Methods\n  */\n\n  rgb() {\n    if (this.space === 'rgb') {\n      return this\n    } else if (cieSpace(this.space)) {\n      // Convert to the xyz color space\n      let { x, y, z } = this\n      if (this.space === 'lab' || this.space === 'lch') {\n        // Get the values in the lab space\n        let { l, a, b } = this\n        if (this.space === 'lch') {\n          const { c, h } = this\n          const dToR = Math.PI / 180\n          a = c * Math.cos(dToR * h)\n          b = c * Math.sin(dToR * h)\n        }\n\n        // Undo the nonlinear function\n        const yL = (l + 16) / 116\n        const xL = a / 500 + yL\n        const zL = yL - b / 200\n\n        // Get the xyz values\n        const ct = 16 / 116\n        const mx = 0.008856\n        const nm = 7.787\n        x = 0.95047 * (xL ** 3 > mx ? xL ** 3 : (xL - ct) / nm)\n        y = 1.0 * (yL ** 3 > mx ? yL ** 3 : (yL - ct) / nm)\n        z = 1.08883 * (zL ** 3 > mx ? zL ** 3 : (zL - ct) / nm)\n      }\n\n      // Convert xyz to unbounded rgb values\n      const rU = x * 3.2406 + y * -1.5372 + z * -0.4986\n      const gU = x * -0.9689 + y * 1.8758 + z * 0.0415\n      const bU = x * 0.0557 + y * -0.204 + z * 1.057\n\n      // Convert the values to true rgb values\n      const pow = Math.pow\n      const bd = 0.0031308\n      const r = rU > bd ? 1.055 * pow(rU, 1 / 2.4) - 0.055 : 12.92 * rU\n      const g = gU > bd ? 1.055 * pow(gU, 1 / 2.4) - 0.055 : 12.92 * gU\n      const b = bU > bd ? 1.055 * pow(bU, 1 / 2.4) - 0.055 : 12.92 * bU\n\n      // Make and return the color\n      const color = new Color(255 * r, 255 * g, 255 * b)\n      return color\n    } else if (this.space === 'hsl') {\n      // https://bgrins.github.io/TinyColor/docs/tinycolor.html\n      // Get the current hsl values\n      let { h, s, l } = this\n      h /= 360\n      s /= 100\n      l /= 100\n\n      // If we are grey, then just make the color directly\n      if (s === 0) {\n        l *= 255\n        const color = new Color(l, l, l)\n        return color\n      }\n\n      // TODO I have no idea what this does :D If you figure it out, tell me!\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n      const p = 2 * l - q\n\n      // Get the rgb values\n      const r = 255 * hueToRgb(p, q, h + 1 / 3)\n      const g = 255 * hueToRgb(p, q, h)\n      const b = 255 * hueToRgb(p, q, h - 1 / 3)\n\n      // Make a new color\n      const color = new Color(r, g, b)\n      return color\n    } else if (this.space === 'cmyk') {\n      // https://gist.github.com/felipesabino/5066336\n      // Get the normalised cmyk values\n      const { c, m, y, k } = this\n\n      // Get the rgb values\n      const r = 255 * (1 - Math.min(1, c * (1 - k) + k))\n      const g = 255 * (1 - Math.min(1, m * (1 - k) + k))\n      const b = 255 * (1 - Math.min(1, y * (1 - k) + k))\n\n      // Form the color and return it\n      const color = new Color(r, g, b)\n      return color\n    } else {\n      return this\n    }\n  }\n\n  toArray() {\n    const { _a, _b, _c, _d, space } = this\n    return [_a, _b, _c, _d, space]\n  }\n\n  toHex() {\n    const [r, g, b] = this._clamped().map(componentHex)\n    return `#${r}${g}${b}`\n  }\n\n  toRgb() {\n    const [rV, gV, bV] = this._clamped()\n    const string = `rgb(${rV},${gV},${bV})`\n    return string\n  }\n\n  toString() {\n    return this.toHex()\n  }\n\n  xyz() {\n    // Normalise the red, green and blue values\n    const { _a: r255, _b: g255, _c: b255 } = this.rgb()\n    const [r, g, b] = [r255, g255, b255].map((v) => v / 255)\n\n    // Convert to the lab rgb space\n    const rL = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92\n    const gL = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92\n    const bL = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92\n\n    // Convert to the xyz color space without bounding the values\n    const xU = (rL * 0.4124 + gL * 0.3576 + bL * 0.1805) / 0.95047\n    const yU = (rL * 0.2126 + gL * 0.7152 + bL * 0.0722) / 1.0\n    const zU = (rL * 0.0193 + gL * 0.1192 + bL * 0.9505) / 1.08883\n\n    // Get the proper xyz values by applying the bounding\n    const x = xU > 0.008856 ? Math.pow(xU, 1 / 3) : 7.787 * xU + 16 / 116\n    const y = yU > 0.008856 ? Math.pow(yU, 1 / 3) : 7.787 * yU + 16 / 116\n    const z = zU > 0.008856 ? Math.pow(zU, 1 / 3) : 7.787 * zU + 16 / 116\n\n    // Make and return the color\n    const color = new Color(x, y, z, 'xyz')\n    return color\n  }\n\n  /*\n  Input and Output methods\n  */\n\n  _clamped() {\n    const { _a, _b, _c } = this.rgb()\n    const { max, min, round } = Math\n    const format = (v) => max(0, min(round(v), 255))\n    return [_a, _b, _c].map(format)\n  }\n\n  /*\n  Constructing colors\n  */\n}\n","import Matrix from './Matrix.js'\n\nexport default class Point {\n  // Initialize\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  // Clone point\n  clone() {\n    return new Point(this)\n  }\n\n  init(x, y) {\n    const base = { x: 0, y: 0 }\n\n    // ensure source as object\n    const source = Array.isArray(x)\n      ? { x: x[0], y: x[1] }\n      : typeof x === 'object'\n        ? { x: x.x, y: x.y }\n        : { x: x, y: y }\n\n    // merge source\n    this.x = source.x == null ? base.x : source.x\n    this.y = source.y == null ? base.y : source.y\n\n    return this\n  }\n\n  toArray() {\n    return [this.x, this.y]\n  }\n\n  transform(m) {\n    return this.clone().transformO(m)\n  }\n\n  // Transform point with matrix\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m)\n    }\n\n    const { x, y } = this\n\n    // Perform the matrix multiplication\n    this.x = m.a * x + m.c * y + m.e\n    this.y = m.b * x + m.d * y + m.f\n\n    return this\n  }\n}\n\nexport function point(x, y) {\n  return new Point(x, y).transformO(this.screenCTM().inverseO())\n}\n","import { delimiter } from '../modules/core/regex.js'\nimport { radians } from '../utils/utils.js'\nimport { register } from '../utils/adopter.js'\nimport Element from '../elements/Element.js'\nimport Point from './Point.js'\n\nfunction closeEnough(a, b, threshold) {\n  return Math.abs(b - a) < (threshold || 1e-6)\n}\n\nexport default class Matrix {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  static formatTransforms(o) {\n    // Get all of the parameters required to form the matrix\n    const flipBoth = o.flip === 'both' || o.flip === true\n    const flipX = o.flip && (flipBoth || o.flip === 'x') ? -1 : 1\n    const flipY = o.flip && (flipBoth || o.flip === 'y') ? -1 : 1\n    const skewX =\n      o.skew && o.skew.length\n        ? o.skew[0]\n        : isFinite(o.skew)\n          ? o.skew\n          : isFinite(o.skewX)\n            ? o.skewX\n            : 0\n    const skewY =\n      o.skew && o.skew.length\n        ? o.skew[1]\n        : isFinite(o.skew)\n          ? o.skew\n          : isFinite(o.skewY)\n            ? o.skewY\n            : 0\n    const scaleX =\n      o.scale && o.scale.length\n        ? o.scale[0] * flipX\n        : isFinite(o.scale)\n          ? o.scale * flipX\n          : isFinite(o.scaleX)\n            ? o.scaleX * flipX\n            : flipX\n    const scaleY =\n      o.scale && o.scale.length\n        ? o.scale[1] * flipY\n        : isFinite(o.scale)\n          ? o.scale * flipY\n          : isFinite(o.scaleY)\n            ? o.scaleY * flipY\n            : flipY\n    const shear = o.shear || 0\n    const theta = o.rotate || o.theta || 0\n    const origin = new Point(\n      o.origin || o.around || o.ox || o.originX,\n      o.oy || o.originY\n    )\n    const ox = origin.x\n    const oy = origin.y\n    // We need Point to be invalid if nothing was passed because we cannot default to 0 here. That is why NaN\n    const position = new Point(\n      o.position || o.px || o.positionX || NaN,\n      o.py || o.positionY || NaN\n    )\n    const px = position.x\n    const py = position.y\n    const translate = new Point(\n      o.translate || o.tx || o.translateX,\n      o.ty || o.translateY\n    )\n    const tx = translate.x\n    const ty = translate.y\n    const relative = new Point(\n      o.relative || o.rx || o.relativeX,\n      o.ry || o.relativeY\n    )\n    const rx = relative.x\n    const ry = relative.y\n\n    // Populate all of the values\n    return {\n      scaleX,\n      scaleY,\n      skewX,\n      skewY,\n      shear,\n      theta,\n      rx,\n      ry,\n      tx,\n      ty,\n      ox,\n      oy,\n      px,\n      py\n    }\n  }\n\n  static fromArray(a) {\n    return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\n  }\n\n  static isMatrixLike(o) {\n    return (\n      o.a != null ||\n      o.b != null ||\n      o.c != null ||\n      o.d != null ||\n      o.e != null ||\n      o.f != null\n    )\n  }\n\n  // left matrix, right matrix, target matrix which is overwritten\n  static matrixMultiply(l, r, o) {\n    // Work out the product directly\n    const a = l.a * r.a + l.c * r.b\n    const b = l.b * r.a + l.d * r.b\n    const c = l.a * r.c + l.c * r.d\n    const d = l.b * r.c + l.d * r.d\n    const e = l.e + l.a * r.e + l.c * r.f\n    const f = l.f + l.b * r.e + l.d * r.f\n\n    // make sure to use local variables because l/r and o could be the same\n    o.a = a\n    o.b = b\n    o.c = c\n    o.d = d\n    o.e = e\n    o.f = f\n\n    return o\n  }\n\n  around(cx, cy, matrix) {\n    return this.clone().aroundO(cx, cy, matrix)\n  }\n\n  // Transform around a center point\n  aroundO(cx, cy, matrix) {\n    const dx = cx || 0\n    const dy = cy || 0\n    return this.translateO(-dx, -dy).lmultiplyO(matrix).translateO(dx, dy)\n  }\n\n  // Clones this matrix\n  clone() {\n    return new Matrix(this)\n  }\n\n  // Decomposes this matrix into its affine parameters\n  decompose(cx = 0, cy = 0) {\n    // Get the parameters from the matrix\n    const a = this.a\n    const b = this.b\n    const c = this.c\n    const d = this.d\n    const e = this.e\n    const f = this.f\n\n    // Figure out if the winding direction is clockwise or counterclockwise\n    const determinant = a * d - b * c\n    const ccw = determinant > 0 ? 1 : -1\n\n    // Since we only shear in x, we can use the x basis to get the x scale\n    // and the rotation of the resulting matrix\n    const sx = ccw * Math.sqrt(a * a + b * b)\n    const thetaRad = Math.atan2(ccw * b, ccw * a)\n    const theta = (180 / Math.PI) * thetaRad\n    const ct = Math.cos(thetaRad)\n    const st = Math.sin(thetaRad)\n\n    // We can then solve the y basis vector simultaneously to get the other\n    // two affine parameters directly from these parameters\n    const lam = (a * c + b * d) / determinant\n    const sy = (c * sx) / (lam * a - b) || (d * sx) / (lam * b + a)\n\n    // Use the translations\n    const tx = e - cx + cx * ct * sx + cy * (lam * ct * sx - st * sy)\n    const ty = f - cy + cx * st * sx + cy * (lam * st * sx + ct * sy)\n\n    // Construct the decomposition and return it\n    return {\n      // Return the affine parameters\n      scaleX: sx,\n      scaleY: sy,\n      shear: lam,\n      rotate: theta,\n      translateX: tx,\n      translateY: ty,\n      originX: cx,\n      originY: cy,\n\n      // Return the matrix parameters\n      a: this.a,\n      b: this.b,\n      c: this.c,\n      d: this.d,\n      e: this.e,\n      f: this.f\n    }\n  }\n\n  // Check if two matrices are equal\n  equals(other) {\n    if (other === this) return true\n    const comp = new Matrix(other)\n    return (\n      closeEnough(this.a, comp.a) &&\n      closeEnough(this.b, comp.b) &&\n      closeEnough(this.c, comp.c) &&\n      closeEnough(this.d, comp.d) &&\n      closeEnough(this.e, comp.e) &&\n      closeEnough(this.f, comp.f)\n    )\n  }\n\n  // Flip matrix on x or y, at a given offset\n  flip(axis, around) {\n    return this.clone().flipO(axis, around)\n  }\n\n  flipO(axis, around) {\n    return axis === 'x'\n      ? this.scaleO(-1, 1, around, 0)\n      : axis === 'y'\n        ? this.scaleO(1, -1, 0, around)\n        : this.scaleO(-1, -1, axis, around || axis) // Define an x, y flip point\n  }\n\n  // Initialize\n  init(source) {\n    const base = Matrix.fromArray([1, 0, 0, 1, 0, 0])\n\n    // ensure source as object\n    source =\n      source instanceof Element\n        ? source.matrixify()\n        : typeof source === 'string'\n          ? Matrix.fromArray(source.split(delimiter).map(parseFloat))\n          : Array.isArray(source)\n            ? Matrix.fromArray(source)\n            : typeof source === 'object' && Matrix.isMatrixLike(source)\n              ? source\n              : typeof source === 'object'\n                ? new Matrix().transform(source)\n                : arguments.length === 6\n                  ? Matrix.fromArray([].slice.call(arguments))\n                  : base\n\n    // Merge the source matrix with the base matrix\n    this.a = source.a != null ? source.a : base.a\n    this.b = source.b != null ? source.b : base.b\n    this.c = source.c != null ? source.c : base.c\n    this.d = source.d != null ? source.d : base.d\n    this.e = source.e != null ? source.e : base.e\n    this.f = source.f != null ? source.f : base.f\n\n    return this\n  }\n\n  inverse() {\n    return this.clone().inverseO()\n  }\n\n  // Inverses matrix\n  inverseO() {\n    // Get the current parameters out of the matrix\n    const a = this.a\n    const b = this.b\n    const c = this.c\n    const d = this.d\n    const e = this.e\n    const f = this.f\n\n    // Invert the 2x2 matrix in the top left\n    const det = a * d - b * c\n    if (!det) throw new Error('Cannot invert ' + this)\n\n    // Calculate the top 2x2 matrix\n    const na = d / det\n    const nb = -b / det\n    const nc = -c / det\n    const nd = a / det\n\n    // Apply the inverted matrix to the top right\n    const ne = -(na * e + nc * f)\n    const nf = -(nb * e + nd * f)\n\n    // Construct the inverted matrix\n    this.a = na\n    this.b = nb\n    this.c = nc\n    this.d = nd\n    this.e = ne\n    this.f = nf\n\n    return this\n  }\n\n  lmultiply(matrix) {\n    return this.clone().lmultiplyO(matrix)\n  }\n\n  lmultiplyO(matrix) {\n    const r = this\n    const l = matrix instanceof Matrix ? matrix : new Matrix(matrix)\n\n    return Matrix.matrixMultiply(l, r, this)\n  }\n\n  // Left multiplies by the given matrix\n  multiply(matrix) {\n    return this.clone().multiplyO(matrix)\n  }\n\n  multiplyO(matrix) {\n    // Get the matrices\n    const l = this\n    const r = matrix instanceof Matrix ? matrix : new Matrix(matrix)\n\n    return Matrix.matrixMultiply(l, r, this)\n  }\n\n  // Rotate matrix\n  rotate(r, cx, cy) {\n    return this.clone().rotateO(r, cx, cy)\n  }\n\n  rotateO(r, cx = 0, cy = 0) {\n    // Convert degrees to radians\n    r = radians(r)\n\n    const cos = Math.cos(r)\n    const sin = Math.sin(r)\n\n    const { a, b, c, d, e, f } = this\n\n    this.a = a * cos - b * sin\n    this.b = b * cos + a * sin\n    this.c = c * cos - d * sin\n    this.d = d * cos + c * sin\n    this.e = e * cos - f * sin + cy * sin - cx * cos + cx\n    this.f = f * cos + e * sin - cx * sin - cy * cos + cy\n\n    return this\n  }\n\n  // Scale matrix\n  scale() {\n    return this.clone().scaleO(...arguments)\n  }\n\n  scaleO(x, y = x, cx = 0, cy = 0) {\n    // Support uniform scaling\n    if (arguments.length === 3) {\n      cy = cx\n      cx = y\n      y = x\n    }\n\n    const { a, b, c, d, e, f } = this\n\n    this.a = a * x\n    this.b = b * y\n    this.c = c * x\n    this.d = d * y\n    this.e = e * x - cx * x + cx\n    this.f = f * y - cy * y + cy\n\n    return this\n  }\n\n  // Shear matrix\n  shear(a, cx, cy) {\n    return this.clone().shearO(a, cx, cy)\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shearO(lx, cx = 0, cy = 0) {\n    const { a, b, c, d, e, f } = this\n\n    this.a = a + b * lx\n    this.c = c + d * lx\n    this.e = e + f * lx - cy * lx\n\n    return this\n  }\n\n  // Skew Matrix\n  skew() {\n    return this.clone().skewO(...arguments)\n  }\n\n  skewO(x, y = x, cx = 0, cy = 0) {\n    // support uniformal skew\n    if (arguments.length === 3) {\n      cy = cx\n      cx = y\n      y = x\n    }\n\n    // Convert degrees to radians\n    x = radians(x)\n    y = radians(y)\n\n    const lx = Math.tan(x)\n    const ly = Math.tan(y)\n\n    const { a, b, c, d, e, f } = this\n\n    this.a = a + b * lx\n    this.b = b + a * ly\n    this.c = c + d * lx\n    this.d = d + c * ly\n    this.e = e + f * lx - cy * lx\n    this.f = f + e * ly - cx * ly\n\n    return this\n  }\n\n  // SkewX\n  skewX(x, cx, cy) {\n    return this.skew(x, 0, cx, cy)\n  }\n\n  // SkewY\n  skewY(y, cx, cy) {\n    return this.skew(0, y, cx, cy)\n  }\n\n  toArray() {\n    return [this.a, this.b, this.c, this.d, this.e, this.f]\n  }\n\n  // Convert matrix to string\n  toString() {\n    return (\n      'matrix(' +\n      this.a +\n      ',' +\n      this.b +\n      ',' +\n      this.c +\n      ',' +\n      this.d +\n      ',' +\n      this.e +\n      ',' +\n      this.f +\n      ')'\n    )\n  }\n\n  // Transform a matrix into another matrix by manipulating the space\n  transform(o) {\n    // Check if o is a matrix and then left multiply it directly\n    if (Matrix.isMatrixLike(o)) {\n      const matrix = new Matrix(o)\n      return matrix.multiplyO(this)\n    }\n\n    // Get the proposed transformations and the current transformations\n    const t = Matrix.formatTransforms(o)\n    const current = this\n    const { x: ox, y: oy } = new Point(t.ox, t.oy).transform(current)\n\n    // Construct the resulting matrix\n    const transformer = new Matrix()\n      .translateO(t.rx, t.ry)\n      .lmultiplyO(current)\n      .translateO(-ox, -oy)\n      .scaleO(t.scaleX, t.scaleY)\n      .skewO(t.skewX, t.skewY)\n      .shearO(t.shear)\n      .rotateO(t.theta)\n      .translateO(ox, oy)\n\n    // If we want the origin at a particular place, we force it there\n    if (isFinite(t.px) || isFinite(t.py)) {\n      const origin = new Point(ox, oy).transform(transformer)\n      // TODO: Replace t.px with isFinite(t.px)\n      // Doesn't work because t.px is also 0 if it wasn't passed\n      const dx = isFinite(t.px) ? t.px - origin.x : 0\n      const dy = isFinite(t.py) ? t.py - origin.y : 0\n      transformer.translateO(dx, dy)\n    }\n\n    // Translate now after positioning\n    transformer.translateO(t.tx, t.ty)\n    return transformer\n  }\n\n  // Translate matrix\n  translate(x, y) {\n    return this.clone().translateO(x, y)\n  }\n\n  translateO(x, y) {\n    this.e += x || 0\n    this.f += y || 0\n    return this\n  }\n\n  valueOf() {\n    return {\n      a: this.a,\n      b: this.b,\n      c: this.c,\n      d: this.d,\n      e: this.e,\n      f: this.f\n    }\n  }\n}\n\nexport function ctm() {\n  return new Matrix(this.node.getCTM())\n}\n\nexport function screenCTM() {\n  try {\n    /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\n       This is needed because FF does not return the transformation matrix\n       for the inner coordinate system when getScreenCTM() is called on nested svgs.\n       However all other Browsers do that */\n    if (typeof this.isRoot === 'function' && !this.isRoot()) {\n      const rect = this.rect(1, 1)\n      const m = rect.node.getScreenCTM()\n      rect.remove()\n      return new Matrix(m)\n    }\n    return new Matrix(this.node.getScreenCTM())\n  } catch (e) {\n    console.warn(\n      `Cannot get CTM from SVG node ${this.node.nodeName}. Is the element rendered?`\n    )\n    return new Matrix()\n  }\n}\n\nregister(Matrix, 'Matrix')\n","import { globals } from '../../utils/window.js'\nimport { makeInstance } from '../../utils/adopter.js'\n\nexport default function parser() {\n  // Reuse cached element if possible\n  if (!parser.nodes) {\n    const svg = makeInstance().size(2, 0)\n    svg.node.style.cssText = [\n      'opacity: 0',\n      'position: absolute',\n      'left: -100%',\n      'top: -100%',\n      'overflow: hidden'\n    ].join(';')\n\n    svg.attr('focusable', 'false')\n    svg.attr('aria-hidden', 'true')\n\n    const path = svg.path().node\n\n    parser.nodes = { svg, path }\n  }\n\n  if (!parser.nodes.svg.node.parentNode) {\n    const b = globals.document.body || globals.document.documentElement\n    parser.nodes.svg.addTo(b)\n  }\n\n  return parser.nodes\n}\n","import { delimiter } from '../modules/core/regex.js'\nimport { globals } from '../utils/window.js'\nimport { register } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Matrix from './Matrix.js'\nimport Point from './Point.js'\nimport parser from '../modules/core/parser.js'\n\nexport function isNulledBox(box) {\n  return !box.width && !box.height && !box.x && !box.y\n}\n\nexport function domContains(node) {\n  return (\n    node === globals.document ||\n    (\n      globals.document.documentElement.contains ||\n      function (node) {\n        // This is IE - it does not support contains() for top-level SVGs\n        while (node.parentNode) {\n          node = node.parentNode\n        }\n        return node === globals.document\n      }\n    ).call(globals.document.documentElement, node)\n  )\n}\n\nexport default class Box {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  addOffset() {\n    // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n    this.x += globals.window.pageXOffset\n    this.y += globals.window.pageYOffset\n    return new Box(this)\n  }\n\n  init(source) {\n    const base = [0, 0, 0, 0]\n    source =\n      typeof source === 'string'\n        ? source.split(delimiter).map(parseFloat)\n        : Array.isArray(source)\n          ? source\n          : typeof source === 'object'\n            ? [\n                source.left != null ? source.left : source.x,\n                source.top != null ? source.top : source.y,\n                source.width,\n                source.height\n              ]\n            : arguments.length === 4\n              ? [].slice.call(arguments)\n              : base\n\n    this.x = source[0] || 0\n    this.y = source[1] || 0\n    this.width = this.w = source[2] || 0\n    this.height = this.h = source[3] || 0\n\n    // Add more bounding box properties\n    this.x2 = this.x + this.w\n    this.y2 = this.y + this.h\n    this.cx = this.x + this.w / 2\n    this.cy = this.y + this.h / 2\n\n    return this\n  }\n\n  isNulled() {\n    return isNulledBox(this)\n  }\n\n  // Merge rect box with another, return a new instance\n  merge(box) {\n    const x = Math.min(this.x, box.x)\n    const y = Math.min(this.y, box.y)\n    const width = Math.max(this.x + this.width, box.x + box.width) - x\n    const height = Math.max(this.y + this.height, box.y + box.height) - y\n\n    return new Box(x, y, width, height)\n  }\n\n  toArray() {\n    return [this.x, this.y, this.width, this.height]\n  }\n\n  toString() {\n    return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\n  }\n\n  transform(m) {\n    if (!(m instanceof Matrix)) {\n      m = new Matrix(m)\n    }\n\n    let xMin = Infinity\n    let xMax = -Infinity\n    let yMin = Infinity\n    let yMax = -Infinity\n\n    const pts = [\n      new Point(this.x, this.y),\n      new Point(this.x2, this.y),\n      new Point(this.x, this.y2),\n      new Point(this.x2, this.y2)\n    ]\n\n    pts.forEach(function (p) {\n      p = p.transform(m)\n      xMin = Math.min(xMin, p.x)\n      xMax = Math.max(xMax, p.x)\n      yMin = Math.min(yMin, p.y)\n      yMax = Math.max(yMax, p.y)\n    })\n\n    return new Box(xMin, yMin, xMax - xMin, yMax - yMin)\n  }\n}\n\nfunction getBox(el, getBBoxFn, retry) {\n  let box\n\n  try {\n    // Try to get the box with the provided function\n    box = getBBoxFn(el.node)\n\n    // If the box is worthless and not even in the dom, retry\n    // by throwing an error here...\n    if (isNulledBox(box) && !domContains(el.node)) {\n      throw new Error('Element not in the dom')\n    }\n  } catch (e) {\n    // ... and calling the retry handler here\n    box = retry(el)\n  }\n\n  return box\n}\n\nexport function bbox() {\n  // Function to get bbox is getBBox()\n  const getBBox = (node) => node.getBBox()\n\n  // Take all measures so that a stupid browser renders the element\n  // so we can get the bbox from it when we try again\n  const retry = (el) => {\n    try {\n      const clone = el.clone().addTo(parser().svg).show()\n      const box = clone.node.getBBox()\n      clone.remove()\n      return box\n    } catch (e) {\n      // We give up...\n      throw new Error(\n        `Getting bbox of element \"${\n          el.node.nodeName\n        }\" is not possible: ${e.toString()}`\n      )\n    }\n  }\n\n  const box = getBox(this, getBBox, retry)\n  const bbox = new Box(box)\n\n  return bbox\n}\n\nexport function rbox(el) {\n  const getRBox = (node) => node.getBoundingClientRect()\n  const retry = (el) => {\n    // There is no point in trying tricks here because if we insert the element into the dom ourselves\n    // it obviously will be at the wrong position\n    throw new Error(\n      `Getting rbox of element \"${el.node.nodeName}\" is not possible`\n    )\n  }\n\n  const box = getBox(this, getRBox, retry)\n  const rbox = new Box(box)\n\n  // If an element was passed, we want the bbox in the coordinate system of that element\n  if (el) {\n    return rbox.transform(el.screenCTM().inverseO())\n  }\n\n  // Else we want it in absolute screen coordinates\n  // Therefore we need to add the scrollOffset\n  return rbox.addOffset()\n}\n\n// Checks whether the given point is inside the bounding box\nexport function inside(x, y) {\n  const box = this.bbox()\n\n  return (\n    x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height\n  )\n}\n\nregisterMethods({\n  viewbox: {\n    viewbox(x, y, width, height) {\n      // act as getter\n      if (x == null) return new Box(this.attr('viewBox'))\n\n      // act as setter\n      return this.attr('viewBox', new Box(x, y, width, height))\n    },\n\n    zoom(level, point) {\n      // Its best to rely on the attributes here and here is why:\n      // clientXYZ: Doesn't work on non-root svgs because they dont have a CSSBox (silly!)\n      // getBoundingClientRect: Doesn't work because Chrome just ignores width and height of nested svgs completely\n      //                        that means, their clientRect is always as big as the content.\n      //                        Furthermore this size is incorrect if the element is further transformed by its parents\n      // computedStyle: Only returns meaningful values if css was used with px. We dont go this route here!\n      // getBBox: returns the bounding box of its content - that doesn't help!\n      let { width, height } = this.attr(['width', 'height'])\n\n      // Width and height is a string when a number with a unit is present which we can't use\n      // So we try clientXYZ\n      if (\n        (!width && !height) ||\n        typeof width === 'string' ||\n        typeof height === 'string'\n      ) {\n        width = this.node.clientWidth\n        height = this.node.clientHeight\n      }\n\n      // Giving up...\n      if (!width || !height) {\n        throw new Error(\n          'Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element'\n        )\n      }\n\n      const v = this.viewbox()\n\n      const zoomX = width / v.width\n      const zoomY = height / v.height\n      const zoom = Math.min(zoomX, zoomY)\n\n      if (level == null) {\n        return zoom\n      }\n\n      let zoomAmount = zoom / level\n\n      // Set the zoomAmount to the highest value which is safe to process and recover from\n      // The * 100 is a bit of wiggle room for the matrix transformation\n      if (zoomAmount === Infinity) zoomAmount = Number.MAX_SAFE_INTEGER / 100\n\n      point =\n        point || new Point(width / 2 / zoomX + v.x, height / 2 / zoomY + v.y)\n\n      const box = new Box(v).transform(\n        new Matrix({ scale: zoomAmount, origin: point })\n      )\n\n      return this.viewbox(box)\n    }\n  }\n})\n\nregister(Box, 'Box')\n","import { extend } from '../utils/adopter.js'\n// import { subClassArray } from './ArrayPolyfill.js'\n\nclass List extends Array {\n  constructor(arr = [], ...args) {\n    super(arr, ...args)\n    if (typeof arr === 'number') return this\n    this.length = 0\n    this.push(...arr)\n  }\n}\n\n/* = subClassArray('List', Array, function (arr = []) {\n  // This catches the case, that native map tries to create an array with new Array(1)\n  if (typeof arr === 'number') return this\n  this.length = 0\n  this.push(...arr)\n}) */\n\nexport default List\n\nextend([List], {\n  each(fnOrMethodName, ...args) {\n    if (typeof fnOrMethodName === 'function') {\n      return this.map((el, i, arr) => {\n        return fnOrMethodName.call(el, el, i, arr)\n      })\n    } else {\n      return this.map((el) => {\n        return el[fnOrMethodName](...args)\n      })\n    }\n  },\n\n  toArray() {\n    return Array.prototype.concat.apply([], this)\n  }\n})\n\nconst reserved = ['toArray', 'constructor', 'each']\n\nList.extend = function (methods) {\n  methods = methods.reduce((obj, name) => {\n    // Don't overwrite own methods\n    if (reserved.includes(name)) return obj\n\n    // Don't add private methods\n    if (name[0] === '_') return obj\n\n    // Allow access to original Array methods through a prefix\n    if (name in Array.prototype) {\n      obj['$' + name] = Array.prototype[name]\n    }\n\n    // Relay every call to each()\n    obj[name] = function (...attrs) {\n      return this.each(name, ...attrs)\n    }\n    return obj\n  }, {})\n\n  extend([List], methods)\n}\n","import { adopt } from '../../utils/adopter.js'\nimport { globals } from '../../utils/window.js'\nimport { map } from '../../utils/utils.js'\nimport List from '../../types/List.js'\n\nexport default function baseFind(query, parent) {\n  return new List(\n    map((parent || globals.document).querySelectorAll(query), function (node) {\n      return adopt(node)\n    })\n  )\n}\n\n// Scoped find method\nexport function find(query) {\n  return baseFind(query, this.node)\n}\n\nexport function findOne(query) {\n  return adopt(this.node.querySelector(query))\n}\n","import { delimiter } from './regex.js'\nimport { makeInstance } from '../../utils/adopter.js'\nimport { globals } from '../../utils/window.js'\n\nlet listenerId = 0\nexport const windowEvents = {}\n\nexport function getEvents(instance) {\n  let n = instance.getEventHolder()\n\n  // We dont want to save events in global space\n  if (n === globals.window) n = windowEvents\n  if (!n.events) n.events = {}\n  return n.events\n}\n\nexport function getEventTarget(instance) {\n  return instance.getEventTarget()\n}\n\nexport function clearEvents(instance) {\n  let n = instance.getEventHolder()\n  if (n === globals.window) n = windowEvents\n  if (n.events) n.events = {}\n}\n\n// Add event binder in the SVG namespace\nexport function on(node, events, listener, binding, options) {\n  const l = listener.bind(binding || node)\n  const instance = makeInstance(node)\n  const bag = getEvents(instance)\n  const n = getEventTarget(instance)\n\n  // events can be an array of events or a string of events\n  events = Array.isArray(events) ? events : events.split(delimiter)\n\n  // add id to listener\n  if (!listener._svgjsListenerId) {\n    listener._svgjsListenerId = ++listenerId\n  }\n\n  events.forEach(function (event) {\n    const ev = event.split('.')[0]\n    const ns = event.split('.')[1] || '*'\n\n    // ensure valid object\n    bag[ev] = bag[ev] || {}\n    bag[ev][ns] = bag[ev][ns] || {}\n\n    // reference listener\n    bag[ev][ns][listener._svgjsListenerId] = l\n\n    // add listener\n    n.addEventListener(ev, l, options || false)\n  })\n}\n\n// Add event unbinder in the SVG namespace\nexport function off(node, events, listener, options) {\n  const instance = makeInstance(node)\n  const bag = getEvents(instance)\n  const n = getEventTarget(instance)\n\n  // listener can be a function or a number\n  if (typeof listener === 'function') {\n    listener = listener._svgjsListenerId\n    if (!listener) return\n  }\n\n  // events can be an array of events or a string or undefined\n  events = Array.isArray(events) ? events : (events || '').split(delimiter)\n\n  events.forEach(function (event) {\n    const ev = event && event.split('.')[0]\n    const ns = event && event.split('.')[1]\n    let namespace, l\n\n    if (listener) {\n      // remove listener reference\n      if (bag[ev] && bag[ev][ns || '*']) {\n        // removeListener\n        n.removeEventListener(\n          ev,\n          bag[ev][ns || '*'][listener],\n          options || false\n        )\n\n        delete bag[ev][ns || '*'][listener]\n      }\n    } else if (ev && ns) {\n      // remove all listeners for a namespaced event\n      if (bag[ev] && bag[ev][ns]) {\n        for (l in bag[ev][ns]) {\n          off(n, [ev, ns].join('.'), l)\n        }\n\n        delete bag[ev][ns]\n      }\n    } else if (ns) {\n      // remove all listeners for a specific namespace\n      for (event in bag) {\n        for (namespace in bag[event]) {\n          if (ns === namespace) {\n            off(n, [event, ns].join('.'))\n          }\n        }\n      }\n    } else if (ev) {\n      // remove all listeners for the event\n      if (bag[ev]) {\n        for (namespace in bag[ev]) {\n          off(n, [ev, namespace].join('.'))\n        }\n\n        delete bag[ev]\n      }\n    } else {\n      // remove all listeners on a given node\n      for (event in bag) {\n        off(n, event)\n      }\n\n      clearEvents(instance)\n    }\n  })\n}\n\nexport function dispatch(node, event, data, options) {\n  const n = getEventTarget(node)\n\n  // Dispatch event\n  if (event instanceof globals.window.Event) {\n    n.dispatchEvent(event)\n  } else {\n    event = new globals.window.CustomEvent(event, {\n      detail: data,\n      cancelable: true,\n      ...options\n    })\n    n.dispatchEvent(event)\n  }\n  return event\n}\n","import { dispatch, off, on } from '../modules/core/event.js'\nimport { register } from '../utils/adopter.js'\nimport Base from './Base.js'\n\nexport default class EventTarget extends Base {\n  addEventListener() {}\n\n  dispatch(event, data, options) {\n    return dispatch(this, event, data, options)\n  }\n\n  dispatchEvent(event) {\n    const bag = this.getEventHolder().events\n    if (!bag) return true\n\n    const events = bag[event.type]\n\n    for (const i in events) {\n      for (const j in events[i]) {\n        events[i][j](event)\n      }\n    }\n\n    return !event.defaultPrevented\n  }\n\n  // Fire given event\n  fire(event, data, options) {\n    this.dispatch(event, data, options)\n    return this\n  }\n\n  getEventHolder() {\n    return this\n  }\n\n  getEventTarget() {\n    return this\n  }\n\n  // Unbind event from listener\n  off(event, listener, options) {\n    off(this, event, listener, options)\n    return this\n  }\n\n  // Bind given event to listener\n  on(event, listener, binding, options) {\n    on(this, event, listener, binding, options)\n    return this\n  }\n\n  removeEventListener() {}\n}\n\nregister(EventTarget, 'EventTarget')\n","export function noop() {}\n\n// Default animation values\nexport const timeline = {\n  duration: 400,\n  ease: '>',\n  delay: 0\n}\n\n// Default attribute values\nexport const attrs = {\n  // fill and stroke\n  'fill-opacity': 1,\n  'stroke-opacity': 1,\n  'stroke-width': 0,\n  'stroke-linejoin': 'miter',\n  'stroke-linecap': 'butt',\n  fill: '#000000',\n  stroke: '#000000',\n  opacity: 1,\n\n  // position\n  x: 0,\n  y: 0,\n  cx: 0,\n  cy: 0,\n\n  // size\n  width: 0,\n  height: 0,\n\n  // radius\n  r: 0,\n  rx: 0,\n  ry: 0,\n\n  // gradient\n  offset: 0,\n  'stop-opacity': 1,\n  'stop-color': '#000000',\n\n  // text\n  'text-anchor': 'start'\n}\n","import { delimiter } from '../modules/core/regex.js'\n\nexport default class SVGArray extends Array {\n  constructor(...args) {\n    super(...args)\n    this.init(...args)\n  }\n\n  clone() {\n    return new this.constructor(this)\n  }\n\n  init(arr) {\n    // This catches the case, that native map tries to create an array with new Array(1)\n    if (typeof arr === 'number') return this\n    this.length = 0\n    this.push(...this.parse(arr))\n    return this\n  }\n\n  // Parse whitespace separated string\n  parse(array = []) {\n    // If already is an array, no need to parse it\n    if (array instanceof Array) return array\n\n    return array.trim().split(delimiter).map(parseFloat)\n  }\n\n  toArray() {\n    return Array.prototype.concat.apply([], this)\n  }\n\n  toSet() {\n    return new Set(this)\n  }\n\n  toString() {\n    return this.join(' ')\n  }\n\n  // Flattens the array if needed\n  valueOf() {\n    const ret = []\n    ret.push(...this)\n    return ret\n  }\n}\n","import { numberAndUnit } from '../modules/core/regex.js'\n\n// Module for unit conversions\nexport default class SVGNumber {\n  // Initialize\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  convert(unit) {\n    return new SVGNumber(this.value, unit)\n  }\n\n  // Divide number\n  divide(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this / number, this.unit || number.unit)\n  }\n\n  init(value, unit) {\n    unit = Array.isArray(value) ? value[1] : unit\n    value = Array.isArray(value) ? value[0] : value\n\n    // initialize defaults\n    this.value = 0\n    this.unit = unit || ''\n\n    // parse value\n    if (typeof value === 'number') {\n      // ensure a valid numeric value\n      this.value = isNaN(value)\n        ? 0\n        : !isFinite(value)\n          ? value < 0\n            ? -3.4e38\n            : +3.4e38\n          : value\n    } else if (typeof value === 'string') {\n      unit = value.match(numberAndUnit)\n\n      if (unit) {\n        // make value numeric\n        this.value = parseFloat(unit[1])\n\n        // normalize\n        if (unit[5] === '%') {\n          this.value /= 100\n        } else if (unit[5] === 's') {\n          this.value *= 1000\n        }\n\n        // store unit\n        this.unit = unit[5]\n      }\n    } else {\n      if (value instanceof SVGNumber) {\n        this.value = value.valueOf()\n        this.unit = value.unit\n      }\n    }\n\n    return this\n  }\n\n  // Subtract number\n  minus(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this - number, this.unit || number.unit)\n  }\n\n  // Add number\n  plus(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this + number, this.unit || number.unit)\n  }\n\n  // Multiply number\n  times(number) {\n    number = new SVGNumber(number)\n    return new SVGNumber(this * number, this.unit || number.unit)\n  }\n\n  toArray() {\n    return [this.value, this.unit]\n  }\n\n  toJSON() {\n    return this.toString()\n  }\n\n  toString() {\n    return (\n      (this.unit === '%'\n        ? ~~(this.value * 1e8) / 1e6\n        : this.unit === 's'\n          ? this.value / 1e3\n          : this.value) + this.unit\n    )\n  }\n\n  valueOf() {\n    return this.value\n  }\n}\n","import { attrs as defaults } from './defaults.js'\nimport { isNumber } from './regex.js'\nimport Color from '../../types/Color.js'\nimport SVGArray from '../../types/SVGArray.js'\nimport SVGNumber from '../../types/SVGNumber.js'\n\nconst colorAttributes = new Set([\n  'fill',\n  'stroke',\n  'color',\n  'bgcolor',\n  'stop-color',\n  'flood-color',\n  'lighting-color'\n])\n\nconst hooks = []\nexport function registerAttrHook(fn) {\n  hooks.push(fn)\n}\n\n// Set svg element attribute\nexport default function attr(attr, val, ns) {\n  // act as full getter\n  if (attr == null) {\n    // get an object of attributes\n    attr = {}\n    val = this.node.attributes\n\n    for (const node of val) {\n      attr[node.nodeName] = isNumber.test(node.nodeValue)\n        ? parseFloat(node.nodeValue)\n        : node.nodeValue\n    }\n\n    return attr\n  } else if (attr instanceof Array) {\n    // loop through array and get all values\n    return attr.reduce((last, curr) => {\n      last[curr] = this.attr(curr)\n      return last\n    }, {})\n  } else if (typeof attr === 'object' && attr.constructor === Object) {\n    // apply every attribute individually if an object is passed\n    for (val in attr) this.attr(val, attr[val])\n  } else if (val === null) {\n    // remove value\n    this.node.removeAttribute(attr)\n  } else if (val == null) {\n    // act as a getter if the first and only argument is not an object\n    val = this.node.getAttribute(attr)\n    return val == null\n      ? defaults[attr]\n      : isNumber.test(val)\n        ? parseFloat(val)\n        : val\n  } else {\n    // Loop through hooks and execute them to convert value\n    val = hooks.reduce((_val, hook) => {\n      return hook(attr, _val, this)\n    }, val)\n\n    // ensure correct numeric values (also accepts NaN and Infinity)\n    if (typeof val === 'number') {\n      val = new SVGNumber(val)\n    } else if (colorAttributes.has(attr) && Color.isColor(val)) {\n      // ensure full hex color\n      val = new Color(val)\n    } else if (val.constructor === Array) {\n      // Check for plain arrays and parse array values\n      val = new SVGArray(val)\n    }\n\n    // if the passed attribute is leading...\n    if (attr === 'leading') {\n      // ... call the leading method instead\n      if (this.leading) {\n        this.leading(val)\n      }\n    } else {\n      // set given attribute on node\n      typeof ns === 'string'\n        ? this.node.setAttributeNS(ns, attr, val.toString())\n        : this.node.setAttribute(attr, val.toString())\n    }\n\n    // rebuild if required\n    if (this.rebuild && (attr === 'font-size' || attr === 'x')) {\n      this.rebuild()\n    }\n  }\n\n  return this\n}\n","import {\n  adopt,\n  assignNewId,\n  eid,\n  extend,\n  makeInstance,\n  create,\n  register\n} from '../utils/adopter.js'\nimport { find, findOne } from '../modules/core/selector.js'\nimport { globals } from '../utils/window.js'\nimport { map } from '../utils/utils.js'\nimport { svg, html } from '../modules/core/namespaces.js'\nimport EventTarget from '../types/EventTarget.js'\nimport List from '../types/List.js'\nimport attr from '../modules/core/attr.js'\n\nexport default class Dom extends EventTarget {\n  constructor(node, attrs) {\n    super()\n    this.node = node\n    this.type = node.nodeName\n\n    if (attrs && node !== attrs) {\n      this.attr(attrs)\n    }\n  }\n\n  // Add given element at a position\n  add(element, i) {\n    element = makeInstance(element)\n\n    // If non-root svg nodes are added we have to remove their namespaces\n    if (\n      element.removeNamespace &&\n      this.node instanceof globals.window.SVGElement\n    ) {\n      element.removeNamespace()\n    }\n\n    if (i == null) {\n      this.node.appendChild(element.node)\n    } else if (element.node !== this.node.childNodes[i]) {\n      this.node.insertBefore(element.node, this.node.childNodes[i])\n    }\n\n    return this\n  }\n\n  // Add element to given container and return self\n  addTo(parent, i) {\n    return makeInstance(parent).put(this, i)\n  }\n\n  // Returns all child elements\n  children() {\n    return new List(\n      map(this.node.children, function (node) {\n        return adopt(node)\n      })\n    )\n  }\n\n  // Remove all elements in this container\n  clear() {\n    // remove children\n    while (this.node.hasChildNodes()) {\n      this.node.removeChild(this.node.lastChild)\n    }\n\n    return this\n  }\n\n  // Clone element\n  clone(deep = true, assignNewIds = true) {\n    // write dom data to the dom so the clone can pickup the data\n    this.writeDataToDom()\n\n    // clone element\n    let nodeClone = this.node.cloneNode(deep)\n    if (assignNewIds) {\n      // assign new id\n      nodeClone = assignNewId(nodeClone)\n    }\n    return new this.constructor(nodeClone)\n  }\n\n  // Iterates over all children and invokes a given block\n  each(block, deep) {\n    const children = this.children()\n    let i, il\n\n    for (i = 0, il = children.length; i < il; i++) {\n      block.apply(children[i], [i, children])\n\n      if (deep) {\n        children[i].each(block, deep)\n      }\n    }\n\n    return this\n  }\n\n  element(nodeName, attrs) {\n    return this.put(new Dom(create(nodeName), attrs))\n  }\n\n  // Get first child\n  first() {\n    return adopt(this.node.firstChild)\n  }\n\n  // Get a element at the given index\n  get(i) {\n    return adopt(this.node.childNodes[i])\n  }\n\n  getEventHolder() {\n    return this.node\n  }\n\n  getEventTarget() {\n    return this.node\n  }\n\n  // Checks if the given element is a child\n  has(element) {\n    return this.index(element) >= 0\n  }\n\n  html(htmlOrFn, outerHTML) {\n    return this.xml(htmlOrFn, outerHTML, html)\n  }\n\n  // Get / set id\n  id(id) {\n    // generate new id if no id set\n    if (typeof id === 'undefined' && !this.node.id) {\n      this.node.id = eid(this.type)\n    }\n\n    // don't set directly with this.node.id to make `null` work correctly\n    return this.attr('id', id)\n  }\n\n  // Gets index of given element\n  index(element) {\n    return [].slice.call(this.node.childNodes).indexOf(element.node)\n  }\n\n  // Get the last child\n  last() {\n    return adopt(this.node.lastChild)\n  }\n\n  // matches the element vs a css selector\n  matches(selector) {\n    const el = this.node\n    const matcher =\n      el.matches ||\n      el.matchesSelector ||\n      el.msMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.webkitMatchesSelector ||\n      el.oMatchesSelector ||\n      null\n    return matcher && matcher.call(el, selector)\n  }\n\n  // Returns the parent element instance\n  parent(type) {\n    let parent = this\n\n    // check for parent\n    if (!parent.node.parentNode) return null\n\n    // get parent element\n    parent = adopt(parent.node.parentNode)\n\n    if (!type) return parent\n\n    // loop through ancestors if type is given\n    do {\n      if (\n        typeof type === 'string' ? parent.matches(type) : parent instanceof type\n      )\n        return parent\n    } while ((parent = adopt(parent.node.parentNode)))\n\n    return parent\n  }\n\n  // Basically does the same as `add()` but returns the added element instead\n  put(element, i) {\n    element = makeInstance(element)\n    this.add(element, i)\n    return element\n  }\n\n  // Add element to given container and return container\n  putIn(parent, i) {\n    return makeInstance(parent).add(this, i)\n  }\n\n  // Remove element\n  remove() {\n    if (this.parent()) {\n      this.parent().removeElement(this)\n    }\n\n    return this\n  }\n\n  // Remove a given child\n  removeElement(element) {\n    this.node.removeChild(element.node)\n\n    return this\n  }\n\n  // Replace this with element\n  replace(element) {\n    element = makeInstance(element)\n\n    if (this.node.parentNode) {\n      this.node.parentNode.replaceChild(element.node, this.node)\n    }\n\n    return element\n  }\n\n  round(precision = 2, map = null) {\n    const factor = 10 ** precision\n    const attrs = this.attr(map)\n\n    for (const i in attrs) {\n      if (typeof attrs[i] === 'number') {\n        attrs[i] = Math.round(attrs[i] * factor) / factor\n      }\n    }\n\n    this.attr(attrs)\n    return this\n  }\n\n  // Import / Export raw svg\n  svg(svgOrFn, outerSVG) {\n    return this.xml(svgOrFn, outerSVG, svg)\n  }\n\n  // Return id on string conversion\n  toString() {\n    return this.id()\n  }\n\n  words(text) {\n    // This is faster than removing all children and adding a new one\n    this.node.textContent = text\n    return this\n  }\n\n  wrap(node) {\n    const parent = this.parent()\n\n    if (!parent) {\n      return this.addTo(node)\n    }\n\n    const position = parent.index(this)\n    return parent.put(node, position).put(this)\n  }\n\n  // write svgjs data to the dom\n  writeDataToDom() {\n    // dump variables recursively\n    this.each(function () {\n      this.writeDataToDom()\n    })\n\n    return this\n  }\n\n  // Import / Export raw svg\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML\n      outerXML = xmlOrFn\n      xmlOrFn = null\n    }\n\n    // act as getter if no svg string is given\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      // The default for exports is, that the outerNode is included\n      outerXML = outerXML == null ? true : outerXML\n\n      // write svgjs data to the dom\n      this.writeDataToDom()\n      let current = this\n\n      // An export modifier was passed\n      if (xmlOrFn != null) {\n        current = adopt(current.node.cloneNode(true))\n\n        // If the user wants outerHTML we need to process this node, too\n        if (outerXML) {\n          const result = xmlOrFn(current)\n          current = result || current\n\n          // The user does not want this node? Well, then he gets nothing\n          if (result === false) return ''\n        }\n\n        // Deep loop through all children and apply modifier\n        current.each(function () {\n          const result = xmlOrFn(this)\n          const _this = result || this\n\n          // If modifier returns false, discard node\n          if (result === false) {\n            this.remove()\n\n            // If modifier returns new node, use it\n          } else if (result && this !== _this) {\n            this.replace(_this)\n          }\n        }, true)\n      }\n\n      // Return outer or inner content\n      return outerXML ? current.node.outerHTML : current.node.innerHTML\n    }\n\n    // Act as setter if we got a string\n\n    // The default for import is, that the current node is not replaced\n    outerXML = outerXML == null ? false : outerXML\n\n    // Create temporary holder\n    const well = create('wrapper', ns)\n    const fragment = globals.document.createDocumentFragment()\n\n    // Dump raw svg\n    well.innerHTML = xmlOrFn\n\n    // Transplant nodes into the fragment\n    for (let len = well.children.length; len--; ) {\n      fragment.appendChild(well.firstElementChild)\n    }\n\n    const parent = this.parent()\n\n    // Add the whole fragment at once\n    return outerXML ? this.replace(fragment) && parent : this.add(fragment)\n  }\n}\n\nextend(Dom, { attr, find, findOne })\nregister(Dom, 'Dom')\n","import { bbox, rbox, inside } from '../types/Box.js'\nimport { ctm, screenCTM } from '../types/Matrix.js'\nimport {\n  extend,\n  getClass,\n  makeInstance,\n  register,\n  root\n} from '../utils/adopter.js'\nimport { globals } from '../utils/window.js'\nimport { point } from '../types/Point.js'\nimport { proportionalSize, writeDataToDom } from '../utils/utils.js'\nimport { reference } from '../modules/core/regex.js'\nimport Dom from './Dom.js'\nimport List from '../types/List.js'\nimport SVGNumber from '../types/SVGNumber.js'\n\nexport default class Element extends Dom {\n  constructor(node, attrs) {\n    super(node, attrs)\n\n    // initialize data object\n    this.dom = {}\n\n    // create circular reference\n    this.node.instance = this\n\n    if (node.hasAttribute('data-svgjs') || node.hasAttribute('svgjs:data')) {\n      // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n      this.setData(\n        JSON.parse(node.getAttribute('data-svgjs')) ??\n          JSON.parse(node.getAttribute('svgjs:data')) ??\n          {}\n      )\n    }\n  }\n\n  // Move element by its center\n  center(x, y) {\n    return this.cx(x).cy(y)\n  }\n\n  // Move by center over x-axis\n  cx(x) {\n    return x == null\n      ? this.x() + this.width() / 2\n      : this.x(x - this.width() / 2)\n  }\n\n  // Move by center over y-axis\n  cy(y) {\n    return y == null\n      ? this.y() + this.height() / 2\n      : this.y(y - this.height() / 2)\n  }\n\n  // Get defs\n  defs() {\n    const root = this.root()\n    return root && root.defs()\n  }\n\n  // Relative move over x and y axes\n  dmove(x, y) {\n    return this.dx(x).dy(y)\n  }\n\n  // Relative move over x axis\n  dx(x = 0) {\n    return this.x(new SVGNumber(x).plus(this.x()))\n  }\n\n  // Relative move over y axis\n  dy(y = 0) {\n    return this.y(new SVGNumber(y).plus(this.y()))\n  }\n\n  getEventHolder() {\n    return this\n  }\n\n  // Set height of element\n  height(height) {\n    return this.attr('height', height)\n  }\n\n  // Move element to given x and y values\n  move(x, y) {\n    return this.x(x).y(y)\n  }\n\n  // return array of all ancestors of given type up to the root svg\n  parents(until = this.root()) {\n    const isSelector = typeof until === 'string'\n    if (!isSelector) {\n      until = makeInstance(until)\n    }\n    const parents = new List()\n    let parent = this\n\n    while (\n      (parent = parent.parent()) &&\n      parent.node !== globals.document &&\n      parent.nodeName !== '#document-fragment'\n    ) {\n      parents.push(parent)\n\n      if (!isSelector && parent.node === until.node) {\n        break\n      }\n      if (isSelector && parent.matches(until)) {\n        break\n      }\n      if (parent.node === this.root().node) {\n        // We worked our way to the root and didn't match `until`\n        return null\n      }\n    }\n\n    return parents\n  }\n\n  // Get referenced element form attribute value\n  reference(attr) {\n    attr = this.attr(attr)\n    if (!attr) return null\n\n    const m = (attr + '').match(reference)\n    return m ? makeInstance(m[1]) : null\n  }\n\n  // Get parent document\n  root() {\n    const p = this.parent(getClass(root))\n    return p && p.root()\n  }\n\n  // set given data to the elements data property\n  setData(o) {\n    this.dom = o\n    return this\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n\n    return this.width(new SVGNumber(p.width)).height(new SVGNumber(p.height))\n  }\n\n  // Set width of element\n  width(width) {\n    return this.attr('width', width)\n  }\n\n  // write svgjs data to the dom\n  writeDataToDom() {\n    writeDataToDom(this, this.dom)\n    return super.writeDataToDom()\n  }\n\n  // Move over x-axis\n  x(x) {\n    return this.attr('x', x)\n  }\n\n  // Move over y-axis\n  y(y) {\n    return this.attr('y', y)\n  }\n}\n\nextend(Element, {\n  bbox,\n  rbox,\n  inside,\n  point,\n  ctm,\n  screenCTM\n})\n\nregister(Element, 'Element')\n","import { registerMethods } from '../../utils/methods.js'\nimport Color from '../../types/Color.js'\nimport Element from '../../elements/Element.js'\nimport Matrix from '../../types/Matrix.js'\nimport Point from '../../types/Point.js'\nimport SVGNumber from '../../types/SVGNumber.js'\n\n// Define list of available attributes for stroke and fill\nconst sugar = {\n  stroke: [\n    'color',\n    'width',\n    'opacity',\n    'linecap',\n    'linejoin',\n    'miterlimit',\n    'dasharray',\n    'dashoffset'\n  ],\n  fill: ['color', 'opacity', 'rule'],\n  prefix: function (t, a) {\n    return a === 'color' ? t : t + '-' + a\n  }\n}\n\n// Add sugar for fill and stroke\n;['fill', 'stroke'].forEach(function (m) {\n  const extension = {}\n  let i\n\n  extension[m] = function (o) {\n    if (typeof o === 'undefined') {\n      return this.attr(m)\n    }\n    if (\n      typeof o === 'string' ||\n      o instanceof Color ||\n      Color.isRgb(o) ||\n      o instanceof Element\n    ) {\n      this.attr(m, o)\n    } else {\n      // set all attributes from sugar.fill and sugar.stroke list\n      for (i = sugar[m].length - 1; i >= 0; i--) {\n        if (o[sugar[m][i]] != null) {\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\n        }\n      }\n    }\n\n    return this\n  }\n\n  registerMethods(['Element', 'Runner'], extension)\n})\n\nregisterMethods(['Element', 'Runner'], {\n  // Let the user set the matrix directly\n  matrix: function (mat, b, c, d, e, f) {\n    // Act as a getter\n    if (mat == null) {\n      return new Matrix(this)\n    }\n\n    // Act as a setter, the user can pass a matrix or a set of numbers\n    return this.attr('transform', new Matrix(mat, b, c, d, e, f))\n  },\n\n  // Map rotation to transform\n  rotate: function (angle, cx, cy) {\n    return this.transform({ rotate: angle, ox: cx, oy: cy }, true)\n  },\n\n  // Map skew to transform\n  skew: function (x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3\n      ? this.transform({ skew: x, ox: y, oy: cx }, true)\n      : this.transform({ skew: [x, y], ox: cx, oy: cy }, true)\n  },\n\n  shear: function (lam, cx, cy) {\n    return this.transform({ shear: lam, ox: cx, oy: cy }, true)\n  },\n\n  // Map scale to transform\n  scale: function (x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3\n      ? this.transform({ scale: x, ox: y, oy: cx }, true)\n      : this.transform({ scale: [x, y], ox: cx, oy: cy }, true)\n  },\n\n  // Map translate to transform\n  translate: function (x, y) {\n    return this.transform({ translate: [x, y] }, true)\n  },\n\n  // Map relative translations to transform\n  relative: function (x, y) {\n    return this.transform({ relative: [x, y] }, true)\n  },\n\n  // Map flip to transform\n  flip: function (direction = 'both', origin = 'center') {\n    if ('xybothtrue'.indexOf(direction) === -1) {\n      origin = direction\n      direction = 'both'\n    }\n\n    return this.transform({ flip: direction, origin: origin }, true)\n  },\n\n  // Opacity\n  opacity: function (value) {\n    return this.attr('opacity', value)\n  }\n})\n\nregisterMethods('radius', {\n  // Add x and y radius\n  radius: function (x, y = x) {\n    const type = (this._element || this).type\n    return type === 'radialGradient'\n      ? this.attr('r', new SVGNumber(x))\n      : this.rx(x).ry(y)\n  }\n})\n\nregisterMethods('Path', {\n  // Get path length\n  length: function () {\n    return this.node.getTotalLength()\n  },\n  // Get point at length\n  pointAt: function (length) {\n    return new Point(this.node.getPointAtLength(length))\n  }\n})\n\nregisterMethods(['Element', 'Runner'], {\n  // Set font\n  font: function (a, v) {\n    if (typeof a === 'object') {\n      for (v in a) this.font(v, a[v])\n      return this\n    }\n\n    return a === 'leading'\n      ? this.leading(v)\n      : a === 'anchor'\n        ? this.attr('text-anchor', v)\n        : a === 'size' ||\n            a === 'family' ||\n            a === 'weight' ||\n            a === 'stretch' ||\n            a === 'variant' ||\n            a === 'style'\n          ? this.attr('font-' + a, v)\n          : this.attr(a, v)\n  }\n})\n\n// Add events to elements\nconst methods = [\n  'click',\n  'dblclick',\n  'mousedown',\n  'mouseup',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'mouseenter',\n  'mouseleave',\n  'touchstart',\n  'touchmove',\n  'touchleave',\n  'touchend',\n  'touchcancel',\n  'contextmenu',\n  'wheel',\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n  'pointerleave',\n  'pointercancel'\n].reduce(function (last, event) {\n  // add event to Element\n  const fn = function (f) {\n    if (f === null) {\n      this.off(event)\n    } else {\n      this.on(event, f)\n    }\n    return this\n  }\n\n  last[event] = fn\n  return last\n}, {})\n\nregisterMethods('Element', methods)\n","import { getOrigin, isDescriptive } from '../../utils/utils.js'\nimport { delimiter, transforms } from '../core/regex.js'\nimport { registerMethods } from '../../utils/methods.js'\nimport Matrix from '../../types/Matrix.js'\n\n// Reset all transformations\nexport function untransform() {\n  return this.attr('transform', null)\n}\n\n// merge the whole transformation chain into one matrix and returns it\nexport function matrixify() {\n  const matrix = (this.attr('transform') || '')\n    // split transformations\n    .split(transforms)\n    .slice(0, -1)\n    .map(function (str) {\n      // generate key => value pairs\n      const kv = str.trim().split('(')\n      return [\n        kv[0],\n        kv[1].split(delimiter).map(function (str) {\n          return parseFloat(str)\n        })\n      ]\n    })\n    .reverse()\n    // merge every transformation into one matrix\n    .reduce(function (matrix, transform) {\n      if (transform[0] === 'matrix') {\n        return matrix.lmultiply(Matrix.fromArray(transform[1]))\n      }\n      return matrix[transform[0]].apply(matrix, transform[1])\n    }, new Matrix())\n\n  return matrix\n}\n\n// add an element to another parent without changing the visual representation on the screen\nexport function toParent(parent, i) {\n  if (this === parent) return this\n\n  if (isDescriptive(this.node)) return this.addTo(parent, i)\n\n  const ctm = this.screenCTM()\n  const pCtm = parent.screenCTM().inverse()\n\n  this.addTo(parent, i).untransform().transform(pCtm.multiply(ctm))\n\n  return this\n}\n\n// same as above with parent equals root-svg\nexport function toRoot(i) {\n  return this.toParent(this.root(), i)\n}\n\n// Add transformations\nexport function transform(o, relative) {\n  // Act as a getter if no object was passed\n  if (o == null || typeof o === 'string') {\n    const decomposed = new Matrix(this).decompose()\n    return o == null ? decomposed : decomposed[o]\n  }\n\n  if (!Matrix.isMatrixLike(o)) {\n    // Set the origin according to the defined transform\n    o = { ...o, origin: getOrigin(o, this) }\n  }\n\n  // The user can pass a boolean, an Element or an Matrix or nothing\n  const cleanRelative = relative === true ? this : relative || false\n  const result = new Matrix(cleanRelative).transform(o)\n  return this.attr('transform', result)\n}\n\nregisterMethods('Element', {\n  untransform,\n  matrixify,\n  toParent,\n  toRoot,\n  transform\n})\n","import { register } from '../utils/adopter.js'\nimport Element from './Element.js'\n\nexport default class Container extends Element {\n  flatten() {\n    this.each(function () {\n      if (this instanceof Container) {\n        return this.flatten().ungroup()\n      }\n    })\n\n    return this\n  }\n\n  ungroup(parent = this.parent(), index = parent.index(this)) {\n    // when parent != this, we want append all elements to the end\n    index = index === -1 ? parent.children().length : index\n\n    this.each(function (i, children) {\n      // reverse each\n      return children[children.length - i - 1].toParent(parent, index)\n    })\n\n    return this.remove()\n  }\n}\n\nregister(Container, 'Container')\n","import { nodeOrNew, register } from '../utils/adopter.js'\nimport Container from './Container.js'\n\nexport default class Defs extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('defs', node), attrs)\n  }\n\n  flatten() {\n    return this\n  }\n\n  ungroup() {\n    return this\n  }\n}\n\nregister(Defs, 'Defs')\n","import { register } from '../utils/adopter.js'\nimport Element from './Element.js'\n\nexport default class Shape extends Element {}\n\nregister(Shape, 'Shape')\n","import SVGNumber from '../../types/SVGNumber.js'\n\n// Radius x value\nexport function rx(rx) {\n  return this.attr('rx', rx)\n}\n\n// Radius y value\nexport function ry(ry) {\n  return this.attr('ry', ry)\n}\n\n// Move over x-axis\nexport function x(x) {\n  return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\n}\n\n// Move over y-axis\nexport function y(y) {\n  return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\n}\n\n// Move by center over x-axis\nexport function cx(x) {\n  return this.attr('cx', x)\n}\n\n// Move by center over y-axis\nexport function cy(y) {\n  return this.attr('cy', y)\n}\n\n// Set width of element\nexport function width(width) {\n  return width == null ? this.rx() * 2 : this.rx(new SVGNumber(width).divide(2))\n}\n\n// Set height of element\nexport function height(height) {\n  return height == null\n    ? this.ry() * 2\n    : this.ry(new SVGNumber(height).divide(2))\n}\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { proportionalSize } from '../utils/utils.js'\nimport { registerMethods } from '../utils/methods.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport Shape from './Shape.js'\nimport * as circled from '../modules/core/circled.js'\n\nexport default class Ellipse extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('ellipse', node), attrs)\n  }\n\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n\n    return this.rx(new SVGNumber(p.width).divide(2)).ry(\n      new SVGNumber(p.height).divide(2)\n    )\n  }\n}\n\nextend(Ellipse, circled)\n\nregisterMethods('Container', {\n  // Create an ellipse\n  ellipse: wrapWithAttrCheck(function (width = 0, height = width) {\n    return this.put(new Ellipse()).size(width, height).move(0, 0)\n  })\n})\n\nregister(Ellipse, 'Ellipse')\n","import Dom from './Dom.js'\nimport { globals } from '../utils/window.js'\nimport { register, create } from '../utils/adopter.js'\n\nclass Fragment extends Dom {\n  constructor(node = globals.document.createDocumentFragment()) {\n    super(node)\n  }\n\n  // Import / Export raw xml\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML\n      outerXML = xmlOrFn\n      xmlOrFn = null\n    }\n\n    // because this is a fragment we have to put all elements into a wrapper first\n    // before we can get the innerXML from it\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      const wrapper = new Dom(create('wrapper', ns))\n      wrapper.add(this.node.cloneNode(true))\n\n      return wrapper.xml(false, ns)\n    }\n\n    // Act as setter if we got a string\n    return super.xml(xmlOrFn, false, ns)\n  }\n}\n\nregister(Fragment, 'Fragment')\n\nexport default Fragment\n","import SVGNumber from '../../types/SVGNumber.js'\n\nexport function from(x, y) {\n  return (this._element || this).type === 'radialGradient'\n    ? this.attr({ fx: new SVGNumber(x), fy: new SVGNumber(y) })\n    : this.attr({ x1: new SVGNumber(x), y1: new SVGNumber(y) })\n}\n\nexport function to(x, y) {\n  return (this._element || this).type === 'radialGradient'\n    ? this.attr({ cx: new SVGNumber(x), cy: new SVGNumber(y) })\n    : this.attr({ x2: new SVGNumber(x), y2: new SVGNumber(y) })\n}\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Box from '../types/Box.js'\nimport Container from './Container.js'\nimport baseFind from '../modules/core/selector.js'\nimport * as gradiented from '../modules/core/gradiented.js'\n\nexport default class Gradient extends Container {\n  constructor(type, attrs) {\n    super(\n      nodeOrNew(type + 'Gradient', typeof type === 'string' ? null : type),\n      attrs\n    )\n  }\n\n  // custom attr to handle transform\n  attr(a, b, c) {\n    if (a === 'transform') a = 'gradientTransform'\n    return super.attr(a, b, c)\n  }\n\n  bbox() {\n    return new Box()\n  }\n\n  targets() {\n    return baseFind('svg [fill*=' + this.id() + ']')\n  }\n\n  // Alias string conversion to fill\n  toString() {\n    return this.url()\n  }\n\n  // Update gradient\n  update(block) {\n    // remove all stops\n    this.clear()\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this)\n    }\n\n    return this\n  }\n\n  // Return the fill id\n  url() {\n    return 'url(#' + this.id() + ')'\n  }\n}\n\nextend(Gradient, gradiented)\n\nregisterMethods({\n  Container: {\n    // Create gradient element in defs\n    gradient(...args) {\n      return this.defs().gradient(...args)\n    }\n  },\n  // define gradient\n  Defs: {\n    gradient: wrapWithAttrCheck(function (type, block) {\n      return this.put(new Gradient(type)).update(block)\n    })\n  }\n})\n\nregister(Gradient, 'Gradient')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Box from '../types/Box.js'\nimport Container from './Container.js'\nimport baseFind from '../modules/core/selector.js'\n\nexport default class Pattern extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('pattern', node), attrs)\n  }\n\n  // custom attr to handle transform\n  attr(a, b, c) {\n    if (a === 'transform') a = 'patternTransform'\n    return super.attr(a, b, c)\n  }\n\n  bbox() {\n    return new Box()\n  }\n\n  targets() {\n    return baseFind('svg [fill*=' + this.id() + ']')\n  }\n\n  // Alias string conversion to fill\n  toString() {\n    return this.url()\n  }\n\n  // Update pattern by rebuilding\n  update(block) {\n    // remove content\n    this.clear()\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this)\n    }\n\n    return this\n  }\n\n  // Return the fill id\n  url() {\n    return 'url(#' + this.id() + ')'\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create pattern element in defs\n    pattern(...args) {\n      return this.defs().pattern(...args)\n    }\n  },\n  Defs: {\n    pattern: wrapWithAttrCheck(function (width, height, block) {\n      return this.put(new Pattern()).update(block).attr({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        patternUnits: 'userSpaceOnUse'\n      })\n    })\n  }\n})\n\nregister(Pattern, 'Pattern')\n","import { isImage } from '../modules/core/regex.js'\nimport { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { off, on } from '../modules/core/event.js'\nimport { registerAttrHook } from '../modules/core/attr.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { xlink } from '../modules/core/namespaces.js'\nimport Pattern from './Pattern.js'\nimport Shape from './Shape.js'\nimport { globals } from '../utils/window.js'\n\nexport default class Image extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('image', node), attrs)\n  }\n\n  // (re)load image\n  load(url, callback) {\n    if (!url) return this\n\n    const img = new globals.window.Image()\n\n    on(\n      img,\n      'load',\n      function (e) {\n        const p = this.parent(Pattern)\n\n        // ensure image size\n        if (this.width() === 0 && this.height() === 0) {\n          this.size(img.width, img.height)\n        }\n\n        if (p instanceof Pattern) {\n          // ensure pattern size if not set\n          if (p.width() === 0 && p.height() === 0) {\n            p.size(this.width(), this.height())\n          }\n        }\n\n        if (typeof callback === 'function') {\n          callback.call(this, e)\n        }\n      },\n      this\n    )\n\n    on(img, 'load error', function () {\n      // dont forget to unbind memory leaking events\n      off(img)\n    })\n\n    return this.attr('href', (img.src = url), xlink)\n  }\n}\n\nregisterAttrHook(function (attr, val, _this) {\n  // convert image fill and stroke to patterns\n  if (attr === 'fill' || attr === 'stroke') {\n    if (isImage.test(val)) {\n      val = _this.root().defs().image(val)\n    }\n  }\n\n  if (val instanceof Image) {\n    val = _this\n      .root()\n      .defs()\n      .pattern(0, 0, (pattern) => {\n        pattern.add(val)\n      })\n  }\n\n  return val\n})\n\nregisterMethods({\n  Container: {\n    // create image element, load image and set its size\n    image: wrapWithAttrCheck(function (source, callback) {\n      return this.put(new Image()).size(0, 0).load(source, callback)\n    })\n  }\n})\n\nregister(Image, 'Image')\n","import { delimiter } from '../modules/core/regex.js'\nimport SVGArray from './SVGArray.js'\nimport Box from './Box.js'\nimport Matrix from './Matrix.js'\n\nexport default class PointArray extends SVGArray {\n  // Get bounding box of points\n  bbox() {\n    let maxX = -Infinity\n    let maxY = -Infinity\n    let minX = Infinity\n    let minY = Infinity\n    this.forEach(function (el) {\n      maxX = Math.max(el[0], maxX)\n      maxY = Math.max(el[1], maxY)\n      minX = Math.min(el[0], minX)\n      minY = Math.min(el[1], minY)\n    })\n    return new Box(minX, minY, maxX - minX, maxY - minY)\n  }\n\n  // Move point string\n  move(x, y) {\n    const box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    // move every point\n    if (!isNaN(x) && !isNaN(y)) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        this[i] = [this[i][0] + x, this[i][1] + y]\n      }\n    }\n\n    return this\n  }\n\n  // Parse point string and flat array\n  parse(array = [0, 0]) {\n    const points = []\n\n    // if it is an array, we flatten it and therefore clone it to 1 depths\n    if (array instanceof Array) {\n      array = Array.prototype.concat.apply([], array)\n    } else {\n      // Else, it is considered as a string\n      // parse points\n      array = array.trim().split(delimiter).map(parseFloat)\n    }\n\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n    if (array.length % 2 !== 0) array.pop()\n\n    // wrap points in two-tuples\n    for (let i = 0, len = array.length; i < len; i = i + 2) {\n      points.push([array[i], array[i + 1]])\n    }\n\n    return points\n  }\n\n  // Resize poly string\n  size(width, height) {\n    let i\n    const box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      if (box.width)\n        this[i][0] = ((this[i][0] - box.x) * width) / box.width + box.x\n      if (box.height)\n        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y\n    }\n\n    return this\n  }\n\n  // Convert array to line object\n  toLine() {\n    return {\n      x1: this[0][0],\n      y1: this[0][1],\n      x2: this[1][0],\n      y2: this[1][1]\n    }\n  }\n\n  // Convert array to string\n  toString() {\n    const array = []\n    // convert to a poly point string\n    for (let i = 0, il = this.length; i < il; i++) {\n      array.push(this[i].join(','))\n    }\n\n    return array.join(' ')\n  }\n\n  transform(m) {\n    return this.clone().transformO(m)\n  }\n\n  // transform points with matrix (similar to Point.transform)\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m)\n    }\n\n    for (let i = this.length; i--; ) {\n      // Perform the matrix multiplication\n      const [x, y] = this[i]\n      this[i][0] = m.a * x + m.c * y + m.e\n      this[i][1] = m.b * x + m.d * y + m.f\n    }\n\n    return this\n  }\n}\n","import PointArray from '../../types/PointArray.js'\n\nexport const MorphArray = PointArray\n\n// Move by left top corner over x-axis\nexport function x(x) {\n  return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n}\n\n// Move by left top corner over y-axis\nexport function y(y) {\n  return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n}\n\n// Set width of element\nexport function width(width) {\n  const b = this.bbox()\n  return width == null ? b.width : this.size(width, b.height)\n}\n\n// Set height of element\nexport function height(height) {\n  const b = this.bbox()\n  return height == null ? b.height : this.size(b.width, height)\n}\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { proportionalSize } from '../utils/utils.js'\nimport { registerMethods } from '../utils/methods.js'\nimport PointArray from '../types/PointArray.js'\nimport Shape from './Shape.js'\nimport * as pointed from '../modules/core/pointed.js'\n\nexport default class Line extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('line', node), attrs)\n  }\n\n  // Get array\n  array() {\n    return new PointArray([\n      [this.attr('x1'), this.attr('y1')],\n      [this.attr('x2'), this.attr('y2')]\n    ])\n  }\n\n  // Move by left top corner\n  move(x, y) {\n    return this.attr(this.array().move(x, y).toLine())\n  }\n\n  // Overwrite native plot() method\n  plot(x1, y1, x2, y2) {\n    if (x1 == null) {\n      return this.array()\n    } else if (typeof y1 !== 'undefined') {\n      x1 = { x1, y1, x2, y2 }\n    } else {\n      x1 = new PointArray(x1).toLine()\n    }\n\n    return this.attr(x1)\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n    return this.attr(this.array().size(p.width, p.height).toLine())\n  }\n}\n\nextend(Line, pointed)\n\nregisterMethods({\n  Container: {\n    // Create a line element\n    line: wrapWithAttrCheck(function (...args) {\n      // make sure plot is called as a setter\n      // x1 is not necessarily a number, it can also be an array, a string and a PointArray\n      return Line.prototype.plot.apply(\n        this.put(new Line()),\n        args[0] != null ? args : [0, 0, 0, 0]\n      )\n    })\n  }\n})\n\nregister(Line, 'Line')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\n\nexport default class Marker extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('marker', node), attrs)\n  }\n\n  // Set height of element\n  height(height) {\n    return this.attr('markerHeight', height)\n  }\n\n  orient(orient) {\n    return this.attr('orient', orient)\n  }\n\n  // Set marker refX and refY\n  ref(x, y) {\n    return this.attr('refX', x).attr('refY', y)\n  }\n\n  // Return the fill id\n  toString() {\n    return 'url(#' + this.id() + ')'\n  }\n\n  // Update marker\n  update(block) {\n    // remove all content\n    this.clear()\n\n    // invoke passed block\n    if (typeof block === 'function') {\n      block.call(this, this)\n    }\n\n    return this\n  }\n\n  // Set width of element\n  width(width) {\n    return this.attr('markerWidth', width)\n  }\n}\n\nregisterMethods({\n  Container: {\n    marker(...args) {\n      // Create marker element in defs\n      return this.defs().marker(...args)\n    }\n  },\n  Defs: {\n    // Create marker\n    marker: wrapWithAttrCheck(function (width, height, block) {\n      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n      return this.put(new Marker())\n        .size(width, height)\n        .ref(width / 2, height / 2)\n        .viewbox(0, 0, width, height)\n        .attr('orient', 'auto')\n        .update(block)\n    })\n  },\n  marker: {\n    // Create and attach markers\n    marker(marker, width, height, block) {\n      let attr = ['marker']\n\n      // Build attribute name\n      if (marker !== 'all') attr.push(marker)\n      attr = attr.join('-')\n\n      // Set marker attribute\n      marker =\n        arguments[1] instanceof Marker\n          ? arguments[1]\n          : this.defs().marker(width, height, block)\n\n      return this.attr(attr, marker)\n    }\n  }\n})\n\nregister(Marker, 'Marker')\n","import { timeline } from '../modules/core/defaults.js'\nimport { extend } from '../utils/adopter.js'\n\n/***\nBase Class\n==========\nThe base stepper class that will be\n***/\n\nfunction makeSetterGetter(k, f) {\n  return function (v) {\n    if (v == null) return this[k]\n    this[k] = v\n    if (f) f.call(this)\n    return this\n  }\n}\n\nexport const easing = {\n  '-': function (pos) {\n    return pos\n  },\n  '<>': function (pos) {\n    return -Math.cos(pos * Math.PI) / 2 + 0.5\n  },\n  '>': function (pos) {\n    return Math.sin((pos * Math.PI) / 2)\n  },\n  '<': function (pos) {\n    return -Math.cos((pos * Math.PI) / 2) + 1\n  },\n  bezier: function (x1, y1, x2, y2) {\n    // see https://www.w3.org/TR/css-easing-1/#cubic-bezier-algo\n    return function (t) {\n      if (t < 0) {\n        if (x1 > 0) {\n          return (y1 / x1) * t\n        } else if (x2 > 0) {\n          return (y2 / x2) * t\n        } else {\n          return 0\n        }\n      } else if (t > 1) {\n        if (x2 < 1) {\n          return ((1 - y2) / (1 - x2)) * t + (y2 - x2) / (1 - x2)\n        } else if (x1 < 1) {\n          return ((1 - y1) / (1 - x1)) * t + (y1 - x1) / (1 - x1)\n        } else {\n          return 1\n        }\n      } else {\n        return 3 * t * (1 - t) ** 2 * y1 + 3 * t ** 2 * (1 - t) * y2 + t ** 3\n      }\n    }\n  },\n  // see https://www.w3.org/TR/css-easing-1/#step-timing-function-algo\n  steps: function (steps, stepPosition = 'end') {\n    // deal with \"jump-\" prefix\n    stepPosition = stepPosition.split('-').reverse()[0]\n\n    let jumps = steps\n    if (stepPosition === 'none') {\n      --jumps\n    } else if (stepPosition === 'both') {\n      ++jumps\n    }\n\n    // The beforeFlag is essentially useless\n    return (t, beforeFlag = false) => {\n      // Step is called currentStep in referenced url\n      let step = Math.floor(t * steps)\n      const jumping = (t * step) % 1 === 0\n\n      if (stepPosition === 'start' || stepPosition === 'both') {\n        ++step\n      }\n\n      if (beforeFlag && jumping) {\n        --step\n      }\n\n      if (t >= 0 && step < 0) {\n        step = 0\n      }\n\n      if (t <= 1 && step > jumps) {\n        step = jumps\n      }\n\n      return step / jumps\n    }\n  }\n}\n\nexport class Stepper {\n  done() {\n    return false\n  }\n}\n\n/***\nEasing Functions\n================\n***/\n\nexport class Ease extends Stepper {\n  constructor(fn = timeline.ease) {\n    super()\n    this.ease = easing[fn] || fn\n  }\n\n  step(from, to, pos) {\n    if (typeof from !== 'number') {\n      return pos < 1 ? from : to\n    }\n    return from + (to - from) * this.ease(pos)\n  }\n}\n\n/***\nController Types\n================\n***/\n\nexport class Controller extends Stepper {\n  constructor(fn) {\n    super()\n    this.stepper = fn\n  }\n\n  done(c) {\n    return c.done\n  }\n\n  step(current, target, dt, c) {\n    return this.stepper(current, target, dt, c)\n  }\n}\n\nfunction recalculate() {\n  // Apply the default parameters\n  const duration = (this._duration || 500) / 1000\n  const overshoot = this._overshoot || 0\n\n  // Calculate the PID natural response\n  const eps = 1e-10\n  const pi = Math.PI\n  const os = Math.log(overshoot / 100 + eps)\n  const zeta = -os / Math.sqrt(pi * pi + os * os)\n  const wn = 3.9 / (zeta * duration)\n\n  // Calculate the Spring values\n  this.d = 2 * zeta * wn\n  this.k = wn * wn\n}\n\nexport class Spring extends Controller {\n  constructor(duration = 500, overshoot = 0) {\n    super()\n    this.duration(duration).overshoot(overshoot)\n  }\n\n  step(current, target, dt, c) {\n    if (typeof current === 'string') return current\n    c.done = dt === Infinity\n    if (dt === Infinity) return target\n    if (dt === 0) return current\n\n    if (dt > 100) dt = 16\n\n    dt /= 1000\n\n    // Get the previous velocity\n    const velocity = c.velocity || 0\n\n    // Apply the control to get the new position and store it\n    const acceleration = -this.d * velocity - this.k * (current - target)\n    const newPosition = current + velocity * dt + (acceleration * dt * dt) / 2\n\n    // Store the velocity\n    c.velocity = velocity + acceleration * dt\n\n    // Figure out if we have converged, and if so, pass the value\n    c.done = Math.abs(target - newPosition) + Math.abs(velocity) < 0.002\n    return c.done ? target : newPosition\n  }\n}\n\nextend(Spring, {\n  duration: makeSetterGetter('_duration', recalculate),\n  overshoot: makeSetterGetter('_overshoot', recalculate)\n})\n\nexport class PID extends Controller {\n  constructor(p = 0.1, i = 0.01, d = 0, windup = 1000) {\n    super()\n    this.p(p).i(i).d(d).windup(windup)\n  }\n\n  step(current, target, dt, c) {\n    if (typeof current === 'string') return current\n    c.done = dt === Infinity\n\n    if (dt === Infinity) return target\n    if (dt === 0) return current\n\n    const p = target - current\n    let i = (c.integral || 0) + p * dt\n    const d = (p - (c.error || 0)) / dt\n    const windup = this._windup\n\n    // antiwindup\n    if (windup !== false) {\n      i = Math.max(-windup, Math.min(i, windup))\n    }\n\n    c.error = p\n    c.integral = i\n\n    c.done = Math.abs(p) < 0.001\n\n    return c.done ? target : current + (this.P * p + this.I * i + this.D * d)\n  }\n}\n\nextend(PID, {\n  windup: makeSetterGetter('_windup'),\n  p: makeSetterGetter('P'),\n  i: makeSetterGetter('I'),\n  d: makeSetterGetter('D')\n})\n","import { isPathLetter } from '../modules/core/regex.js'\nimport Point from '../types/Point.js'\n\nconst segmentParameters = {\n  M: 2,\n  L: 2,\n  H: 1,\n  V: 1,\n  C: 6,\n  S: 4,\n  Q: 4,\n  T: 2,\n  A: 7,\n  Z: 0\n}\n\nconst pathHandlers = {\n  M: function (c, p, p0) {\n    p.x = p0.x = c[0]\n    p.y = p0.y = c[1]\n\n    return ['M', p.x, p.y]\n  },\n  L: function (c, p) {\n    p.x = c[0]\n    p.y = c[1]\n    return ['L', c[0], c[1]]\n  },\n  H: function (c, p) {\n    p.x = c[0]\n    return ['H', c[0]]\n  },\n  V: function (c, p) {\n    p.y = c[0]\n    return ['V', c[0]]\n  },\n  C: function (c, p) {\n    p.x = c[4]\n    p.y = c[5]\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\n  },\n  S: function (c, p) {\n    p.x = c[2]\n    p.y = c[3]\n    return ['S', c[0], c[1], c[2], c[3]]\n  },\n  Q: function (c, p) {\n    p.x = c[2]\n    p.y = c[3]\n    return ['Q', c[0], c[1], c[2], c[3]]\n  },\n  T: function (c, p) {\n    p.x = c[0]\n    p.y = c[1]\n    return ['T', c[0], c[1]]\n  },\n  Z: function (c, p, p0) {\n    p.x = p0.x\n    p.y = p0.y\n    return ['Z']\n  },\n  A: function (c, p) {\n    p.x = c[5]\n    p.y = c[6]\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\n  }\n}\n\nconst mlhvqtcsaz = 'mlhvqtcsaz'.split('')\n\nfor (let i = 0, il = mlhvqtcsaz.length; i < il; ++i) {\n  pathHandlers[mlhvqtcsaz[i]] = (function (i) {\n    return function (c, p, p0) {\n      if (i === 'H') c[0] = c[0] + p.x\n      else if (i === 'V') c[0] = c[0] + p.y\n      else if (i === 'A') {\n        c[5] = c[5] + p.x\n        c[6] = c[6] + p.y\n      } else {\n        for (let j = 0, jl = c.length; j < jl; ++j) {\n          c[j] = c[j] + (j % 2 ? p.y : p.x)\n        }\n      }\n\n      return pathHandlers[i](c, p, p0)\n    }\n  })(mlhvqtcsaz[i].toUpperCase())\n}\n\nfunction makeAbsolut(parser) {\n  const command = parser.segment[0]\n  return pathHandlers[command](parser.segment.slice(1), parser.p, parser.p0)\n}\n\nfunction segmentComplete(parser) {\n  return (\n    parser.segment.length &&\n    parser.segment.length - 1 ===\n      segmentParameters[parser.segment[0].toUpperCase()]\n  )\n}\n\nfunction startNewSegment(parser, token) {\n  parser.inNumber && finalizeNumber(parser, false)\n  const pathLetter = isPathLetter.test(token)\n\n  if (pathLetter) {\n    parser.segment = [token]\n  } else {\n    const lastCommand = parser.lastCommand\n    const small = lastCommand.toLowerCase()\n    const isSmall = lastCommand === small\n    parser.segment = [small === 'm' ? (isSmall ? 'l' : 'L') : lastCommand]\n  }\n\n  parser.inSegment = true\n  parser.lastCommand = parser.segment[0]\n\n  return pathLetter\n}\n\nfunction finalizeNumber(parser, inNumber) {\n  if (!parser.inNumber) throw new Error('Parser Error')\n  parser.number && parser.segment.push(parseFloat(parser.number))\n  parser.inNumber = inNumber\n  parser.number = ''\n  parser.pointSeen = false\n  parser.hasExponent = false\n\n  if (segmentComplete(parser)) {\n    finalizeSegment(parser)\n  }\n}\n\nfunction finalizeSegment(parser) {\n  parser.inSegment = false\n  if (parser.absolute) {\n    parser.segment = makeAbsolut(parser)\n  }\n  parser.segments.push(parser.segment)\n}\n\nfunction isArcFlag(parser) {\n  if (!parser.segment.length) return false\n  const isArc = parser.segment[0].toUpperCase() === 'A'\n  const length = parser.segment.length\n\n  return isArc && (length === 4 || length === 5)\n}\n\nfunction isExponential(parser) {\n  return parser.lastToken.toUpperCase() === 'E'\n}\n\nconst pathDelimiters = new Set([' ', ',', '\\t', '\\n', '\\r', '\\f'])\nexport function pathParser(d, toAbsolute = true) {\n  let index = 0\n  let token = ''\n  const parser = {\n    segment: [],\n    inNumber: false,\n    number: '',\n    lastToken: '',\n    inSegment: false,\n    segments: [],\n    pointSeen: false,\n    hasExponent: false,\n    absolute: toAbsolute,\n    p0: new Point(),\n    p: new Point()\n  }\n\n  while (((parser.lastToken = token), (token = d.charAt(index++)))) {\n    if (!parser.inSegment) {\n      if (startNewSegment(parser, token)) {\n        continue\n      }\n    }\n\n    if (token === '.') {\n      if (parser.pointSeen || parser.hasExponent) {\n        finalizeNumber(parser, false)\n        --index\n        continue\n      }\n      parser.inNumber = true\n      parser.pointSeen = true\n      parser.number += token\n      continue\n    }\n\n    if (!isNaN(parseInt(token))) {\n      if (parser.number === '0' || isArcFlag(parser)) {\n        parser.inNumber = true\n        parser.number = token\n        finalizeNumber(parser, true)\n        continue\n      }\n\n      parser.inNumber = true\n      parser.number += token\n      continue\n    }\n\n    if (pathDelimiters.has(token)) {\n      if (parser.inNumber) {\n        finalizeNumber(parser, false)\n      }\n      continue\n    }\n\n    if (token === '-' || token === '+') {\n      if (parser.inNumber && !isExponential(parser)) {\n        finalizeNumber(parser, false)\n        --index\n        continue\n      }\n      parser.number += token\n      parser.inNumber = true\n      continue\n    }\n\n    if (token.toUpperCase() === 'E') {\n      parser.number += token\n      parser.hasExponent = true\n      continue\n    }\n\n    if (isPathLetter.test(token)) {\n      if (parser.inNumber) {\n        finalizeNumber(parser, false)\n      } else if (!segmentComplete(parser)) {\n        throw new Error('parser Error')\n      } else {\n        finalizeSegment(parser)\n      }\n      --index\n    }\n  }\n\n  if (parser.inNumber) {\n    finalizeNumber(parser, false)\n  }\n\n  if (parser.inSegment && segmentComplete(parser)) {\n    finalizeSegment(parser)\n  }\n\n  return parser.segments\n}\n","import SVGArray from './SVGArray.js'\nimport parser from '../modules/core/parser.js'\nimport Box from './Box.js'\nimport { pathParser } from '../utils/pathParser.js'\n\nfunction arrayToString(a) {\n  let s = ''\n  for (let i = 0, il = a.length; i < il; i++) {\n    s += a[i][0]\n\n    if (a[i][1] != null) {\n      s += a[i][1]\n\n      if (a[i][2] != null) {\n        s += ' '\n        s += a[i][2]\n\n        if (a[i][3] != null) {\n          s += ' '\n          s += a[i][3]\n          s += ' '\n          s += a[i][4]\n\n          if (a[i][5] != null) {\n            s += ' '\n            s += a[i][5]\n            s += ' '\n            s += a[i][6]\n\n            if (a[i][7] != null) {\n              s += ' '\n              s += a[i][7]\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return s + ' '\n}\n\nexport default class PathArray extends SVGArray {\n  // Get bounding box of path\n  bbox() {\n    parser().path.setAttribute('d', this.toString())\n    return new Box(parser.nodes.path.getBBox())\n  }\n\n  // Move path string\n  move(x, y) {\n    // get bounding box of current situation\n    const box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (let l, i = this.length - 1; i >= 0; i--) {\n        l = this[i][0]\n\n        if (l === 'M' || l === 'L' || l === 'T') {\n          this[i][1] += x\n          this[i][2] += y\n        } else if (l === 'H') {\n          this[i][1] += x\n        } else if (l === 'V') {\n          this[i][1] += y\n        } else if (l === 'C' || l === 'S' || l === 'Q') {\n          this[i][1] += x\n          this[i][2] += y\n          this[i][3] += x\n          this[i][4] += y\n\n          if (l === 'C') {\n            this[i][5] += x\n            this[i][6] += y\n          }\n        } else if (l === 'A') {\n          this[i][6] += x\n          this[i][7] += y\n        }\n      }\n    }\n\n    return this\n  }\n\n  // Absolutize and parse path to array\n  parse(d = 'M0 0') {\n    if (Array.isArray(d)) {\n      d = Array.prototype.concat.apply([], d).toString()\n    }\n\n    return pathParser(d)\n  }\n\n  // Resize path string\n  size(width, height) {\n    // get bounding box of current situation\n    const box = this.bbox()\n    let i, l\n\n    // If the box width or height is 0 then we ignore\n    // transformations on the respective axis\n    box.width = box.width === 0 ? 1 : box.width\n    box.height = box.height === 0 ? 1 : box.height\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      l = this[i][0]\n\n      if (l === 'M' || l === 'L' || l === 'T') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y\n      } else if (l === 'H') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n      } else if (l === 'V') {\n        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y\n      } else if (l === 'C' || l === 'S' || l === 'Q') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y\n        this[i][3] = ((this[i][3] - box.x) * width) / box.width + box.x\n        this[i][4] = ((this[i][4] - box.y) * height) / box.height + box.y\n\n        if (l === 'C') {\n          this[i][5] = ((this[i][5] - box.x) * width) / box.width + box.x\n          this[i][6] = ((this[i][6] - box.y) * height) / box.height + box.y\n        }\n      } else if (l === 'A') {\n        // resize radii\n        this[i][1] = (this[i][1] * width) / box.width\n        this[i][2] = (this[i][2] * height) / box.height\n\n        // move position values\n        this[i][6] = ((this[i][6] - box.x) * width) / box.width + box.x\n        this[i][7] = ((this[i][7] - box.y) * height) / box.height + box.y\n      }\n    }\n\n    return this\n  }\n\n  // Convert array to string\n  toString() {\n    return arrayToString(this)\n  }\n}\n","import { Ease } from './Controller.js'\nimport {\n  delimiter,\n  numberAndUnit,\n  isPathLetter\n} from '../modules/core/regex.js'\nimport { extend } from '../utils/adopter.js'\nimport Color from '../types/Color.js'\nimport PathArray from '../types/PathArray.js'\nimport SVGArray from '../types/SVGArray.js'\nimport SVGNumber from '../types/SVGNumber.js'\n\nconst getClassForType = (value) => {\n  const type = typeof value\n\n  if (type === 'number') {\n    return SVGNumber\n  } else if (type === 'string') {\n    if (Color.isColor(value)) {\n      return Color\n    } else if (delimiter.test(value)) {\n      return isPathLetter.test(value) ? PathArray : SVGArray\n    } else if (numberAndUnit.test(value)) {\n      return SVGNumber\n    } else {\n      return NonMorphable\n    }\n  } else if (morphableTypes.indexOf(value.constructor) > -1) {\n    return value.constructor\n  } else if (Array.isArray(value)) {\n    return SVGArray\n  } else if (type === 'object') {\n    return ObjectBag\n  } else {\n    return NonMorphable\n  }\n}\n\nexport default class Morphable {\n  constructor(stepper) {\n    this._stepper = stepper || new Ease('-')\n\n    this._from = null\n    this._to = null\n    this._type = null\n    this._context = null\n    this._morphObj = null\n  }\n\n  at(pos) {\n    return this._morphObj.morph(\n      this._from,\n      this._to,\n      pos,\n      this._stepper,\n      this._context\n    )\n  }\n\n  done() {\n    const complete = this._context.map(this._stepper.done).reduce(function (\n      last,\n      curr\n    ) {\n      return last && curr\n    }, true)\n    return complete\n  }\n\n  from(val) {\n    if (val == null) {\n      return this._from\n    }\n\n    this._from = this._set(val)\n    return this\n  }\n\n  stepper(stepper) {\n    if (stepper == null) return this._stepper\n    this._stepper = stepper\n    return this\n  }\n\n  to(val) {\n    if (val == null) {\n      return this._to\n    }\n\n    this._to = this._set(val)\n    return this\n  }\n\n  type(type) {\n    // getter\n    if (type == null) {\n      return this._type\n    }\n\n    // setter\n    this._type = type\n    return this\n  }\n\n  _set(value) {\n    if (!this._type) {\n      this.type(getClassForType(value))\n    }\n\n    let result = new this._type(value)\n    if (this._type === Color) {\n      result = this._to\n        ? result[this._to[4]]()\n        : this._from\n          ? result[this._from[4]]()\n          : result\n    }\n\n    if (this._type === ObjectBag) {\n      result = this._to\n        ? result.align(this._to)\n        : this._from\n          ? result.align(this._from)\n          : result\n    }\n\n    result = result.toConsumable()\n\n    this._morphObj = this._morphObj || new this._type()\n    this._context =\n      this._context ||\n      Array.apply(null, Array(result.length))\n        .map(Object)\n        .map(function (o) {\n          o.done = true\n          return o\n        })\n    return result\n  }\n}\n\nexport class NonMorphable {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  init(val) {\n    val = Array.isArray(val) ? val[0] : val\n    this.value = val\n    return this\n  }\n\n  toArray() {\n    return [this.value]\n  }\n\n  valueOf() {\n    return this.value\n  }\n}\n\nexport class TransformBag {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  init(obj) {\n    if (Array.isArray(obj)) {\n      obj = {\n        scaleX: obj[0],\n        scaleY: obj[1],\n        shear: obj[2],\n        rotate: obj[3],\n        translateX: obj[4],\n        translateY: obj[5],\n        originX: obj[6],\n        originY: obj[7]\n      }\n    }\n\n    Object.assign(this, TransformBag.defaults, obj)\n    return this\n  }\n\n  toArray() {\n    const v = this\n\n    return [\n      v.scaleX,\n      v.scaleY,\n      v.shear,\n      v.rotate,\n      v.translateX,\n      v.translateY,\n      v.originX,\n      v.originY\n    ]\n  }\n}\n\nTransformBag.defaults = {\n  scaleX: 1,\n  scaleY: 1,\n  shear: 0,\n  rotate: 0,\n  translateX: 0,\n  translateY: 0,\n  originX: 0,\n  originY: 0\n}\n\nconst sortByKey = (a, b) => {\n  return a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0\n}\n\nexport class ObjectBag {\n  constructor(...args) {\n    this.init(...args)\n  }\n\n  align(other) {\n    const values = this.values\n    for (let i = 0, il = values.length; i < il; ++i) {\n      // If the type is the same we only need to check if the color is in the correct format\n      if (values[i + 1] === other[i + 1]) {\n        if (values[i + 1] === Color && other[i + 7] !== values[i + 7]) {\n          const space = other[i + 7]\n          const color = new Color(this.values.splice(i + 3, 5))\n            [space]()\n            .toArray()\n          this.values.splice(i + 3, 0, ...color)\n        }\n\n        i += values[i + 2] + 2\n        continue\n      }\n\n      if (!other[i + 1]) {\n        return this\n      }\n\n      // The types differ, so we overwrite the new type with the old one\n      // And initialize it with the types default (e.g. black for color or 0 for number)\n      const defaultObject = new other[i + 1]().toArray()\n\n      // Than we fix the values array\n      const toDelete = values[i + 2] + 3\n\n      values.splice(\n        i,\n        toDelete,\n        other[i],\n        other[i + 1],\n        other[i + 2],\n        ...defaultObject\n      )\n\n      i += values[i + 2] + 2\n    }\n    return this\n  }\n\n  init(objOrArr) {\n    this.values = []\n\n    if (Array.isArray(objOrArr)) {\n      this.values = objOrArr.slice()\n      return\n    }\n\n    objOrArr = objOrArr || {}\n    const entries = []\n\n    for (const i in objOrArr) {\n      const Type = getClassForType(objOrArr[i])\n      const val = new Type(objOrArr[i]).toArray()\n      entries.push([i, Type, val.length, ...val])\n    }\n\n    entries.sort(sortByKey)\n\n    this.values = entries.reduce((last, curr) => last.concat(curr), [])\n    return this\n  }\n\n  toArray() {\n    return this.values\n  }\n\n  valueOf() {\n    const obj = {}\n    const arr = this.values\n\n    // for (var i = 0, len = arr.length; i < len; i += 2) {\n    while (arr.length) {\n      const key = arr.shift()\n      const Type = arr.shift()\n      const num = arr.shift()\n      const values = arr.splice(0, num)\n      obj[key] = new Type(values) // .valueOf()\n    }\n\n    return obj\n  }\n}\n\nconst morphableTypes = [NonMorphable, TransformBag, ObjectBag]\n\nexport function registerMorphableType(type = []) {\n  morphableTypes.push(...[].concat(type))\n}\n\nexport function makeMorphable() {\n  extend(morphableTypes, {\n    to(val) {\n      return new Morphable()\n        .type(this.constructor)\n        .from(this.toArray()) // this.valueOf())\n        .to(val)\n    },\n    fromArray(arr) {\n      this.init(arr)\n      return this\n    },\n    toConsumable() {\n      return this.toArray()\n    },\n    morph(from, to, pos, stepper, context) {\n      const mapper = function (i, index) {\n        return stepper.step(i, to[index], pos, context[index], context)\n      }\n\n      return this.fromArray(from.map(mapper))\n    }\n  })\n}\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { proportionalSize } from '../utils/utils.js'\nimport { registerMethods } from '../utils/methods.js'\nimport PathArray from '../types/PathArray.js'\nimport Shape from './Shape.js'\n\nexport default class Path extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('path', node), attrs)\n  }\n\n  // Get array\n  array() {\n    return this._array || (this._array = new PathArray(this.attr('d')))\n  }\n\n  // Clear array cache\n  clear() {\n    delete this._array\n    return this\n  }\n\n  // Set height of element\n  height(height) {\n    return height == null\n      ? this.bbox().height\n      : this.size(this.bbox().width, height)\n  }\n\n  // Move by left top corner\n  move(x, y) {\n    return this.attr('d', this.array().move(x, y))\n  }\n\n  // Plot new path\n  plot(d) {\n    return d == null\n      ? this.array()\n      : this.clear().attr(\n          'd',\n          typeof d === 'string' ? d : (this._array = new PathArray(d))\n        )\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n    return this.attr('d', this.array().size(p.width, p.height))\n  }\n\n  // Set width of element\n  width(width) {\n    return width == null\n      ? this.bbox().width\n      : this.size(width, this.bbox().height)\n  }\n\n  // Move by left top corner over x-axis\n  x(x) {\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n  }\n\n  // Move by left top corner over y-axis\n  y(y) {\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n  }\n}\n\n// Define morphable array\nPath.prototype.MorphArray = PathArray\n\n// Add parent method\nregisterMethods({\n  Container: {\n    // Create a wrapped path element\n    path: wrapWithAttrCheck(function (d) {\n      // make sure plot is called as a setter\n      return this.put(new Path()).plot(d || new PathArray())\n    })\n  }\n})\n\nregister(Path, 'Path')\n","import { proportionalSize } from '../../utils/utils.js'\nimport PointArray from '../../types/PointArray.js'\n\n// Get array\nexport function array() {\n  return this._array || (this._array = new PointArray(this.attr('points')))\n}\n\n// Clear array cache\nexport function clear() {\n  delete this._array\n  return this\n}\n\n// Move by left top corner\nexport function move(x, y) {\n  return this.attr('points', this.array().move(x, y))\n}\n\n// Plot new path\nexport function plot(p) {\n  return p == null\n    ? this.array()\n    : this.clear().attr(\n        'points',\n        typeof p === 'string' ? p : (this._array = new PointArray(p))\n      )\n}\n\n// Set element size to given width and height\nexport function size(width, height) {\n  const p = proportionalSize(this, width, height)\n  return this.attr('points', this.array().size(p.width, p.height))\n}\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport PointArray from '../types/PointArray.js'\nimport Shape from './Shape.js'\nimport * as pointed from '../modules/core/pointed.js'\nimport * as poly from '../modules/core/poly.js'\n\nexport default class Polygon extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('polygon', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polygon: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polygon()).plot(p || new PointArray())\n    })\n  }\n})\n\nextend(Polygon, pointed)\nextend(Polygon, poly)\nregister(Polygon, 'Polygon')\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport PointArray from '../types/PointArray.js'\nimport Shape from './Shape.js'\nimport * as pointed from '../modules/core/pointed.js'\nimport * as poly from '../modules/core/poly.js'\n\nexport default class Polyline extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('polyline', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polyline: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polyline()).plot(p || new PointArray())\n    })\n  }\n})\n\nextend(Polyline, pointed)\nextend(Polyline, poly)\nregister(Polyline, 'Polyline')\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { rx, ry } from '../modules/core/circled.js'\nimport Shape from './Shape.js'\n\nexport default class Rect extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('rect', node), attrs)\n  }\n}\n\nextend(Rect, { rx, ry })\n\nregisterMethods({\n  Container: {\n    // Create a rect element\n    rect: wrapWithAttrCheck(function (width, height) {\n      return this.put(new Rect()).size(width, height)\n    })\n  }\n})\n\nregister(Rect, 'Rect')\n","export default class Queue {\n  constructor() {\n    this._first = null\n    this._last = null\n  }\n\n  // Shows us the first item in the list\n  first() {\n    return this._first && this._first.value\n  }\n\n  // Shows us the last item in the list\n  last() {\n    return this._last && this._last.value\n  }\n\n  push(value) {\n    // An item stores an id and the provided value\n    const item =\n      typeof value.next !== 'undefined'\n        ? value\n        : { value: value, next: null, prev: null }\n\n    // Deal with the queue being empty or populated\n    if (this._last) {\n      item.prev = this._last\n      this._last.next = item\n      this._last = item\n    } else {\n      this._last = item\n      this._first = item\n    }\n\n    // Return the current item\n    return item\n  }\n\n  // Removes the item that was returned from the push\n  remove(item) {\n    // Relink the previous item\n    if (item.prev) item.prev.next = item.next\n    if (item.next) item.next.prev = item.prev\n    if (item === this._last) this._last = item.prev\n    if (item === this._first) this._first = item.next\n\n    // Invalidate item\n    item.prev = null\n    item.next = null\n  }\n\n  shift() {\n    // Check if we have a value\n    const remove = this._first\n    if (!remove) return null\n\n    // If we do, remove it and relink things\n    this._first = remove.next\n    if (this._first) this._first.prev = null\n    this._last = this._first ? this._last : null\n    return remove.value\n  }\n}\n","import { globals } from '../utils/window.js'\nimport Queue from './Queue.js'\n\nconst Animator = {\n  nextDraw: null,\n  frames: new Queue(),\n  timeouts: new Queue(),\n  immediates: new Queue(),\n  timer: () => globals.window.performance || globals.window.Date,\n  transforms: [],\n\n  frame(fn) {\n    // Store the node\n    const node = Animator.frames.push({ run: fn })\n\n    // Request an animation frame if we don't have one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw)\n    }\n\n    // Return the node so we can remove it easily\n    return node\n  },\n\n  timeout(fn, delay) {\n    delay = delay || 0\n\n    // Work out when the event should fire\n    const time = Animator.timer().now() + delay\n\n    // Add the timeout to the end of the queue\n    const node = Animator.timeouts.push({ run: fn, time: time })\n\n    // Request another animation frame if we need one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw)\n    }\n\n    return node\n  },\n\n  immediate(fn) {\n    // Add the immediate fn to the end of the queue\n    const node = Animator.immediates.push(fn)\n    // Request another animation frame if we need one\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw)\n    }\n\n    return node\n  },\n\n  cancelFrame(node) {\n    node != null && Animator.frames.remove(node)\n  },\n\n  clearTimeout(node) {\n    node != null && Animator.timeouts.remove(node)\n  },\n\n  cancelImmediate(node) {\n    node != null && Animator.immediates.remove(node)\n  },\n\n  _draw(now) {\n    // Run all the timeouts we can run, if they are not ready yet, add them\n    // to the end of the queue immediately! (bad timeouts!!! [sarcasm])\n    let nextTimeout = null\n    const lastTimeout = Animator.timeouts.last()\n    while ((nextTimeout = Animator.timeouts.shift())) {\n      // Run the timeout if its time, or push it to the end\n      if (now >= nextTimeout.time) {\n        nextTimeout.run()\n      } else {\n        Animator.timeouts.push(nextTimeout)\n      }\n\n      // If we hit the last item, we should stop shifting out more items\n      if (nextTimeout === lastTimeout) break\n    }\n\n    // Run all of the animation frames\n    let nextFrame = null\n    const lastFrame = Animator.frames.last()\n    while (nextFrame !== lastFrame && (nextFrame = Animator.frames.shift())) {\n      nextFrame.run(now)\n    }\n\n    let nextImmediate = null\n    while ((nextImmediate = Animator.immediates.shift())) {\n      nextImmediate()\n    }\n\n    // If we have remaining timeouts or frames, draw until we don't anymore\n    Animator.nextDraw =\n      Animator.timeouts.first() || Animator.frames.first()\n        ? globals.window.requestAnimationFrame(Animator._draw)\n        : null\n  }\n}\n\nexport default Animator\n","import { globals } from '../utils/window.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Animator from './Animator.js'\nimport EventTarget from '../types/EventTarget.js'\n\nconst makeSchedule = function (runnerInfo) {\n  const start = runnerInfo.start\n  const duration = runnerInfo.runner.duration()\n  const end = start + duration\n  return {\n    start: start,\n    duration: duration,\n    end: end,\n    runner: runnerInfo.runner\n  }\n}\n\nconst defaultSource = function () {\n  const w = globals.window\n  return (w.performance || w.Date).now()\n}\n\nexport default class Timeline extends EventTarget {\n  // Construct a new timeline on the given element\n  constructor(timeSource = defaultSource) {\n    super()\n\n    this._timeSource = timeSource\n\n    // terminate resets all variables to their initial state\n    this.terminate()\n  }\n\n  active() {\n    return !!this._nextFrame\n  }\n\n  finish() {\n    // Go to end and pause\n    this.time(this.getEndTimeOfTimeline() + 1)\n    return this.pause()\n  }\n\n  // Calculates the end of the timeline\n  getEndTime() {\n    const lastRunnerInfo = this.getLastRunnerInfo()\n    const lastDuration = lastRunnerInfo ? lastRunnerInfo.runner.duration() : 0\n    const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time\n    return lastStartTime + lastDuration\n  }\n\n  getEndTimeOfTimeline() {\n    const endTimes = this._runners.map((i) => i.start + i.runner.duration())\n    return Math.max(0, ...endTimes)\n  }\n\n  getLastRunnerInfo() {\n    return this.getRunnerInfoById(this._lastRunnerId)\n  }\n\n  getRunnerInfoById(id) {\n    return this._runners[this._runnerIds.indexOf(id)] || null\n  }\n\n  pause() {\n    this._paused = true\n    return this._continue()\n  }\n\n  persist(dtOrForever) {\n    if (dtOrForever == null) return this._persist\n    this._persist = dtOrForever\n    return this\n  }\n\n  play() {\n    // Now make sure we are not paused and continue the animation\n    this._paused = false\n    return this.updateTime()._continue()\n  }\n\n  reverse(yes) {\n    const currentSpeed = this.speed()\n    if (yes == null) return this.speed(-currentSpeed)\n\n    const positive = Math.abs(currentSpeed)\n    return this.speed(yes ? -positive : positive)\n  }\n\n  // schedules a runner on the timeline\n  schedule(runner, delay, when) {\n    if (runner == null) {\n      return this._runners.map(makeSchedule)\n    }\n\n    // The start time for the next animation can either be given explicitly,\n    // derived from the current timeline time or it can be relative to the\n    // last start time to chain animations directly\n\n    let absoluteStartTime = 0\n    const endTime = this.getEndTime()\n    delay = delay || 0\n\n    // Work out when to start the animation\n    if (when == null || when === 'last' || when === 'after') {\n      // Take the last time and increment\n      absoluteStartTime = endTime\n    } else if (when === 'absolute' || when === 'start') {\n      absoluteStartTime = delay\n      delay = 0\n    } else if (when === 'now') {\n      absoluteStartTime = this._time\n    } else if (when === 'relative') {\n      const runnerInfo = this.getRunnerInfoById(runner.id)\n      if (runnerInfo) {\n        absoluteStartTime = runnerInfo.start + delay\n        delay = 0\n      }\n    } else if (when === 'with-last') {\n      const lastRunnerInfo = this.getLastRunnerInfo()\n      const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time\n      absoluteStartTime = lastStartTime\n    } else {\n      throw new Error('Invalid value for the \"when\" parameter')\n    }\n\n    // Manage runner\n    runner.unschedule()\n    runner.timeline(this)\n\n    const persist = runner.persist()\n    const runnerInfo = {\n      persist: persist === null ? this._persist : persist,\n      start: absoluteStartTime + delay,\n      runner\n    }\n\n    this._lastRunnerId = runner.id\n\n    this._runners.push(runnerInfo)\n    this._runners.sort((a, b) => a.start - b.start)\n    this._runnerIds = this._runners.map((info) => info.runner.id)\n\n    this.updateTime()._continue()\n    return this\n  }\n\n  seek(dt) {\n    return this.time(this._time + dt)\n  }\n\n  source(fn) {\n    if (fn == null) return this._timeSource\n    this._timeSource = fn\n    return this\n  }\n\n  speed(speed) {\n    if (speed == null) return this._speed\n    this._speed = speed\n    return this\n  }\n\n  stop() {\n    // Go to start and pause\n    this.time(0)\n    return this.pause()\n  }\n\n  time(time) {\n    if (time == null) return this._time\n    this._time = time\n    return this._continue(true)\n  }\n\n  // Remove the runner from this timeline\n  unschedule(runner) {\n    const index = this._runnerIds.indexOf(runner.id)\n    if (index < 0) return this\n\n    this._runners.splice(index, 1)\n    this._runnerIds.splice(index, 1)\n\n    runner.timeline(null)\n    return this\n  }\n\n  // Makes sure, that after pausing the time doesn't jump\n  updateTime() {\n    if (!this.active()) {\n      this._lastSourceTime = this._timeSource()\n    }\n    return this\n  }\n\n  // Checks if we are running and continues the animation\n  _continue(immediateStep = false) {\n    Animator.cancelFrame(this._nextFrame)\n    this._nextFrame = null\n\n    if (immediateStep) return this._stepImmediate()\n    if (this._paused) return this\n\n    this._nextFrame = Animator.frame(this._step)\n    return this\n  }\n\n  _stepFn(immediateStep = false) {\n    // Get the time delta from the last time and update the time\n    const time = this._timeSource()\n    let dtSource = time - this._lastSourceTime\n\n    if (immediateStep) dtSource = 0\n\n    const dtTime = this._speed * dtSource + (this._time - this._lastStepTime)\n    this._lastSourceTime = time\n\n    // Only update the time if we use the timeSource.\n    // Otherwise use the current time\n    if (!immediateStep) {\n      // Update the time\n      this._time += dtTime\n      this._time = this._time < 0 ? 0 : this._time\n    }\n    this._lastStepTime = this._time\n    this.fire('time', this._time)\n\n    // This is for the case that the timeline was seeked so that the time\n    // is now before the startTime of the runner. That is why we need to set\n    // the runner to position 0\n\n    // FIXME:\n    // However, resetting in insertion order leads to bugs. Considering the case,\n    // where 2 runners change the same attribute but in different times,\n    // resetting both of them will lead to the case where the later defined\n    // runner always wins the reset even if the other runner started earlier\n    // and therefore should win the attribute battle\n    // this can be solved by resetting them backwards\n    for (let k = this._runners.length; k--; ) {\n      // Get and run the current runner and ignore it if its inactive\n      const runnerInfo = this._runners[k]\n      const runner = runnerInfo.runner\n\n      // Make sure that we give the actual difference\n      // between runner start time and now\n      const dtToStart = this._time - runnerInfo.start\n\n      // Dont run runner if not started yet\n      // and try to reset it\n      if (dtToStart <= 0) {\n        runner.reset()\n      }\n    }\n\n    // Run all of the runners directly\n    let runnersLeft = false\n    for (let i = 0, len = this._runners.length; i < len; i++) {\n      // Get and run the current runner and ignore it if its inactive\n      const runnerInfo = this._runners[i]\n      const runner = runnerInfo.runner\n      let dt = dtTime\n\n      // Make sure that we give the actual difference\n      // between runner start time and now\n      const dtToStart = this._time - runnerInfo.start\n\n      // Dont run runner if not started yet\n      if (dtToStart <= 0) {\n        runnersLeft = true\n        continue\n      } else if (dtToStart < dt) {\n        // Adjust dt to make sure that animation is on point\n        dt = dtToStart\n      }\n\n      if (!runner.active()) continue\n\n      // If this runner is still going, signal that we need another animation\n      // frame, otherwise, remove the completed runner\n      const finished = runner.step(dt).done\n      if (!finished) {\n        runnersLeft = true\n        // continue\n      } else if (runnerInfo.persist !== true) {\n        // runner is finished. And runner might get removed\n        const endTime = runner.duration() - runner.time() + this._time\n\n        if (endTime + runnerInfo.persist < this._time) {\n          // Delete runner and correct index\n          runner.unschedule()\n          --i\n          --len\n        }\n      }\n    }\n\n    // Basically: we continue when there are runners right from us in time\n    // when -->, and when runners are left from us when <--\n    if (\n      (runnersLeft && !(this._speed < 0 && this._time === 0)) ||\n      (this._runnerIds.length && this._speed < 0 && this._time > 0)\n    ) {\n      this._continue()\n    } else {\n      this.pause()\n      this.fire('finished')\n    }\n\n    return this\n  }\n\n  terminate() {\n    // cleanup memory\n\n    // Store the timing variables\n    this._startTime = 0\n    this._speed = 1.0\n\n    // Determines how long a runner is hold in memory. Can be a dt or true/false\n    this._persist = 0\n\n    // Keep track of the running animations and their starting parameters\n    this._nextFrame = null\n    this._paused = true\n    this._runners = []\n    this._runnerIds = []\n    this._lastRunnerId = -1\n    this._time = 0\n    this._lastSourceTime = 0\n    this._lastStepTime = 0\n\n    // Make sure that step is always called in class context\n    this._step = this._stepFn.bind(this, false)\n    this._stepImmediate = this._stepFn.bind(this, true)\n  }\n}\n\nregisterMethods({\n  Element: {\n    timeline: function (timeline) {\n      if (timeline == null) {\n        this._timeline = this._timeline || new Timeline()\n        return this._timeline\n      } else {\n        this._timeline = timeline\n        return this\n      }\n    }\n  }\n})\n","import { Controller, Ease, Stepper } from './Controller.js'\nimport { extend, register } from '../utils/adopter.js'\nimport { from, to } from '../modules/core/gradiented.js'\nimport { getOrigin } from '../utils/utils.js'\nimport { noop, timeline } from '../modules/core/defaults.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { rx, ry } from '../modules/core/circled.js'\nimport Animator from './Animator.js'\nimport Box from '../types/Box.js'\nimport EventTarget from '../types/EventTarget.js'\nimport Matrix from '../types/Matrix.js'\nimport Morphable, { TransformBag, ObjectBag } from './Morphable.js'\nimport Point from '../types/Point.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport Timeline from './Timeline.js'\n\nexport default class Runner extends EventTarget {\n  constructor(options) {\n    super()\n\n    // Store a unique id on the runner, so that we can identify it later\n    this.id = Runner.id++\n\n    // Ensure a default value\n    options = options == null ? timeline.duration : options\n\n    // Ensure that we get a controller\n    options = typeof options === 'function' ? new Controller(options) : options\n\n    // Declare all of the variables\n    this._element = null\n    this._timeline = null\n    this.done = false\n    this._queue = []\n\n    // Work out the stepper and the duration\n    this._duration = typeof options === 'number' && options\n    this._isDeclarative = options instanceof Controller\n    this._stepper = this._isDeclarative ? options : new Ease()\n\n    // We copy the current values from the timeline because they can change\n    this._history = {}\n\n    // Store the state of the runner\n    this.enabled = true\n    this._time = 0\n    this._lastTime = 0\n\n    // At creation, the runner is in reset state\n    this._reseted = true\n\n    // Save transforms applied to this runner\n    this.transforms = new Matrix()\n    this.transformId = 1\n\n    // Looping variables\n    this._haveReversed = false\n    this._reverse = false\n    this._loopsDone = 0\n    this._swing = false\n    this._wait = 0\n    this._times = 1\n\n    this._frameId = null\n\n    // Stores how long a runner is stored after being done\n    this._persist = this._isDeclarative ? true : null\n  }\n\n  static sanitise(duration, delay, when) {\n    // Initialise the default parameters\n    let times = 1\n    let swing = false\n    let wait = 0\n    duration = duration ?? timeline.duration\n    delay = delay ?? timeline.delay\n    when = when || 'last'\n\n    // If we have an object, unpack the values\n    if (typeof duration === 'object' && !(duration instanceof Stepper)) {\n      delay = duration.delay ?? delay\n      when = duration.when ?? when\n      swing = duration.swing || swing\n      times = duration.times ?? times\n      wait = duration.wait ?? wait\n      duration = duration.duration ?? timeline.duration\n    }\n\n    return {\n      duration: duration,\n      delay: delay,\n      swing: swing,\n      times: times,\n      wait: wait,\n      when: when\n    }\n  }\n\n  active(enabled) {\n    if (enabled == null) return this.enabled\n    this.enabled = enabled\n    return this\n  }\n\n  /*\n  Private Methods\n  ===============\n  Methods that shouldn't be used externally\n  */\n  addTransform(transform) {\n    this.transforms.lmultiplyO(transform)\n    return this\n  }\n\n  after(fn) {\n    return this.on('finished', fn)\n  }\n\n  animate(duration, delay, when) {\n    const o = Runner.sanitise(duration, delay, when)\n    const runner = new Runner(o.duration)\n    if (this._timeline) runner.timeline(this._timeline)\n    if (this._element) runner.element(this._element)\n    return runner.loop(o).schedule(o.delay, o.when)\n  }\n\n  clearTransform() {\n    this.transforms = new Matrix()\n    return this\n  }\n\n  // TODO: Keep track of all transformations so that deletion is faster\n  clearTransformsFromQueue() {\n    if (\n      !this.done ||\n      !this._timeline ||\n      !this._timeline._runnerIds.includes(this.id)\n    ) {\n      this._queue = this._queue.filter((item) => {\n        return !item.isTransform\n      })\n    }\n  }\n\n  delay(delay) {\n    return this.animate(0, delay)\n  }\n\n  duration() {\n    return this._times * (this._wait + this._duration) - this._wait\n  }\n\n  during(fn) {\n    return this.queue(null, fn)\n  }\n\n  ease(fn) {\n    this._stepper = new Ease(fn)\n    return this\n  }\n  /*\n  Runner Definitions\n  ==================\n  These methods help us define the runtime behaviour of the Runner or they\n  help us make new runners from the current runner\n  */\n\n  element(element) {\n    if (element == null) return this._element\n    this._element = element\n    element._prepareRunner()\n    return this\n  }\n\n  finish() {\n    return this.step(Infinity)\n  }\n\n  loop(times, swing, wait) {\n    // Deal with the user passing in an object\n    if (typeof times === 'object') {\n      swing = times.swing\n      wait = times.wait\n      times = times.times\n    }\n\n    // Sanitise the values and store them\n    this._times = times || Infinity\n    this._swing = swing || false\n    this._wait = wait || 0\n\n    // Allow true to be passed\n    if (this._times === true) {\n      this._times = Infinity\n    }\n\n    return this\n  }\n\n  loops(p) {\n    const loopDuration = this._duration + this._wait\n    if (p == null) {\n      const loopsDone = Math.floor(this._time / loopDuration)\n      const relativeTime = this._time - loopsDone * loopDuration\n      const position = relativeTime / this._duration\n      return Math.min(loopsDone + position, this._times)\n    }\n    const whole = Math.floor(p)\n    const partial = p % 1\n    const time = loopDuration * whole + this._duration * partial\n    return this.time(time)\n  }\n\n  persist(dtOrForever) {\n    if (dtOrForever == null) return this._persist\n    this._persist = dtOrForever\n    return this\n  }\n\n  position(p) {\n    // Get all of the variables we need\n    const x = this._time\n    const d = this._duration\n    const w = this._wait\n    const t = this._times\n    const s = this._swing\n    const r = this._reverse\n    let position\n\n    if (p == null) {\n      /*\n      This function converts a time to a position in the range [0, 1]\n      The full explanation can be found in this desmos demonstration\n        https://www.desmos.com/calculator/u4fbavgche\n      The logic is slightly simplified here because we can use booleans\n      */\n\n      // Figure out the value without thinking about the start or end time\n      const f = function (x) {\n        const swinging = s * Math.floor((x % (2 * (w + d))) / (w + d))\n        const backwards = (swinging && !r) || (!swinging && r)\n        const uncliped =\n          (Math.pow(-1, backwards) * (x % (w + d))) / d + backwards\n        const clipped = Math.max(Math.min(uncliped, 1), 0)\n        return clipped\n      }\n\n      // Figure out the value by incorporating the start time\n      const endTime = t * (w + d) - w\n      position =\n        x <= 0\n          ? Math.round(f(1e-5))\n          : x < endTime\n            ? f(x)\n            : Math.round(f(endTime - 1e-5))\n      return position\n    }\n\n    // Work out the loops done and add the position to the loops done\n    const loopsDone = Math.floor(this.loops())\n    const swingForward = s && loopsDone % 2 === 0\n    const forwards = (swingForward && !r) || (r && swingForward)\n    position = loopsDone + (forwards ? p : 1 - p)\n    return this.loops(position)\n  }\n\n  progress(p) {\n    if (p == null) {\n      return Math.min(1, this._time / this.duration())\n    }\n    return this.time(p * this.duration())\n  }\n\n  /*\n  Basic Functionality\n  ===================\n  These methods allow us to attach basic functions to the runner directly\n  */\n  queue(initFn, runFn, retargetFn, isTransform) {\n    this._queue.push({\n      initialiser: initFn || noop,\n      runner: runFn || noop,\n      retarget: retargetFn,\n      isTransform: isTransform,\n      initialised: false,\n      finished: false\n    })\n    const timeline = this.timeline()\n    timeline && this.timeline()._continue()\n    return this\n  }\n\n  reset() {\n    if (this._reseted) return this\n    this.time(0)\n    this._reseted = true\n    return this\n  }\n\n  reverse(reverse) {\n    this._reverse = reverse == null ? !this._reverse : reverse\n    return this\n  }\n\n  schedule(timeline, delay, when) {\n    // The user doesn't need to pass a timeline if we already have one\n    if (!(timeline instanceof Timeline)) {\n      when = delay\n      delay = timeline\n      timeline = this.timeline()\n    }\n\n    // If there is no timeline, yell at the user...\n    if (!timeline) {\n      throw Error('Runner cannot be scheduled without timeline')\n    }\n\n    // Schedule the runner on the timeline provided\n    timeline.schedule(this, delay, when)\n    return this\n  }\n\n  step(dt) {\n    // If we are inactive, this stepper just gets skipped\n    if (!this.enabled) return this\n\n    // Update the time and get the new position\n    dt = dt == null ? 16 : dt\n    this._time += dt\n    const position = this.position()\n\n    // Figure out if we need to run the stepper in this frame\n    const running = this._lastPosition !== position && this._time >= 0\n    this._lastPosition = position\n\n    // Figure out if we just started\n    const duration = this.duration()\n    const justStarted = this._lastTime <= 0 && this._time > 0\n    const justFinished = this._lastTime < duration && this._time >= duration\n\n    this._lastTime = this._time\n    if (justStarted) {\n      this.fire('start', this)\n    }\n\n    // Work out if the runner is finished set the done flag here so animations\n    // know, that they are running in the last step (this is good for\n    // transformations which can be merged)\n    const declarative = this._isDeclarative\n    this.done = !declarative && !justFinished && this._time >= duration\n\n    // Runner is running. So its not in reset state anymore\n    this._reseted = false\n\n    let converged = false\n    // Call initialise and the run function\n    if (running || declarative) {\n      this._initialise(running)\n\n      // clear the transforms on this runner so they dont get added again and again\n      this.transforms = new Matrix()\n      converged = this._run(declarative ? dt : position)\n\n      this.fire('step', this)\n    }\n    // correct the done flag here\n    // declarative animations itself know when they converged\n    this.done = this.done || (converged && declarative)\n    if (justFinished) {\n      this.fire('finished', this)\n    }\n    return this\n  }\n\n  /*\n  Runner animation methods\n  ========================\n  Control how the animation plays\n  */\n  time(time) {\n    if (time == null) {\n      return this._time\n    }\n    const dt = time - this._time\n    this.step(dt)\n    return this\n  }\n\n  timeline(timeline) {\n    // check explicitly for undefined so we can set the timeline to null\n    if (typeof timeline === 'undefined') return this._timeline\n    this._timeline = timeline\n    return this\n  }\n\n  unschedule() {\n    const timeline = this.timeline()\n    timeline && timeline.unschedule(this)\n    return this\n  }\n\n  // Run each initialise function in the runner if required\n  _initialise(running) {\n    // If we aren't running, we shouldn't initialise when not declarative\n    if (!running && !this._isDeclarative) return\n\n    // Loop through all of the initialisers\n    for (let i = 0, len = this._queue.length; i < len; ++i) {\n      // Get the current initialiser\n      const current = this._queue[i]\n\n      // Determine whether we need to initialise\n      const needsIt = this._isDeclarative || (!current.initialised && running)\n      running = !current.finished\n\n      // Call the initialiser if we need to\n      if (needsIt && running) {\n        current.initialiser.call(this)\n        current.initialised = true\n      }\n    }\n  }\n\n  // Save a morpher to the morpher list so that we can retarget it later\n  _rememberMorpher(method, morpher) {\n    this._history[method] = {\n      morpher: morpher,\n      caller: this._queue[this._queue.length - 1]\n    }\n\n    // We have to resume the timeline in case a controller\n    // is already done without being ever run\n    // This can happen when e.g. this is done:\n    //    anim = el.animate(new SVG.Spring)\n    // and later\n    //    anim.move(...)\n    if (this._isDeclarative) {\n      const timeline = this.timeline()\n      timeline && timeline.play()\n    }\n  }\n\n  // Try to set the target for a morpher if the morpher exists, otherwise\n  // Run each run function for the position or dt given\n  _run(positionOrDt) {\n    // Run all of the _queue directly\n    let allfinished = true\n    for (let i = 0, len = this._queue.length; i < len; ++i) {\n      // Get the current function to run\n      const current = this._queue[i]\n\n      // Run the function if its not finished, we keep track of the finished\n      // flag for the sake of declarative _queue\n      const converged = current.runner.call(this, positionOrDt)\n      current.finished = current.finished || converged === true\n      allfinished = allfinished && current.finished\n    }\n\n    // We report when all of the constructors are finished\n    return allfinished\n  }\n\n  // do nothing and return false\n  _tryRetarget(method, target, extra) {\n    if (this._history[method]) {\n      // if the last method wasn't even initialised, throw it away\n      if (!this._history[method].caller.initialised) {\n        const index = this._queue.indexOf(this._history[method].caller)\n        this._queue.splice(index, 1)\n        return false\n      }\n\n      // for the case of transformations, we use the special retarget function\n      // which has access to the outer scope\n      if (this._history[method].caller.retarget) {\n        this._history[method].caller.retarget.call(this, target, extra)\n        // for everything else a simple morpher change is sufficient\n      } else {\n        this._history[method].morpher.to(target)\n      }\n\n      this._history[method].caller.finished = false\n      const timeline = this.timeline()\n      timeline && timeline.play()\n      return true\n    }\n    return false\n  }\n}\n\nRunner.id = 0\n\nexport class FakeRunner {\n  constructor(transforms = new Matrix(), id = -1, done = true) {\n    this.transforms = transforms\n    this.id = id\n    this.done = done\n  }\n\n  clearTransformsFromQueue() {}\n}\n\nextend([Runner, FakeRunner], {\n  mergeWith(runner) {\n    return new FakeRunner(\n      runner.transforms.lmultiply(this.transforms),\n      runner.id\n    )\n  }\n})\n\n// FakeRunner.emptyRunner = new FakeRunner()\n\nconst lmultiply = (last, curr) => last.lmultiplyO(curr)\nconst getRunnerTransform = (runner) => runner.transforms\n\nfunction mergeTransforms() {\n  // Find the matrix to apply to the element and apply it\n  const runners = this._transformationRunners.runners\n  const netTransform = runners\n    .map(getRunnerTransform)\n    .reduce(lmultiply, new Matrix())\n\n  this.transform(netTransform)\n\n  this._transformationRunners.merge()\n\n  if (this._transformationRunners.length() === 1) {\n    this._frameId = null\n  }\n}\n\nexport class RunnerArray {\n  constructor() {\n    this.runners = []\n    this.ids = []\n  }\n\n  add(runner) {\n    if (this.runners.includes(runner)) return\n    const id = runner.id + 1\n\n    this.runners.push(runner)\n    this.ids.push(id)\n\n    return this\n  }\n\n  clearBefore(id) {\n    const deleteCnt = this.ids.indexOf(id + 1) || 1\n    this.ids.splice(0, deleteCnt, 0)\n    this.runners\n      .splice(0, deleteCnt, new FakeRunner())\n      .forEach((r) => r.clearTransformsFromQueue())\n    return this\n  }\n\n  edit(id, newRunner) {\n    const index = this.ids.indexOf(id + 1)\n    this.ids.splice(index, 1, id + 1)\n    this.runners.splice(index, 1, newRunner)\n    return this\n  }\n\n  getByID(id) {\n    return this.runners[this.ids.indexOf(id + 1)]\n  }\n\n  length() {\n    return this.ids.length\n  }\n\n  merge() {\n    let lastRunner = null\n    for (let i = 0; i < this.runners.length; ++i) {\n      const runner = this.runners[i]\n\n      const condition =\n        lastRunner &&\n        runner.done &&\n        lastRunner.done &&\n        // don't merge runner when persisted on timeline\n        (!runner._timeline ||\n          !runner._timeline._runnerIds.includes(runner.id)) &&\n        (!lastRunner._timeline ||\n          !lastRunner._timeline._runnerIds.includes(lastRunner.id))\n\n      if (condition) {\n        // the +1 happens in the function\n        this.remove(runner.id)\n        const newRunner = runner.mergeWith(lastRunner)\n        this.edit(lastRunner.id, newRunner)\n        lastRunner = newRunner\n        --i\n      } else {\n        lastRunner = runner\n      }\n    }\n\n    return this\n  }\n\n  remove(id) {\n    const index = this.ids.indexOf(id + 1)\n    this.ids.splice(index, 1)\n    this.runners.splice(index, 1)\n    return this\n  }\n}\n\nregisterMethods({\n  Element: {\n    animate(duration, delay, when) {\n      const o = Runner.sanitise(duration, delay, when)\n      const timeline = this.timeline()\n      return new Runner(o.duration)\n        .loop(o)\n        .element(this)\n        .timeline(timeline.play())\n        .schedule(o.delay, o.when)\n    },\n\n    delay(by, when) {\n      return this.animate(0, by, when)\n    },\n\n    // this function searches for all runners on the element and deletes the ones\n    // which run before the current one. This is because absolute transformations\n    // overwrite anything anyway so there is no need to waste time computing\n    // other runners\n    _clearTransformRunnersBefore(currentRunner) {\n      this._transformationRunners.clearBefore(currentRunner.id)\n    },\n\n    _currentTransform(current) {\n      return (\n        this._transformationRunners.runners\n          // we need the equal sign here to make sure, that also transformations\n          // on the same runner which execute before the current transformation are\n          // taken into account\n          .filter((runner) => runner.id <= current.id)\n          .map(getRunnerTransform)\n          .reduce(lmultiply, new Matrix())\n      )\n    },\n\n    _addRunner(runner) {\n      this._transformationRunners.add(runner)\n\n      // Make sure that the runner merge is executed at the very end of\n      // all Animator functions. That is why we use immediate here to execute\n      // the merge right after all frames are run\n      Animator.cancelImmediate(this._frameId)\n      this._frameId = Animator.immediate(mergeTransforms.bind(this))\n    },\n\n    _prepareRunner() {\n      if (this._frameId == null) {\n        this._transformationRunners = new RunnerArray().add(\n          new FakeRunner(new Matrix(this))\n        )\n      }\n    }\n  }\n})\n\n// Will output the elements from array A that are not in the array B\nconst difference = (a, b) => a.filter((x) => !b.includes(x))\n\nextend(Runner, {\n  attr(a, v) {\n    return this.styleAttr('attr', a, v)\n  },\n\n  // Add animatable styles\n  css(s, v) {\n    return this.styleAttr('css', s, v)\n  },\n\n  styleAttr(type, nameOrAttrs, val) {\n    if (typeof nameOrAttrs === 'string') {\n      return this.styleAttr(type, { [nameOrAttrs]: val })\n    }\n\n    let attrs = nameOrAttrs\n    if (this._tryRetarget(type, attrs)) return this\n\n    let morpher = new Morphable(this._stepper).to(attrs)\n    let keys = Object.keys(attrs)\n\n    this.queue(\n      function () {\n        morpher = morpher.from(this.element()[type](keys))\n      },\n      function (pos) {\n        this.element()[type](morpher.at(pos).valueOf())\n        return morpher.done()\n      },\n      function (newToAttrs) {\n        // Check if any new keys were added\n        const newKeys = Object.keys(newToAttrs)\n        const differences = difference(newKeys, keys)\n\n        // If their are new keys, initialize them and add them to morpher\n        if (differences.length) {\n          // Get the values\n          const addedFromAttrs = this.element()[type](differences)\n\n          // Get the already initialized values\n          const oldFromAttrs = new ObjectBag(morpher.from()).valueOf()\n\n          // Merge old and new\n          Object.assign(oldFromAttrs, addedFromAttrs)\n          morpher.from(oldFromAttrs)\n        }\n\n        // Get the object from the morpher\n        const oldToAttrs = new ObjectBag(morpher.to()).valueOf()\n\n        // Merge in new attributes\n        Object.assign(oldToAttrs, newToAttrs)\n\n        // Change morpher target\n        morpher.to(oldToAttrs)\n\n        // Make sure that we save the work we did so we don't need it to do again\n        keys = newKeys\n        attrs = newToAttrs\n      }\n    )\n\n    this._rememberMorpher(type, morpher)\n    return this\n  },\n\n  zoom(level, point) {\n    if (this._tryRetarget('zoom', level, point)) return this\n\n    let morpher = new Morphable(this._stepper).to(new SVGNumber(level))\n\n    this.queue(\n      function () {\n        morpher = morpher.from(this.element().zoom())\n      },\n      function (pos) {\n        this.element().zoom(morpher.at(pos), point)\n        return morpher.done()\n      },\n      function (newLevel, newPoint) {\n        point = newPoint\n        morpher.to(newLevel)\n      }\n    )\n\n    this._rememberMorpher('zoom', morpher)\n    return this\n  },\n\n  /**\n   ** absolute transformations\n   **/\n\n  //\n  // M v -----|-----(D M v = F v)------|----->  T v\n  //\n  // 1. define the final state (T) and decompose it (once)\n  //    t = [tx, ty, the, lam, sy, sx]\n  // 2. on every frame: pull the current state of all previous transforms\n  //    (M - m can change)\n  //   and then write this as m = [tx0, ty0, the0, lam0, sy0, sx0]\n  // 3. Find the interpolated matrix F(pos) = m + pos * (t - m)\n  //   - Note F(0) = M\n  //   - Note F(1) = T\n  // 4. Now you get the delta matrix as a result: D = F * inv(M)\n\n  transform(transforms, relative, affine) {\n    // If we have a declarative function, we should retarget it if possible\n    relative = transforms.relative || relative\n    if (\n      this._isDeclarative &&\n      !relative &&\n      this._tryRetarget('transform', transforms)\n    ) {\n      return this\n    }\n\n    // Parse the parameters\n    const isMatrix = Matrix.isMatrixLike(transforms)\n    affine =\n      transforms.affine != null\n        ? transforms.affine\n        : affine != null\n          ? affine\n          : !isMatrix\n\n    // Create a morpher and set its type\n    const morpher = new Morphable(this._stepper).type(\n      affine ? TransformBag : Matrix\n    )\n\n    let origin\n    let element\n    let current\n    let currentAngle\n    let startTransform\n\n    function setup() {\n      // make sure element and origin is defined\n      element = element || this.element()\n      origin = origin || getOrigin(transforms, element)\n\n      startTransform = new Matrix(relative ? undefined : element)\n\n      // add the runner to the element so it can merge transformations\n      element._addRunner(this)\n\n      // Deactivate all transforms that have run so far if we are absolute\n      if (!relative) {\n        element._clearTransformRunnersBefore(this)\n      }\n    }\n\n    function run(pos) {\n      // clear all other transforms before this in case something is saved\n      // on this runner. We are absolute. We dont need these!\n      if (!relative) this.clearTransform()\n\n      const { x, y } = new Point(origin).transform(\n        element._currentTransform(this)\n      )\n\n      let target = new Matrix({ ...transforms, origin: [x, y] })\n      let start = this._isDeclarative && current ? current : startTransform\n\n      if (affine) {\n        target = target.decompose(x, y)\n        start = start.decompose(x, y)\n\n        // Get the current and target angle as it was set\n        const rTarget = target.rotate\n        const rCurrent = start.rotate\n\n        // Figure out the shortest path to rotate directly\n        const possibilities = [rTarget - 360, rTarget, rTarget + 360]\n        const distances = possibilities.map((a) => Math.abs(a - rCurrent))\n        const shortest = Math.min(...distances)\n        const index = distances.indexOf(shortest)\n        target.rotate = possibilities[index]\n      }\n\n      if (relative) {\n        // we have to be careful here not to overwrite the rotation\n        // with the rotate method of Matrix\n        if (!isMatrix) {\n          target.rotate = transforms.rotate || 0\n        }\n        if (this._isDeclarative && currentAngle) {\n          start.rotate = currentAngle\n        }\n      }\n\n      morpher.from(start)\n      morpher.to(target)\n\n      const affineParameters = morpher.at(pos)\n      currentAngle = affineParameters.rotate\n      current = new Matrix(affineParameters)\n\n      this.addTransform(current)\n      element._addRunner(this)\n      return morpher.done()\n    }\n\n    function retarget(newTransforms) {\n      // only get a new origin if it changed since the last call\n      if (\n        (newTransforms.origin || 'center').toString() !==\n        (transforms.origin || 'center').toString()\n      ) {\n        origin = getOrigin(newTransforms, element)\n      }\n\n      // overwrite the old transformations with the new ones\n      transforms = { ...newTransforms, origin }\n    }\n\n    this.queue(setup, run, retarget, true)\n    this._isDeclarative && this._rememberMorpher('transform', morpher)\n    return this\n  },\n\n  // Animatable x-axis\n  x(x) {\n    return this._queueNumber('x', x)\n  },\n\n  // Animatable y-axis\n  y(y) {\n    return this._queueNumber('y', y)\n  },\n\n  ax(x) {\n    return this._queueNumber('ax', x)\n  },\n\n  ay(y) {\n    return this._queueNumber('ay', y)\n  },\n\n  dx(x = 0) {\n    return this._queueNumberDelta('x', x)\n  },\n\n  dy(y = 0) {\n    return this._queueNumberDelta('y', y)\n  },\n\n  dmove(x, y) {\n    return this.dx(x).dy(y)\n  },\n\n  _queueNumberDelta(method, to) {\n    to = new SVGNumber(to)\n\n    // Try to change the target if we have this method already registered\n    if (this._tryRetarget(method, to)) return this\n\n    // Make a morpher and queue the animation\n    const morpher = new Morphable(this._stepper).to(to)\n    let from = null\n    this.queue(\n      function () {\n        from = this.element()[method]()\n        morpher.from(from)\n        morpher.to(from + to)\n      },\n      function (pos) {\n        this.element()[method](morpher.at(pos))\n        return morpher.done()\n      },\n      function (newTo) {\n        morpher.to(from + new SVGNumber(newTo))\n      }\n    )\n\n    // Register the morpher so that if it is changed again, we can retarget it\n    this._rememberMorpher(method, morpher)\n    return this\n  },\n\n  _queueObject(method, to) {\n    // Try to change the target if we have this method already registered\n    if (this._tryRetarget(method, to)) return this\n\n    // Make a morpher and queue the animation\n    const morpher = new Morphable(this._stepper).to(to)\n    this.queue(\n      function () {\n        morpher.from(this.element()[method]())\n      },\n      function (pos) {\n        this.element()[method](morpher.at(pos))\n        return morpher.done()\n      }\n    )\n\n    // Register the morpher so that if it is changed again, we can retarget it\n    this._rememberMorpher(method, morpher)\n    return this\n  },\n\n  _queueNumber(method, value) {\n    return this._queueObject(method, new SVGNumber(value))\n  },\n\n  // Animatable center x-axis\n  cx(x) {\n    return this._queueNumber('cx', x)\n  },\n\n  // Animatable center y-axis\n  cy(y) {\n    return this._queueNumber('cy', y)\n  },\n\n  // Add animatable move\n  move(x, y) {\n    return this.x(x).y(y)\n  },\n\n  amove(x, y) {\n    return this.ax(x).ay(y)\n  },\n\n  // Add animatable center\n  center(x, y) {\n    return this.cx(x).cy(y)\n  },\n\n  // Add animatable size\n  size(width, height) {\n    // animate bbox based size for all other elements\n    let box\n\n    if (!width || !height) {\n      box = this._element.bbox()\n    }\n\n    if (!width) {\n      width = (box.width / box.height) * height\n    }\n\n    if (!height) {\n      height = (box.height / box.width) * width\n    }\n\n    return this.width(width).height(height)\n  },\n\n  // Add animatable width\n  width(width) {\n    return this._queueNumber('width', width)\n  },\n\n  // Add animatable height\n  height(height) {\n    return this._queueNumber('height', height)\n  },\n\n  // Add animatable plot\n  plot(a, b, c, d) {\n    // Lines can be plotted with 4 arguments\n    if (arguments.length === 4) {\n      return this.plot([a, b, c, d])\n    }\n\n    if (this._tryRetarget('plot', a)) return this\n\n    const morpher = new Morphable(this._stepper)\n      .type(this._element.MorphArray)\n      .to(a)\n\n    this.queue(\n      function () {\n        morpher.from(this._element.array())\n      },\n      function (pos) {\n        this._element.plot(morpher.at(pos))\n        return morpher.done()\n      }\n    )\n\n    this._rememberMorpher('plot', morpher)\n    return this\n  },\n\n  // Add leading method\n  leading(value) {\n    return this._queueNumber('leading', value)\n  },\n\n  // Add animatable viewbox\n  viewbox(x, y, width, height) {\n    return this._queueObject('viewbox', new Box(x, y, width, height))\n  },\n\n  update(o) {\n    if (typeof o !== 'object') {\n      return this.update({\n        offset: arguments[0],\n        color: arguments[1],\n        opacity: arguments[2]\n      })\n    }\n\n    if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n    if (o.color != null) this.attr('stop-color', o.color)\n    if (o.offset != null) this.attr('offset', o.offset)\n\n    return this\n  }\n})\n\nextend(Runner, { rx, ry, from, to })\nregister(Runner, 'Runner')\n","import {\n  adopt,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { svg, xlink, xmlns } from '../modules/core/namespaces.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\nimport Defs from './Defs.js'\nimport { globals } from '../utils/window.js'\n\nexport default class Svg extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('svg', node), attrs)\n    this.namespace()\n  }\n\n  // Creates and returns defs element\n  defs() {\n    if (!this.isRoot()) return this.root().defs()\n\n    return adopt(this.node.querySelector('defs')) || this.put(new Defs())\n  }\n\n  isRoot() {\n    return (\n      !this.node.parentNode ||\n      (!(this.node.parentNode instanceof globals.window.SVGElement) &&\n        this.node.parentNode.nodeName !== '#document-fragment')\n    )\n  }\n\n  // Add namespaces\n  namespace() {\n    if (!this.isRoot()) return this.root().namespace()\n    return this.attr({ xmlns: svg, version: '1.1' }).attr(\n      'xmlns:xlink',\n      xlink,\n      xmlns\n    )\n  }\n\n  removeNamespace() {\n    return this.attr({ xmlns: null, version: null })\n      .attr('xmlns:xlink', null, xmlns)\n      .attr('xmlns:svgjs', null, xmlns)\n  }\n\n  // Check if this is a root svg\n  // If not, call root() from this element\n  root() {\n    if (this.isRoot()) return this\n    return super.root()\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create nested svg document\n    nested: wrapWithAttrCheck(function () {\n      return this.put(new Svg())\n    })\n  }\n})\n\nregister(Svg, 'Svg', true)\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\n\nexport default class Symbol extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('symbol', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    symbol: wrapWithAttrCheck(function () {\n      return this.put(new Symbol())\n    })\n  }\n})\n\nregister(Symbol, 'Symbol')\n","import { globals } from '../../utils/window.js'\n\n// Create plain text node\nexport function plain(text) {\n  // clear if build mode is disabled\n  if (this._build === false) {\n    this.clear()\n  }\n\n  // create text node\n  this.node.appendChild(globals.document.createTextNode(text))\n\n  return this\n}\n\n// Get length of text element\nexport function length() {\n  return this.node.getComputedTextLength()\n}\n\n// Move over x-axis\n// Text is moved by its bounding box\n// text-anchor does NOT matter\nexport function x(x, box = this.bbox()) {\n  if (x == null) {\n    return box.x\n  }\n\n  return this.attr('x', this.attr('x') + x - box.x)\n}\n\n// Move over y-axis\nexport function y(y, box = this.bbox()) {\n  if (y == null) {\n    return box.y\n  }\n\n  return this.attr('y', this.attr('y') + y - box.y)\n}\n\nexport function move(x, y, box = this.bbox()) {\n  return this.x(x, box).y(y, box)\n}\n\n// Move center over x-axis\nexport function cx(x, box = this.bbox()) {\n  if (x == null) {\n    return box.cx\n  }\n\n  return this.attr('x', this.attr('x') + x - box.cx)\n}\n\n// Move center over y-axis\nexport function cy(y, box = this.bbox()) {\n  if (y == null) {\n    return box.cy\n  }\n\n  return this.attr('y', this.attr('y') + y - box.cy)\n}\n\nexport function center(x, y, box = this.bbox()) {\n  return this.cx(x, box).cy(y, box)\n}\n\nexport function ax(x) {\n  return this.attr('x', x)\n}\n\nexport function ay(y) {\n  return this.attr('y', y)\n}\n\nexport function amove(x, y) {\n  return this.ax(x).ay(y)\n}\n\n// Enable / disable build mode\nexport function build(build) {\n  this._build = !!build\n  return this\n}\n","import {\n  adopt,\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport Shape from './Shape.js'\nimport { globals } from '../utils/window.js'\nimport * as textable from '../modules/core/textable.js'\nimport { isDescriptive, writeDataToDom } from '../utils/utils.js'\n\nexport default class Text extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('text', node), attrs)\n\n    this.dom.leading = this.dom.leading ?? new SVGNumber(1.3) // store leading value for rebuilding\n    this._rebuild = true // enable automatic updating of dy values\n    this._build = false // disable build mode for adding multiple lines\n  }\n\n  // Set / get leading\n  leading(value) {\n    // act as getter\n    if (value == null) {\n      return this.dom.leading\n    }\n\n    // act as setter\n    this.dom.leading = new SVGNumber(value)\n\n    return this.rebuild()\n  }\n\n  // Rebuild appearance type\n  rebuild(rebuild) {\n    // store new rebuild flag if given\n    if (typeof rebuild === 'boolean') {\n      this._rebuild = rebuild\n    }\n\n    // define position of all lines\n    if (this._rebuild) {\n      const self = this\n      let blankLineOffset = 0\n      const leading = this.dom.leading\n\n      this.each(function (i) {\n        if (isDescriptive(this.node)) return\n\n        const fontSize = globals.window\n          .getComputedStyle(this.node)\n          .getPropertyValue('font-size')\n\n        const dy = leading * new SVGNumber(fontSize)\n\n        if (this.dom.newLined) {\n          this.attr('x', self.attr('x'))\n\n          if (this.text() === '\\n') {\n            blankLineOffset += dy\n          } else {\n            this.attr('dy', i ? dy + blankLineOffset : 0)\n            blankLineOffset = 0\n          }\n        }\n      })\n\n      this.fire('rebuild')\n    }\n\n    return this\n  }\n\n  // overwrite method from parent to set data properly\n  setData(o) {\n    this.dom = o\n    this.dom.leading = new SVGNumber(o.leading || 1.3)\n    return this\n  }\n\n  writeDataToDom() {\n    writeDataToDom(this, this.dom, { leading: 1.3 })\n    return this\n  }\n\n  // Set the text content\n  text(text) {\n    // act as getter\n    if (text === undefined) {\n      const children = this.node.childNodes\n      let firstLine = 0\n      text = ''\n\n      for (let i = 0, len = children.length; i < len; ++i) {\n        // skip textPaths - they are no lines\n        if (children[i].nodeName === 'textPath' || isDescriptive(children[i])) {\n          if (i === 0) firstLine = i + 1\n          continue\n        }\n\n        // add newline if its not the first child and newLined is set to true\n        if (\n          i !== firstLine &&\n          children[i].nodeType !== 3 &&\n          adopt(children[i]).dom.newLined === true\n        ) {\n          text += '\\n'\n        }\n\n        // add content of this node\n        text += children[i].textContent\n      }\n\n      return text\n    }\n\n    // remove existing content\n    this.clear().build(true)\n\n    if (typeof text === 'function') {\n      // call block\n      text.call(this, this)\n    } else {\n      // store text and make sure text is not blank\n      text = (text + '').split('\\n')\n\n      // build new lines\n      for (let j = 0, jl = text.length; j < jl; j++) {\n        this.newLine(text[j])\n      }\n    }\n\n    // disable build mode and rebuild lines\n    return this.build(false).rebuild()\n  }\n}\n\nextend(Text, textable)\n\nregisterMethods({\n  Container: {\n    // Create text element\n    text: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).text(text)\n    }),\n\n    // Create plain text element\n    plain: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).plain(text)\n    })\n  }\n})\n\nregister(Text, 'Text')\n","import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { globals } from '../utils/window.js'\nimport { registerMethods } from '../utils/methods.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport Shape from './Shape.js'\nimport Text from './Text.js'\nimport * as textable from '../modules/core/textable.js'\n\nexport default class Tspan extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('tspan', node), attrs)\n    this._build = false // disable build mode for adding multiple lines\n  }\n\n  // Shortcut dx\n  dx(dx) {\n    return this.attr('dx', dx)\n  }\n\n  // Shortcut dy\n  dy(dy) {\n    return this.attr('dy', dy)\n  }\n\n  // Create new line\n  newLine() {\n    // mark new line\n    this.dom.newLined = true\n\n    // fetch parent\n    const text = this.parent()\n\n    // early return in case we are not in a text element\n    if (!(text instanceof Text)) {\n      return this\n    }\n\n    const i = text.index(this)\n\n    const fontSize = globals.window\n      .getComputedStyle(this.node)\n      .getPropertyValue('font-size')\n    const dy = text.dom.leading * new SVGNumber(fontSize)\n\n    // apply new position\n    return this.dy(i ? dy : 0).attr('x', text.x())\n  }\n\n  // Set text content\n  text(text) {\n    if (text == null)\n      return this.node.textContent + (this.dom.newLined ? '\\n' : '')\n\n    if (typeof text === 'function') {\n      this.clear().build(true)\n      text.call(this, this)\n      this.build(false)\n    } else {\n      this.plain(text)\n    }\n\n    return this\n  }\n}\n\nextend(Tspan, textable)\n\nregisterMethods({\n  Tspan: {\n    tspan: wrapWithAttrCheck(function (text = '') {\n      const tspan = new Tspan()\n\n      // clear if build mode is disabled\n      if (!this._build) {\n        this.clear()\n      }\n\n      // add new tspan\n      return this.put(tspan).text(text)\n    })\n  },\n  Text: {\n    newLine: function (text = '') {\n      return this.tspan(text).newLine()\n    }\n  }\n})\n\nregister(Tspan, 'Tspan')\n","import { cx, cy, height, width, x, y } from '../modules/core/circled.js'\nimport {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport Shape from './Shape.js'\n\nexport default class Circle extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('circle', node), attrs)\n  }\n\n  radius(r) {\n    return this.attr('r', r)\n  }\n\n  // Radius x value\n  rx(rx) {\n    return this.attr('r', rx)\n  }\n\n  // Alias radius x value\n  ry(ry) {\n    return this.rx(ry)\n  }\n\n  size(size) {\n    return this.radius(new SVGNumber(size).divide(2))\n  }\n}\n\nextend(Circle, { x, y, cx, cy, width, height })\n\nregisterMethods({\n  Container: {\n    // Create circle element\n    circle: wrapWithAttrCheck(function (size = 0) {\n      return this.put(new Circle()).size(size).move(0, 0)\n    })\n  }\n})\n\nregister(Circle, 'Circle')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\nimport baseFind from '../modules/core/selector.js'\n\nexport default class ClipPath extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('clipPath', node), attrs)\n  }\n\n  // Unclip all clipped elements and remove itself\n  remove() {\n    // unclip all targets\n    this.targets().forEach(function (el) {\n      el.unclip()\n    })\n\n    // remove clipPath from parent\n    return super.remove()\n  }\n\n  targets() {\n    return baseFind('svg [clip-path*=' + this.id() + ']')\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create clipping element\n    clip: wrapWithAttrCheck(function () {\n      return this.defs().put(new ClipPath())\n    })\n  },\n  Element: {\n    // Distribute clipPath to svg element\n    clipper() {\n      return this.reference('clip-path')\n    },\n\n    clipWith(element) {\n      // use given clip or create a new one\n      const clipper =\n        element instanceof ClipPath\n          ? element\n          : this.parent().clip().add(element)\n\n      // apply mask\n      return this.attr('clip-path', 'url(#' + clipper.id() + ')')\n    },\n\n    // Unclip element\n    unclip() {\n      return this.attr('clip-path', null)\n    }\n  }\n})\n\nregister(ClipPath, 'ClipPath')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Element from './Element.js'\n\nexport default class ForeignObject extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('foreignObject', node), attrs)\n  }\n}\n\nregisterMethods({\n  Container: {\n    foreignObject: wrapWithAttrCheck(function (width, height) {\n      return this.put(new ForeignObject()).size(width, height)\n    })\n  }\n})\n\nregister(ForeignObject, 'ForeignObject')\n","import Matrix from '../../types/Matrix.js'\nimport Point from '../../types/Point.js'\nimport Box from '../../types/Box.js'\nimport { proportionalSize } from '../../utils/utils.js'\nimport { getWindow } from '../../utils/window.js'\n\nexport function dmove(dx, dy) {\n  this.children().forEach((child) => {\n    let bbox\n\n    // We have to wrap this for elements that dont have a bbox\n    // e.g. title and other descriptive elements\n    try {\n      // Get the childs bbox\n      // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1905039\n      // Because bbox for nested svgs returns the contents bbox in the coordinate space of the svg itself (weird!), we cant use bbox for svgs\n      // Therefore we have to use getBoundingClientRect. But THAT is broken (as explained in the bug).\n      // Funnily enough the broken behavior would work for us but that breaks it in chrome\n      // So we have to replicate the broken behavior of FF by just reading the attributes of the svg itself\n      bbox =\n        child.node instanceof getWindow().SVGSVGElement\n          ? new Box(child.attr(['x', 'y', 'width', 'height']))\n          : child.bbox()\n    } catch (e) {\n      return\n    }\n\n    // Get childs matrix\n    const m = new Matrix(child)\n    // Translate childs matrix by amount and\n    // transform it back into parents space\n    const matrix = m.translate(dx, dy).transform(m.inverse())\n    // Calculate new x and y from old box\n    const p = new Point(bbox.x, bbox.y).transform(matrix)\n    // Move element\n    child.move(p.x, p.y)\n  })\n\n  return this\n}\n\nexport function dx(dx) {\n  return this.dmove(dx, 0)\n}\n\nexport function dy(dy) {\n  return this.dmove(0, dy)\n}\n\nexport function height(height, box = this.bbox()) {\n  if (height == null) return box.height\n  return this.size(box.width, height, box)\n}\n\nexport function move(x = 0, y = 0, box = this.bbox()) {\n  const dx = x - box.x\n  const dy = y - box.y\n\n  return this.dmove(dx, dy)\n}\n\nexport function size(width, height, box = this.bbox()) {\n  const p = proportionalSize(this, width, height, box)\n  const scaleX = p.width / box.width\n  const scaleY = p.height / box.height\n\n  this.children().forEach((child) => {\n    const o = new Point(box).transform(new Matrix(child).inverse())\n    child.scale(scaleX, scaleY, o.x, o.y)\n  })\n\n  return this\n}\n\nexport function width(width, box = this.bbox()) {\n  if (width == null) return box.width\n  return this.size(width, box.height, box)\n}\n\nexport function x(x, box = this.bbox()) {\n  if (x == null) return box.x\n  return this.move(x, box.y, box)\n}\n\nexport function y(y, box = this.bbox()) {\n  if (y == null) return box.y\n  return this.move(box.x, y, box)\n}\n","import {\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck,\n  extend\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\nimport * as containerGeometry from '../modules/core/containerGeometry.js'\n\nexport default class G extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('g', node), attrs)\n  }\n}\n\nextend(G, containerGeometry)\n\nregisterMethods({\n  Container: {\n    // Create a group element\n    group: wrapWithAttrCheck(function () {\n      return this.put(new G())\n    })\n  }\n})\n\nregister(G, 'G')\n","import {\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck,\n  extend\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { xlink } from '../modules/core/namespaces.js'\nimport Container from './Container.js'\nimport * as containerGeometry from '../modules/core/containerGeometry.js'\n\nexport default class A extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('a', node), attrs)\n  }\n\n  // Link target attribute\n  target(target) {\n    return this.attr('target', target)\n  }\n\n  // Link url\n  to(url) {\n    return this.attr('href', url, xlink)\n  }\n}\n\nextend(A, containerGeometry)\n\nregisterMethods({\n  Container: {\n    // Create a hyperlink element\n    link: wrapWithAttrCheck(function (url) {\n      return this.put(new A()).to(url)\n    })\n  },\n  Element: {\n    unlink() {\n      const link = this.linker()\n\n      if (!link) return this\n\n      const parent = link.parent()\n\n      if (!parent) {\n        return this.remove()\n      }\n\n      const index = parent.index(link)\n      parent.add(this, index)\n\n      link.remove()\n      return this\n    },\n    linkTo(url) {\n      // reuse old link if possible\n      let link = this.linker()\n\n      if (!link) {\n        link = new A()\n        this.wrap(link)\n      }\n\n      if (typeof url === 'function') {\n        url.call(link, link)\n      } else {\n        link.to(url)\n      }\n\n      return this\n    },\n    linker() {\n      const link = this.parent()\n      if (link && link.node.nodeName.toLowerCase() === 'a') {\n        return link\n      }\n\n      return null\n    }\n  }\n})\n\nregister(A, 'A')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport Container from './Container.js'\nimport baseFind from '../modules/core/selector.js'\n\nexport default class Mask extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('mask', node), attrs)\n  }\n\n  // Unmask all masked elements and remove itself\n  remove() {\n    // unmask all targets\n    this.targets().forEach(function (el) {\n      el.unmask()\n    })\n\n    // remove mask from parent\n    return super.remove()\n  }\n\n  targets() {\n    return baseFind('svg [mask*=' + this.id() + ']')\n  }\n}\n\nregisterMethods({\n  Container: {\n    mask: wrapWithAttrCheck(function () {\n      return this.defs().put(new Mask())\n    })\n  },\n  Element: {\n    // Distribute mask to svg element\n    masker() {\n      return this.reference('mask')\n    },\n\n    maskWith(element) {\n      // use given mask or create a new one\n      const masker =\n        element instanceof Mask ? element : this.parent().mask().add(element)\n\n      // apply mask\n      return this.attr('mask', 'url(#' + masker.id() + ')')\n    },\n\n    // Unmask element\n    unmask() {\n      return this.attr('mask', null)\n    }\n  }\n})\n\nregister(Mask, 'Mask')\n","import { nodeOrNew, register } from '../utils/adopter.js'\nimport Element from './Element.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport { registerMethods } from '../utils/methods.js'\n\nexport default class Stop extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('stop', node), attrs)\n  }\n\n  // add color stops\n  update(o) {\n    if (typeof o === 'number' || o instanceof SVGNumber) {\n      o = {\n        offset: arguments[0],\n        color: arguments[1],\n        opacity: arguments[2]\n      }\n    }\n\n    // set attributes\n    if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n    if (o.color != null) this.attr('stop-color', o.color)\n    if (o.offset != null) this.attr('offset', new SVGNumber(o.offset))\n\n    return this\n  }\n}\n\nregisterMethods({\n  Gradient: {\n    // Add a color stop\n    stop: function (offset, color, opacity) {\n      return this.put(new Stop()).update(offset, color, opacity)\n    }\n  }\n})\n\nregister(Stop, 'Stop')\n","import { nodeOrNew, register } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { unCamelCase } from '../utils/utils.js'\nimport Element from './Element.js'\n\nfunction cssRule(selector, rule) {\n  if (!selector) return ''\n  if (!rule) return selector\n\n  let ret = selector + '{'\n\n  for (const i in rule) {\n    ret += unCamelCase(i) + ':' + rule[i] + ';'\n  }\n\n  ret += '}'\n\n  return ret\n}\n\nexport default class Style extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('style', node), attrs)\n  }\n\n  addText(w = '') {\n    this.node.textContent += w\n    return this\n  }\n\n  font(name, src, params = {}) {\n    return this.rule('@font-face', {\n      fontFamily: name,\n      src: src,\n      ...params\n    })\n  }\n\n  rule(selector, obj) {\n    return this.addText(cssRule(selector, obj))\n  }\n}\n\nregisterMethods('Dom', {\n  style(selector, obj) {\n    return this.put(new Style()).rule(selector, obj)\n  },\n  fontface(name, src, params) {\n    return this.put(new Style()).font(name, src, params)\n  }\n})\n\nregister(Style, 'Style')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { xlink } from '../modules/core/namespaces.js'\nimport Path from './Path.js'\nimport PathArray from '../types/PathArray.js'\nimport Text from './Text.js'\nimport baseFind from '../modules/core/selector.js'\n\nexport default class TextPath extends Text {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('textPath', node), attrs)\n  }\n\n  // return the array of the path track element\n  array() {\n    const track = this.track()\n\n    return track ? track.array() : null\n  }\n\n  // Plot path if any\n  plot(d) {\n    const track = this.track()\n    let pathArray = null\n\n    if (track) {\n      pathArray = track.plot(d)\n    }\n\n    return d == null ? pathArray : this\n  }\n\n  // Get the path element\n  track() {\n    return this.reference('href')\n  }\n}\n\nregisterMethods({\n  Container: {\n    textPath: wrapWithAttrCheck(function (text, path) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = this.text(text)\n      }\n\n      return text.path(path)\n    })\n  },\n  Text: {\n    // Create path for text to run on\n    path: wrapWithAttrCheck(function (track, importNodes = true) {\n      const textPath = new TextPath()\n\n      // if track is a path, reuse it\n      if (!(track instanceof Path)) {\n        // create path element\n        track = this.defs().path(track)\n      }\n\n      // link textPath to path and add content\n      textPath.attr('href', '#' + track, xlink)\n\n      // Transplant all nodes from text to textPath\n      let node\n      if (importNodes) {\n        while ((node = this.node.firstChild)) {\n          textPath.node.appendChild(node)\n        }\n      }\n\n      // add textPath element as child node and return textPath\n      return this.put(textPath)\n    }),\n\n    // Get the textPath children\n    textPath() {\n      return this.findOne('textPath')\n    }\n  },\n  Path: {\n    // creates a textPath from this path\n    text: wrapWithAttrCheck(function (text) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = new Text().addTo(this.parent()).text(text)\n      }\n\n      // Create textPath from text and path and return\n      return text.path(this)\n    }),\n\n    targets() {\n      return baseFind('svg textPath').filter((node) => {\n        return (node.attr('href') || '').includes(this.id())\n      })\n\n      // Does not work in IE11. Use when IE support is dropped\n      // return baseFind('svg textPath[*|href*=' + this.id() + ']')\n    }\n  }\n})\n\nTextPath.prototype.MorphArray = PathArray\nregister(TextPath, 'TextPath')\n","import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { xlink } from '../modules/core/namespaces.js'\nimport Shape from './Shape.js'\n\nexport default class Use extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('use', node), attrs)\n  }\n\n  // Use element as a reference\n  use(element, file) {\n    // Set lined element\n    return this.attr('href', (file || '') + '#' + element, xlink)\n  }\n}\n\nregisterMethods({\n  Container: {\n    // Create a use element\n    use: wrapWithAttrCheck(function (element, file) {\n      return this.put(new Use()).use(element, file)\n    })\n  }\n})\n\nregister(Use, 'Use')\n","/* Optional Modules */\nimport './modules/optional/arrange.js'\nimport './modules/optional/class.js'\nimport './modules/optional/css.js'\nimport './modules/optional/data.js'\nimport './modules/optional/memory.js'\nimport './modules/optional/sugar.js'\nimport './modules/optional/transform.js'\n\nimport { extend, makeInstance } from './utils/adopter.js'\nimport { getMethodNames, getMethodsFor } from './utils/methods.js'\nimport Box from './types/Box.js'\nimport Color from './types/Color.js'\nimport Container from './elements/Container.js'\nimport Defs from './elements/Defs.js'\nimport Dom from './elements/Dom.js'\nimport Element from './elements/Element.js'\nimport Ellipse from './elements/Ellipse.js'\nimport EventTarget from './types/EventTarget.js'\nimport Fragment from './elements/Fragment.js'\nimport Gradient from './elements/Gradient.js'\nimport Image from './elements/Image.js'\nimport Line from './elements/Line.js'\nimport List from './types/List.js'\nimport Marker from './elements/Marker.js'\nimport Matrix from './types/Matrix.js'\nimport Morphable, {\n  NonMorphable,\n  ObjectBag,\n  TransformBag,\n  makeMorphable,\n  registerMorphableType\n} from './animation/Morphable.js'\nimport Path from './elements/Path.js'\nimport PathArray from './types/PathArray.js'\nimport Pattern from './elements/Pattern.js'\nimport PointArray from './types/PointArray.js'\nimport Point from './types/Point.js'\nimport Polygon from './elements/Polygon.js'\nimport Polyline from './elements/Polyline.js'\nimport Rect from './elements/Rect.js'\nimport Runner from './animation/Runner.js'\nimport SVGArray from './types/SVGArray.js'\nimport SVGNumber from './types/SVGNumber.js'\nimport Shape from './elements/Shape.js'\nimport Svg from './elements/Svg.js'\nimport Symbol from './elements/Symbol.js'\nimport Text from './elements/Text.js'\nimport Tspan from './elements/Tspan.js'\nimport * as defaults from './modules/core/defaults.js'\nimport * as utils from './utils/utils.js'\nimport * as namespaces from './modules/core/namespaces.js'\nimport * as regex from './modules/core/regex.js'\n\nexport {\n  Morphable,\n  registerMorphableType,\n  makeMorphable,\n  TransformBag,\n  ObjectBag,\n  NonMorphable\n}\n\nexport { defaults, utils, namespaces, regex }\nexport const SVG = makeInstance\nexport { default as parser } from './modules/core/parser.js'\nexport { default as find } from './modules/core/selector.js'\nexport * from './modules/core/event.js'\nexport * from './utils/adopter.js'\nexport {\n  getWindow,\n  registerWindow,\n  restoreWindow,\n  saveWindow,\n  withWindow\n} from './utils/window.js'\n\n/* Animation Modules */\nexport { default as Animator } from './animation/Animator.js'\nexport {\n  Controller,\n  Ease,\n  PID,\n  Spring,\n  easing\n} from './animation/Controller.js'\nexport { default as Queue } from './animation/Queue.js'\nexport { default as Runner } from './animation/Runner.js'\nexport { default as Timeline } from './animation/Timeline.js'\n\n/* Types */\nexport { default as Array } from './types/SVGArray.js'\nexport { default as Box } from './types/Box.js'\nexport { default as Color } from './types/Color.js'\nexport { default as EventTarget } from './types/EventTarget.js'\nexport { default as Matrix } from './types/Matrix.js'\nexport { default as Number } from './types/SVGNumber.js'\nexport { default as PathArray } from './types/PathArray.js'\nexport { default as Point } from './types/Point.js'\nexport { default as PointArray } from './types/PointArray.js'\nexport { default as List } from './types/List.js'\n\n/* Elements */\nexport { default as Circle } from './elements/Circle.js'\nexport { default as ClipPath } from './elements/ClipPath.js'\nexport { default as Container } from './elements/Container.js'\nexport { default as Defs } from './elements/Defs.js'\nexport { default as Dom } from './elements/Dom.js'\nexport { default as Element } from './elements/Element.js'\nexport { default as Ellipse } from './elements/Ellipse.js'\nexport { default as ForeignObject } from './elements/ForeignObject.js'\nexport { default as Fragment } from './elements/Fragment.js'\nexport { default as Gradient } from './elements/Gradient.js'\nexport { default as G } from './elements/G.js'\nexport { default as A } from './elements/A.js'\nexport { default as Image } from './elements/Image.js'\nexport { default as Line } from './elements/Line.js'\nexport { default as Marker } from './elements/Marker.js'\nexport { default as Mask } from './elements/Mask.js'\nexport { default as Path } from './elements/Path.js'\nexport { default as Pattern } from './elements/Pattern.js'\nexport { default as Polygon } from './elements/Polygon.js'\nexport { default as Polyline } from './elements/Polyline.js'\nexport { default as Rect } from './elements/Rect.js'\nexport { default as Shape } from './elements/Shape.js'\nexport { default as Stop } from './elements/Stop.js'\nexport { default as Style } from './elements/Style.js'\nexport { default as Svg } from './elements/Svg.js'\nexport { default as Symbol } from './elements/Symbol.js'\nexport { default as Text } from './elements/Text.js'\nexport { default as TextPath } from './elements/TextPath.js'\nexport { default as Tspan } from './elements/Tspan.js'\nexport { default as Use } from './elements/Use.js'\n\nextend([Svg, Symbol, Image, Pattern, Marker], getMethodsFor('viewbox'))\n\nextend([Line, Polyline, Polygon, Path], getMethodsFor('marker'))\n\nextend(Text, getMethodsFor('Text'))\nextend(Path, getMethodsFor('Path'))\n\nextend(Defs, getMethodsFor('Defs'))\n\nextend([Text, Tspan], getMethodsFor('Tspan'))\n\nextend([Rect, Ellipse, Gradient, Runner], getMethodsFor('radius'))\n\nextend(EventTarget, getMethodsFor('EventTarget'))\nextend(Dom, getMethodsFor('Dom'))\nextend(Element, getMethodsFor('Element'))\nextend(Shape, getMethodsFor('Shape'))\nextend([Container, Fragment], getMethodsFor('Container'))\nextend(Gradient, getMethodsFor('Gradient'))\n\nextend(Runner, getMethodsFor('Runner'))\n\nList.extend(getMethodNames())\n\nregisterMorphableType([\n  SVGNumber,\n  Color,\n  Box,\n  Matrix,\n  SVGArray,\n  PointArray,\n  PathArray,\n  Point\n])\n\nmakeMorphable()\n","// This file contains the code for loading and displaying Max patches in a web environment.\n\n// IMPORTS\n\nimport { newobj } from './boxes/newobj.js';\nimport { message } from './boxes/message.js';\nimport { button } from './boxes/button.js';\nimport { toggle } from './boxes/toggle.js';\nimport { cable } from './boxes/cable.js';\n\nconst lockClosed = \"https://drive.google.com/thumbnail?id=1zQwPvHrYKghE_opclwL80laIUqUxO9EI\";\nconst lockOpen   = \"https://drive.google.com/thumbnail?id=1y4ASdz4leHQ9_gS_lJ70QU0LZgJlDBnt\";\n\n//function to load a Max patch from a .maxpat file, workspaceId is the id of the workspace element in the HTML file\nexport async function loadPatch(workspaceId, maxpatFile) {\n    // Create switch for locking the patch\n    console.log(`Loading patch from file \"${maxpatFile}\" in workspace \"${workspaceId}\"`);\n    const workspace = document.getElementById(workspaceId);\n    const workspaceRect = workspace.getBoundingClientRect();\n\n    const lock = document.createElement(\"div\");\n    lock.id = `${workspaceId}_lock`;\n    lock.style.position = \"absolute\";\n    lock.style.width = \"30px\";\n    lock.style.height = \"30px\";\n    lock.style.left = workspaceRect.x + 3 + \"px\";\n    lock.style.top = workspaceRect.y + workspaceRect.height - 34 + \"px\";\n\n    const lockImage = document.createElement(\"img\");\n    lockImage.src = lockClosed;\n    lockImage.style.width = \"100%\";\n    lockImage.style.height = \"100%\";\n\n    lock.appendChild(lockImage);\n    workspace.parentNode.appendChild(lock);\n\n    // Update overlay position on window resize\n    window.addEventListener(\"resize\", () => updateOverlayPosition(workspaceId));\n\n    // Function to handle lock click\n    lock.addEventListener(\"click\", () => setLockState(workspaceId));\n\n    if (!window.lockState) {\n        window.lockState = {};\n    }\n    window.lockState[workspaceId] = 1;\n\n    // Creates a variable to store the instances, indexed by box Id\n    if (!window.instances) {\n        window.instances = {};\n    }\n    window.instances[workspaceId] = new Map();\n    const workspaceInstances = window.instances[workspaceId];\n    // Creates a variable to store the workspace connections, indexed by box Id and inlet index\n    if (!window.connections) {\n        window.connections = {};\n    }\n    window.connections[workspaceId] = new Map();\n    const workspaceConnections = window.connections[workspaceId];\n    \n    // Fetch the JSON data from the .maxpat file\n    try {\n        const response = await fetch(maxpatFile);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const patchData = await response.json();\n\n        // Creating boxes \n        patchData.patcher.boxes.reverse(); // Reverse the order of boxes to render them in the Max-like sequence\n        patchData.patcher.boxes.forEach(boxElement => {\n            // Create a new instance of the box class based on its maxclass and store it in the instances map\n            if (boxElement.box.maxclass === 'newobj') {\n                workspaceInstances.set(boxElement.box.id, new newobj(workspaceId, boxElement.box));\n            }\n            else if (boxElement.box.maxclass === 'message') {\n                workspaceInstances.set(boxElement.box.id, new message(workspaceId, boxElement.box));\n            }\n            else if (boxElement.box.maxclass === 'button') {\n                workspaceInstances.set(boxElement.box.id, new button(workspaceId, boxElement.box));\n            }\n            else if (boxElement.box.maxclass === 'toggle') {\n                workspaceInstances.set(boxElement.box.id, new toggle(workspaceId, boxElement.box));\n            }\n        });\n\n        // Creating connections\n        patchData.patcher.lines.forEach(line => {\n            // The key is created using the source box ID and outlet index, separated by a colon (e.g., \"boxId:outletIndex\").\n            const key = `${line.patchline.source[0]}:${line.patchline.source[1]}`;\n            if (!workspaceConnections.has(key)) workspaceConnections.set(key, []); // Initialize the connections array for the source box if it doesn't exist\n            workspaceConnections.get(key).push(line.patchline.destination); // Add the destination box to the connections array\n\n            // Create the connection cable instance and store it in the instances map\n            const instanceKey = `cable_source:${line.patchline.source[0]}:${line.patchline.source[1]}:cable_destination:${line.patchline.destination[0]}:${line.patchline.destination[1]}`;\n            workspaceInstances.set(instanceKey, new cable(workspaceId, line.patchline.source, line.patchline.destination));\n        });\n    } catch (error) {\n        console.error(`Error loading the patch from file \"${maxpatFile}\" in ${workspaceId}:`, error);\n    }\n}\n\nfunction updateOverlayPosition(workspaceId) {\n    const workspace = document.getElementById(workspaceId);\n    const workspaceRect = workspace.getBoundingClientRect();\n\n    const lock = document.getElementById(`${workspaceId}_lock`);\n    lock.style.left = workspaceRect.x + 3 + \"px\";\n    lock.style.top = workspaceRect.y + workspaceRect.height - 34 + \"px\";\n}\n\nfunction setLockState(workspaceId) {\n    const lock = document.getElementById(`${workspaceId}_lock`);\n    const lockImage = lock.querySelector(\"img\");\n\n    if (window.lockState[workspaceId] == 1) {\n        window.lockState[workspaceId] = 0;\n        lockImage.src = lockClosed;\n    } else if (window.lockState[workspaceId] == 0) {\n        window.lockState[workspaceId] = 1;\n        lockImage.src = lockOpen;\n    }\n    \n    document.dispatchEvent(new CustomEvent(\"lockChange\", {\n        detail: {\n            workspace: workspaceId,\n            state: window.lockState[workspaceId],\n        }\n    }));\n}","// Max Class: newobj\nimport { objectRegistry } from \"../objects/objects.js\";\nimport { SVG } from '@svgdotjs/svg.js';\nimport '@svgdotjs/svg.draggable.js';\n\nexport class newobj {\n    constructor(workspaceId, data) {\n        this.data = data;\n        this.workspaceId = workspaceId;\n        this.id = data.id;\n        this.maxclass = 'newobj';\n        this.numInlets = data.numinlets;\n        this.numOutlets = data.numoutlets;\n        this.outletType = data.outlettype;\n        this.patchingRect = data.patching_rect;\n        this.inletsPos = [];\n        this.outletsPos = [];\n        this.initialRect = [...this.patchingRect];\n\n        this.text = data.text || \"\";\n        this.textWords = this.text.trim().split(/\\s+/);\n        this.objectName = this.textWords[0] || \"\\u200A\";\n\n        this.createBox();\n        this.createCircles();\n        this.createLogicInstance();\n        this.applyTextColors();\n\n        this.selected = false;\n        this.editing = false;\n    }\n\n    // Method to create a new instance of the logic class based on the first word of the text\n    createLogicInstance() {\n        const redRect = this.svgElement.querySelector(\"rect:nth-child(4)\");\n        const objectClass = objectRegistry[this.textWords[0]];\n        const workspaceInstances = window.instances[this.workspaceId];\n        \n        if (!objectClass) {\n            console.warn(`Object class not found for \"${this.textWords[0]}\"`);\n            this.logic = null;\n            redRect.setAttribute(\"opacity\", \"0.35\");\n            this.numInlets = 0;\n            this.numOutlets = 0;\n            this.createCircles();\n            this.updateCables();\n        } else if (this.textWords[0] == \"toggle\") {\n            this.svgElement.parentNode.removeChild(this.svgElement);\n            this.data.patching_rect[2] = \"24\";\n            this.data.patching_rect[3] = \"24\";\n            workspaceInstances.set(this.id, new objectClass(this.workspaceId, this.data));\n            this.numInlets = 1;\n            this.numOutlets = 1;\n            this.createCircles();\n            this.updateCables();\n        } else if (this.textWords[0] == \"button\") {\n            this.svgElement.parentNode.removeChild(this.svgElement);\n            this.data.patching_rect[2] = \"24\";\n            this.data.patching_rect[3] = \"24\";\n            workspaceInstances.set(this.id, new objectClass(this.workspaceId, this.data));\n            this.numInlets = 1;\n            this.numOutlets = 1;\n            this.createCircles();\n            this.updateCables();\n        } else {\n            this.logic = new objectClass(this);\n            redRect.setAttribute(\"opacity\", \"0\");\n            this.numInlets = this.logic.numInlets;\n            this.numOutlets = this.logic.numOutlets;\n            this.createCircles();\n            this.updateCables();\n        }\n    }\n\n    // Method to update the logic instance if the text changes\n    updateLogic() {\n        const box = this.svgElement;\n        const div = box.querySelector('foreignObject')\n          .querySelector('div');\n        const text = div.textContent;\n        if (text.trim() !== this.text) {\n            this.text = text;\n            this.textWords = text.trim().split(/\\s+/);\n            if (this.logic?.stop) this.logic.stop();\n            this.createLogicInstance();\n        }\n\n        // Update connections to remove any that are out of range\n        const connections = window.connections[this.workspaceId];\n\n        const sources = Array.from(connections.keys()).filter(key => {\n            return (key.includes(`${this.id}:`));\n        });\n        sources.forEach(key => {\n            if (parseInt(key.split(\":\")[1], 10) >= this.numOutlets) {\n                connections.delete(key);\n            }\n        });\n        connections.forEach((value, key) => {\n            value.forEach(destination => {\n                if (destination[0] == this.id && destination[1] >= this.numInlets) {\n                    connections.get(key).splice(value.indexOf(destination), 1);\n                }\n            });\n        });\n    }\n\n    receive(data, inletIndex = 0) {\n        this.logic?.receive(data, inletIndex);\n    }\n\n    send(data, outletIndex = 0) {\n        const key = `${this.id}:${outletIndex}`;\n        const connections = window.connections[this.workspaceId];\n        const instances = window.instances[this.workspaceId];\n\n        if (connections?.get(key)) {\n            // Collect destinations with the X coordinates of the inlets\n            const destinations = [];\n\n            connections.get(key).forEach(destinationArray => {\n                const destinationId = destinationArray[0];\n                const inletIndex = destinationArray[1];\n                const destinationObject = instances.get(destinationId);\n\n                // Set the correct send order based on the X coordinate of the inlet\n                if (destinationObject) {\n                    const inletPos = destinationObject.inletsPos[inletIndex];\n                    if (inletPos) {\n                        destinations.push({\n                            destinationObject,\n                            inletIndex,\n                            x: inletPos[0],\n                            y: inletPos[1]\n                        });\n                    }\n                }\n            });\n\n            // Sort from rightmost (higher x) to leftmost (lower x)\n            destinations.sort((a, b) => {\n                if (b.x !== a.x) return b.x - a.x;       // rightmost first\n                return a.y - b.y;                        // if x is the same, sort by y (top to bottom)\n            });\n\n            // Call receive in the right order\n            destinations.forEach(dest => {\n                dest.destinationObject.receive(data, dest.inletIndex);\n            });\n        }\n    }\n\n    // Method to create the SVG box for the object\n    createBox() {\n        const svgNS = \"http://www.w3.org/2000/svg\";\n        const box = document.createElementNS(svgNS, \"g\");\n        box.setAttribute(\"transform\", `translate(${this.patchingRect[0]}, ${this.patchingRect[1]})`);\n        box.onclick = () => {\n            if(div.textContent.trim() === \"\") {\n                div.innerHTML = \"\\u200A\";\n            }\n        }\n        \n        const outerRect = document.createElementNS(svgNS, \"rect\");\n        outerRect.setAttribute(\"width\", this.patchingRect[2]);\n        outerRect.setAttribute(\"height\", this.patchingRect[3]);\n        outerRect.setAttribute(\"fill\", \"#909090\");\n        box.appendChild(outerRect);\n        \n        const innerRect = document.createElementNS(svgNS, \"rect\");\n        innerRect.setAttribute(\"width\", this.patchingRect[2]);\n        innerRect.setAttribute(\"height\", this.patchingRect[3] - 8);\n        innerRect.setAttribute(\"y\", 4);\n        innerRect.setAttribute(\"fill\", \"#292929\");\n        box.appendChild(innerRect);\n        \n        const foreignObject = document.createElementNS(svgNS, \"foreignObject\");\n        foreignObject.setAttribute(\"width\", this.patchingRect[2] - 8);\n        foreignObject.setAttribute(\"height\", this.patchingRect[3]);\n        foreignObject.setAttribute(\"x\", 4);\n        foreignObject.setAttribute(\"y\", 4.6);\n        \n        const div = document.createElement(\"div\");\n        div.innerText = this.text;\n        div.setAttribute(\"contenteditable\", `${!window.lockState[this.workspaceId]}`);\n        div.style.display = \"inline-block\";\n        div.style.verticalAlign = \"top\";\n        div.style.wordBreak = \"break-word\";\n        div.style.whiteSpace = \"wrap\";\n        div.style.fontSize = \"12px\";\n        div.style.color = \"#f7f7f7\";\n        div.style.lineHeight = \"13.2px\";\n        div.style.fontFamily = \"Arial, sans-serif\";\n        div.style.fontWeight = \"normal\";\n        div.style.outline = \"none\";\n        div.style.border = \"none\";\n        div.oninput = () => this.resizeOnInput();\n        div.onkeydown = (event) => this.EnterKey(event);\n        div.onblur = () => {\n            this.applyTextColors();\n            this.updateLogic();\n            draw.draggable(window.lockState[this.workspaceId] == 0);\n        }\n        foreignObject.appendChild(div);\n        box.appendChild(foreignObject);\n\n        // Red rectangle to indicate the object is not a valid object (opacity controlled by createLogicInstance)\n        const redRect = document.createElementNS(svgNS, \"rect\");\n        redRect.setAttribute(\"width\", this.patchingRect[2]);\n        redRect.setAttribute(\"height\", this.patchingRect[3]);\n        redRect.setAttribute(\"fill\", \"#ffa000\");\n        redRect.setAttribute(\"pointer-events\", \"none\");\n        box.appendChild(redRect);\n        \n        this.svgElement = box;\n        document.getElementById(this.workspaceId).appendChild(this.svgElement);\n\n        // Implement svg.draggable.js on svgElement\n        const draw = SVG(this.svgElement);\n\n        draw.draggable(false);\n\n        draw.on('dragmove', (event) => {\n\n            const { box } = event.detail;\n\n            this.patchingRect[0] = this.initialRect[0] + box.x;\n            this.patchingRect[1] = this.initialRect[1] + box.y;\n\n            this.updateCables();\n        });\n\n        document.addEventListener(\"lockChange\", (e) => {\n            if (e.detail.workspace == this.workspaceId) {\n                this.onLockChange(e.detail.state);\n            }\n        });\n    }\n\n    onLockChange(state) {\n        const box = this.svgElement;\n        const div = box.querySelector(\"div\");\n        const draw = SVG(this.svgElement);\n\n        if (state == 1) {\n            div.setAttribute(\"contenteditable\", \"false\");\n            div.setAttribute(\"contentselectable\", \"false\");\n            draw.draggable(false);\n            draw.on(\"click\", () => {});\n\n            this.circles.setAttribute(\"opacity\", \"0\");\n        } else if (state == 0) {\n            div.setAttribute(\"contenteditable\", \"true\");\n            div.setAttribute(\"contentselectable\", \"true\");\n            draw.draggable(true);\n            draw.on(\"click\", () => {\n                draw.draggable(false);\n                div.focus(); \n                const range = document.createRange();\n                range.selectNodeContents(div);\n                const sel = window.getSelection();\n                sel.removeAllRanges();\n                sel.addRange(range);\n            });\n\n            this.circles.setAttribute(\"opacity\", \"100\");\n        }\n    }\n    \n    // Method to create the circles for inlets and outlets\n    createCircles() {\n        const svgNS = \"http://www.w3.org/2000/svg\";\n        \n        // Remove existing circles if they exist and initialize arrays\n        if (this.circles) this.circles.remove();\n        this.inletsPos.length = this.numInlets;\n        this.outletsPos.length = this.numOutlets;\n        \n        const box = this.svgElement;\n        const outerRect = box.querySelector(\"rect\");\n        \n        // Create a group for the circles\n        this.circles = document.createElementNS(svgNS, \"g\");\n        this.circles.setAttribute(\"transform\", `translate(-${this.initialRect[0]}, -${this.initialRect[1]})`);\n        \n        // Create inlets circles\n        for (let i = 0; i < this.numInlets; i++) {\n            const path = document.createElementNS(svgNS, \"path\");\n        \n            // Set the position of the circle based on the number of inlets\n            const cx = (this.numInlets === 1)\n            ? 9.5\n            : 9.5 + (parseFloat(outerRect.getAttribute(\"width\")) - 19) * (i / (this.numInlets - 1));\n            const cy = 0;\n            \n            const d = \"M \" + (cx - 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]) +\n                \"A 3.55 3.55 0 0 0\" + (cx + 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]);\n\n            path.setAttribute(\"d\", d);\n            path.setAttribute(\"fill\", \"#dadada\");\n            this.circles.appendChild(path);\n\n            // Store the inlet instance\n            this.inletsPos[i] = [cx, cy];\n        }\n\n        // Create outlets circles\n        for (let i = 0; i < this.numOutlets; i++) {\n            const path = document.createElementNS(svgNS, \"path\");\n    \n            // Set the position of the circle based on the number of outlets\n            const cx = (this.numOutlets === 1)\n                ? 9.5\n                : 9.5 + (parseFloat(outerRect.getAttribute(\"width\")) - 19) * (i / (this.numOutlets - 1));\n            const cy = parseFloat(outerRect.getAttribute(\"height\"));\n\n            const d = \"M \" + (cx - 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]) +\n                \"A 3.55 3.55 0 0 1\" + (cx + 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]);\n\n            path.setAttribute(\"d\", d);\n            path.setAttribute(\"fill\", \"#dadada\");\n            this.circles.appendChild(path);\n\n            //store the outlet instance\n            this.outletsPos[i] = [cx, cy];\n        }\n    \n        this.circles.setAttribute(\"opacity\", `${window.lockState[this.workspaceId] == 0 ? \"100\" : \"0\"}`);\n\n        box.appendChild(this.circles);\n    }\n\n    // Method to resize the box based on the input text\n    resizeOnInput() {\n        const box = this.svgElement;\n        \n        const outerRect = box.querySelector(\"rect\");\n        const innerRect = box.querySelector(\"rect:nth-child(2)\");\n        const redRect = box.querySelector(\"rect:nth-child(4)\");\n        const foreignObject = box.querySelector(\"foreignObject\");\n        const div = foreignObject.querySelector('div');\n\n        // Set the div to nowrap to get all text in one line\n        div.style.wordBreak = \"keep-all\";\n        div.style.whiteSpace = \"nowrap\";\n        // Set the height of the box to one line\n        outerRect.setAttribute(\"height\", 22);\n        innerRect.setAttribute(\"height\", 14);\n        redRect.setAttribute(\"height\", 22);\n        foreignObject.setAttribute(\"height\", 22);\n\n        // Insert a zero-width space if the div is empty\n        // This prevents the div from collapsing to zero width\n        if (div.innerHTML.trim() === \"\") {\n            div.innerHTML = \"\\u200A\";\n        }\n\n        const divLength = div.offsetWidth;\n\n        outerRect.setAttribute(\"width\", Math.max(divLength + 8, 29.5));\n        innerRect.setAttribute(\"width\", Math.max(divLength + 8, 29.5));\n        redRect.setAttribute(\"width\", Math.max(divLength + 8, 29.5));\n        foreignObject.setAttribute(\"width\", Math.max(divLength + 8, 29.5));\n\n        this.createCircles();\n        this.updateCables();\n    }\n\n    // Method to update the cables svg elements\n    updateCables() {\n        const instances = window.instances[this.workspaceId]; //cable instances\n\n        // Update cables for outlets\n        let matchingKeys = instances.keys().filter(key => {\n            return (key.includes(`cable_source:${this.id}:`));\n        });\n        matchingKeys.forEach(key => {\n            const cableInstance = instances.get(key);\n            cableInstance.svgElement.remove();\n            \n            const outlet = key.match(new RegExp(`cable_source:${this.id}:(\\\\d+)`));\n            if (outlet[1] < this.numOutlets) {\n                cableInstance.createCable();\n            } else if (outlet[1] >= this.numOutlets) {\n                instances.delete(key);\n            }\n        });\n\n        // Update cables for inlets\n        matchingKeys = instances.keys().filter(key => {\n            return (key.includes(`cable_destination:${this.id}:`));\n        });\n        matchingKeys.forEach(key => {\n            const cableInstance = instances.get(key);\n            cableInstance.svgElement.remove();\n            \n            const inlet = key.match(new RegExp(`cable_destination:${this.id}:(\\\\d+)`));\n            if (inlet[1] < this.numInlets) {\n                cableInstance.createCable();\n            } else if (inlet[1] >= this.numInlets) {\n                instances.delete(key);\n            }\n        });\n    }\n\n    \n    EnterKey(event) {\n        //prevents the enter key from creating a new line\n        if (event.key === \"Enter\") {\n            event.preventDefault();\n            event.target.blur();\n        }\n    }\n    \n    // Method to apply text colors based on the first word and attributes\n    applyTextColors() {\n        const box = this.svgElement;\n        const div = box.querySelector('foreignObject')\n          .querySelector('div');\n        const text = div.textContent.trim();\n        const words = text.split(/\\s+/);\n        \n        div.innerHTML = \"\";\n        \n        // flag to track if the last words are an attribute value\n        let attributeValue = false;\n        \n        words.forEach((word, index) => {\n            const span = document.createElement(\"span\");\n            span.textContent = word + \" \";\n            if (index === 0) {\n                span.style.color = \"#f6be71\";\n            } else if (attributeValue) {\n                span.style.color = \"#ff5252\";\n            } else if (word.startsWith(\"@\")) {\n                span.style.color = \"#8ec3fc\";\n                attributeValue = true;\n            } else {\n                span.style.color = \"#f7f7f7\";\n            }\n            div.appendChild(span);\n        });\n    }\n}","// Just a registry of objects for the logic instances of newobj class\n\nimport { plus } from './plus.js';\nimport { minus } from './minus.js';\nimport { multiply } from './multiply.js';\nimport { divide } from './divide.js';\nimport { metro } from './metro.js';\nimport { delay } from './delay.js';\nimport { toggle } from '../boxes/toggle.js';\nimport { button } from '../boxes/button.js';\nimport { dummy } from './dummy.js';\n\nexport const objectRegistry = {\n    '+': plus,\n    '-': minus,\n    '*': multiply,\n    '/': divide,\n    'metro': metro,\n    'delay': delay,\n    'toggle': toggle,\n    'button': button,\n    'dummy': dummy,\n  };","// Define the 'plus' class for arithmetic addition\nexport class plus {\n    // Constructor initializes the object with parent properties and parses initial value\n    constructor(parent) {\n        this.workspaceId = parent.workspaceId; // Workspace identifier\n        this.id = parent.id;                   // Object identifier\n        this.textWords = parent.textWords;     // Array of text arguments\n        this.numInlets = 2;                    // Number of inlets\n        this.numOutlets = 1;                   // Number of outlets\n\n        this.value1 = 0;                       // First operand\n\n        // Determine type and value of the second operand based on input\n        if (this.testNumber(this.textWords[1]) === \"int\") {\n            this.value2 = parseInt(this.textWords[1]);\n            this.mode = \"int\";\n        } else if (this.testNumber(this.textWords[1]) === \"float\") {\n            this.value2 = parseFloat(this.textWords[1]);\n            this.mode = \"float\";\n        } else {\n            this.value2 = 0;\n            this.mode = \"int\";\n        }\n    }\n\n    // Handles incoming messages to the object\n    receive(data, inletIndex) {\n        const symbol = data.trim().split(\" \"); // Split message into parts\n\n        if (inletIndex === 0) { // Main inlet\n            switch (symbol[0]) {\n                case \"int\":\n                    this.value1 = symbol[1];\n                    if (symbol[2]) this.value2 = symbol[2];\n                    this.compute();\n                    break;\n                case \"float\":\n                    this.value1 = symbol[1];\n                    if (symbol[2]) this.value2 = symbol[2];\n                    this.compute();\n                    break;\n                case \"bang\": // Trigger computation\n                    this.compute();\n                    break;\n                case \"in1\": // Set second operand\n                    this.value2 = symbol[1];\n                    break;\n                case \"set\": // Set first operand\n                    this.value1 = symbol[1];\n                    break;\n                default:\n                    console.log(\"Unknown message for inlet 0\");\n            }\n        } else if (inletIndex === 1) { // Secondary inlet\n            switch (symbol[0]) {\n                case \"int\":\n                    this.value2 = symbol[1];\n                    break;\n                case \"float\":\n                    this.value2 = symbol[1];\n                    break;\n                default:\n                    console.log(\"Unknown message for inlet 1\");\n            }\n        }\n    }\n\n    // Performs the addition and sends the result\n    compute() {\n        const parent = window.instances[this.workspaceId].get(this.id);\n\n        let result;\n        switch (this.mode) {\n            case \"int\":\n                this.value1 = parseInt(this.value1);\n                this.value2 = parseInt(this.value2);\n                result = this.value1 + this.value2;\n                parent.send(`${this.mode} ${result}`, 0);\n                break;\n            case \"float\":\n                this.value1 = parseFloat(this.value1);\n                this.value2 = parseFloat(this.value2);\n                result = this.value1 + this.value2;\n                // Ensure float output format if result is integer\n                if (this.testNumber(result) === \"int\") {\n                    result = `${result}.`;\n                }\n                parent.send(`${this.mode} ${result}`, 0);\n                break;\n        }\n    }\n\n    // Determines if input is an integer, float, or string\n    testNumber(input) {\n        const str = String(input).trim();\n    \n        if (!/^\\d+(\\.\\d*)?$/.test(str)) {\n          return \"string\";\n        }\n    \n        if (str.includes('.')) {\n          return \"float\";\n        } else {\n          return \"int\";\n        }\n    }\n}","// Define the 'minus' class for subtraction operations\nexport class minus {\n    // Constructor initializes the object with parent properties and parses initial value\n    constructor(parent) {\n        this.workspaceId = parent.workspaceId; // Workspace identifier\n        this.id = parent.id;                   // Unique object ID\n        this.textWords = parent.textWords;     // Array of text arguments\n        this.numInlets = 2;                    // Number of inlets\n        this.numOutlets = 1;                   // Number of outlets\n\n        this.value1 = 0;                       // First operand\n\n        // Determine type and value of the second operand based on input\n        if (this.testNumber(this.textWords[1]) === \"int\") {\n            this.value2 = parseInt(this.textWords[1]);\n            this.mode = \"int\";\n        } else if (this.testNumber(this.textWords[1]) === \"float\") {\n            this.value2 = parseFloat(this.textWords[1]);\n            this.mode = \"float\";\n        } else {\n            this.value2 = 0;\n            this.mode = \"int\";\n        }\n    }\n\n    // Handles incoming messages/data to the object\n    receive(data, inletIndex) {\n        const symbol = data.trim().split(\" \"); // Split message into parts\n\n        if (inletIndex === 0) { // Main inlet\n            switch (symbol[0]) {\n                case \"int\":\n                    this.value1 = symbol[1];\n                    if (symbol[2]) this.value2 = symbol[2];\n                    this.compute();\n                    break;\n                case \"float\":\n                    this.value1 = symbol[1];\n                    if (symbol[2]) this.value2 = symbol[2];\n                    this.compute();\n                    break;\n                case \"bang\": // Trigger computation\n                    this.compute();\n                    break;\n                case \"in1\": // Set second operand\n                    this.value2 = symbol[1];\n                    break;\n                case \"set\": // Set first operand\n                    this.value1 = symbol[1];\n                    break;\n                default:\n                    console.log(\"Unknown message for inlet 0\");\n            }\n        } else if (inletIndex === 1) { // Secondary inlet\n            switch (symbol[0]) {\n                case \"int\":\n                    this.value2 = symbol[1];\n                    break;\n                case \"float\":\n                    this.value2 = symbol[1];\n                    break;\n                default:\n                    console.log(\"Unknown message for inlet 1\");\n            }\n        }\n    }\n\n    // Performs the subtraction and sends the result\n    compute() {\n        const parent = window.instances[this.workspaceId].get(this.id);\n\n        let result;\n        switch (this.mode) {\n            case \"int\":\n                this.value1 = parseInt(this.value1);\n                this.value2 = parseInt(this.value2);\n                result = this.value1 - this.value2;\n                parent.send(`${this.mode} ${result}`, 0); // Send result as int\n                break;\n            case \"float\":\n                this.value1 = parseFloat(this.value1);\n                this.value2 = parseFloat(this.value2);\n                result = this.value1 - this.value2;\n                // If result is integer, append '.' to indicate float\n                if (this.testNumber(result) === \"int\") {\n                    result = `${result}.`;\n                }\n                parent.send(`${this.mode} ${result}`, 0); // Send result as float\n                break;\n        }\n    }\n\n    // Determines if input is an int, float, or string\n    testNumber(input) {\n        const str = String(input).trim();\n    \n        if (!/^\\d+(\\.\\d*)?$/.test(str)) {\n          return \"string\";\n        }\n    \n        if (str.includes('.')) {\n          return \"float\";\n        } else {\n          return \"int\";\n        }\n    }\n}","// Export the multiply class\nexport class multiply {\n    // Constructor initializes the object with parent properties and parses initial value2\n    constructor(parent) {\n        this.workspaceId = parent.workspaceId; // Workspace identifier\n        this.id = parent.id;                   // Object identifier\n        this.textWords = parent.textWords;     // Array of text words (arguments)\n        this.numInlets = 2;                    // Number of inlets\n        this.numOutlets = 1;                   // Number of outlets\n\n        this.value1 = 0;                       // First operand, default 0\n\n        // Determine type and value of value2 based on textWords[1]\n        if (this.testNumber(this.textWords[1]) === \"int\") {\n            this.value2 = parseInt(this.textWords[1]);\n            this.mode = \"int\";\n        } else if (this.testNumber(this.textWords[1]) === \"float\") {\n            this.value2 = parseFloat(this.textWords[1]);\n            this.mode = \"float\";\n        } else {\n            this.value2 = 0;\n            this.mode = \"int\";\n        }\n    }\n\n    // Handles incoming messages to the object\n    receive(data, inletIndex) {\n        const symbol = data.trim().split(\" \"); // Split message into parts\n\n        if (inletIndex === 0) {\n            // Handle messages for inlet 0 (main input)\n            switch (symbol[0]) {\n                case \"int\":\n                    this.value1 = symbol[1];\n                    if (symbol[2]) this.value2 = symbol[2];\n                    this.compute();\n                    break;\n                case \"float\":\n                    this.value1 = symbol[1];\n                    if (symbol[2]) this.value2 = symbol[2];\n                    this.compute();\n                    break;\n                case \"bang\":\n                    this.compute();\n                    break;\n                case \"in1\":\n                    this.value2 = symbol[1];\n                    break;\n                case \"set\":\n                    this.value1 = symbol[1];\n                    break;\n                default:\n                    console.log(\"Unknown message for inlet 0\");\n            }\n        } else if (inletIndex === 1) {\n            // Handle messages for inlet 1 (secondary input)\n            switch (symbol[0]) {\n                case \"int\":\n                    this.value2 = symbol[1];\n                    break;\n                case \"float\":\n                    this.value2 = symbol[1];\n                    break;\n                default:\n                    console.log(\"Unknown message for inlet 1\");\n            }\n        }\n    }\n\n    // Performs the multiplication and sends the result\n    compute() {\n        const parent = window.instances[this.workspaceId].get(this.id); // Get parent object\n\n        let result;\n        switch (this.mode) {\n            case \"int\":\n                this.value1 = parseInt(this.value1);\n                this.value2 = parseInt(this.value2);\n                result = this.value1 * this.value2;\n                parent.send(`${this.mode} ${result}`, 0); // Send result as int\n                break;\n            case \"float\":\n                this.value1 = parseFloat(this.value1);\n                this.value2 = parseFloat(this.value2);\n                result = this.value1 * this.value2;\n                // If result is integer, append '.' to indicate float\n                if (this.testNumber(result) === \"int\") {\n                    result = `${result}.`;\n                }\n                parent.send(`${this.mode} ${result}`, 0); // Send result as float\n                break;\n        }\n    }\n\n    // Determines if input is an int, float, or string\n    testNumber(input) {\n        const str = String(input).trim();\n    \n        if (!/^\\d+(\\.\\d*)?$/.test(str)) {\n          return \"string\";\n        }\n    \n        if (str.includes('.')) {\n          return \"float\";\n        } else {\n          return \"int\";\n        }\n    }\n}","// Define the 'divide' class for division operations\nexport class divide {\n    // Constructor initializes the object with parent properties and parses the initial value\n    constructor(parent) {\n        this.workspaceId = parent.workspaceId; // Workspace identifier\n        this.id = parent.id;                   // Object identifier\n        this.textWords = parent.textWords;     // Array of text arguments\n        this.numInlets = 2;                    // Number of inlets\n        this.numOutlets = 1;                   // Number of outlets\n\n        this.value1 = 0;                       // First operand (numerator)\n\n        // Parse the second argument as int or float, set mode accordingly\n        if (this.testNumber(this.textWords[1]) === \"int\") {\n            this.value2 = parseInt(this.textWords[1]);\n            this.mode = \"int\";\n        } else if (this.testNumber(this.textWords[1]) === \"float\") {\n            this.value2 = parseFloat(this.textWords[1]);\n            this.mode = \"float\";\n        } else {\n            this.value2 = 0;\n            this.mode = \"int\";\n        }\n    }\n\n    // Handles incoming messages/data to the object\n    receive(data, inletIndex) {\n        const symbol = data.trim().split(\" \"); // Split message into parts\n\n        if (inletIndex === 0) { // Main inlet\n            switch (symbol[0]) {\n                case \"int\":\n                    this.value1 = symbol[1]; // Set numerator\n                    if (symbol[2]) this.value2 = symbol[2]; // Optionally set denominator\n                    this.compute(); // Perform division\n                    break;\n                case \"float\":\n                    this.value1 = symbol[1];\n                    if (symbol[2]) this.value2 = symbol[2];\n                    this.compute();\n                    break;\n                case \"bang\":\n                    this.compute(); // Trigger computation with current values\n                    break;\n                case \"in1\":\n                    this.value2 = symbol[1]; // Set denominator\n                    break;\n                case \"set\":\n                    this.value1 = symbol[1]; // Set numerator without computing\n                    break;\n                default:\n                    console.log(\"Unknown message for inlet 0\");\n            }\n        } else if (inletIndex === 1) { // Secondary inlet\n            switch (symbol[0]) {\n                case \"int\":\n                    this.value2 = symbol[1]; // Set denominator\n                    break;\n                case \"float\":\n                    this.value2 = symbol[1];\n                    break;\n                default:\n                    console.log(\"Unknown message for inlet 1\");\n            }\n        }\n    }\n\n    // Performs the division and sends the result to the parent\n    compute() {\n        const parent = window.instances[this.workspaceId].get(this.id); // Get parent instance\n\n        let result;\n        switch (this.mode) {\n            case \"int\":\n                this.value1 = parseInt(this.value1); // Ensure integer division\n                this.value2 = parseInt(this.value2);\n                result = parseInt(this.value1 / this.value2); // Integer division\n                parent.send(`${this.mode} ${result}`, 0); // Send result\n                break;\n            case \"float\":\n                this.value1 = parseFloat(this.value1); // Ensure float division\n                this.value2 = parseFloat(this.value2);\n                result = this.value1 / this.value2;\n                // If result is an integer, append a dot to indicate float\n                if (this.testNumber(result) === \"int\") {\n                    result = `${result}.`;\n                }\n                parent.send(`${this.mode} ${result}`, 0); // Send result\n                break;\n        }\n    }\n\n    // Determines if input is an int, float, or string\n    testNumber(input) {\n        const str = String(input).trim();\n    \n        if (!/^\\d+(\\.\\d*)?$/.test(str)) {\n          return \"string\";\n        }\n    \n        if (str.includes('.')) {\n          return \"float\";\n        } else {\n          return \"int\";\n        }\n    }\n}","// Define the 'metro' class, which acts as a metronome object\nexport class metro {\n    constructor(parent) {\n        // Store references to workspace and object IDs\n        this.workspaceId = parent.workspaceId;\n        this.id = parent.id;\n        this.textWords = parent.textWords;\n        this.numInlets = 2;   // Number of inlets for the object\n        this.numOutlets = 1;  // Number of outlets for the object\n\n        // Set interval from arguments or use default (5 ms)\n        if (this.textWords[1]) {\n            this.interval = parseInt(this.textWords[1]);\n        }\n        else {\n            this.interval = 5;\n        }\n\n        this.running = false; // Indicates if the metro is running\n    }\n\n    // Start the metronome\n    start() {\n        // Get the parent object instance from the global instances\n        const parent = window.instances[this.workspaceId].get(this.id);\n        // If already running, clear the previous timer\n        if (this.running === true) clearInterval(this.timer);\n\n        // Send an immediate \"bang\" message\n        parent.send(\"bang\");\n        // Set up a repeating timer to send \"bang\" at the specified interval\n        this.timer = setInterval(() => {\n            parent.send(\"bang\");\n        }, this.interval);\n\n        this.running = true;\n    }\n\n    // Stop the metronome\n    stop() {\n        // If running, clear the timer\n        if (this.running === true) clearInterval(this.timer);\n\n        this.running = false;\n    }\n\n    // Handle incoming messages\n    receive(data, inletIndex) {\n        // Split the incoming data into command and arguments\n        const symbol = data.trim().split(\" \");\n\n        if (inletIndex === 0) {\n            // Handle control messages on inlet 0\n            switch (symbol[0]) {\n                case \"int\":\n                    // Start or stop based on integer value\n                    if (parseInt(symbol[1]) === 0) this.stop();\n                    else this.start();\n                    break;\n                case \"float\":\n                    // Start or stop based on float value\n                    if (parseInt(symbol[1]) === 0) this.stop();\n                    else this.start();\n                    break;\n                case \"bang\":\n                    // Start on \"bang\"\n                    this.start();\n                    break;\n                case \"stop\":\n                    // Stop on \"stop\"\n                    this.stop();\n                    break;\n                case \"clock\":\n                    // Placeholder for clock handling\n                    //Must implement a function for setclock handling\n                default:\n                    // Placeholder for other time formats\n                    //Must implement a function for max time formats handling\n            }\n        } else if (inletIndex === 1) {\n            // Handle interval changes on inlet 1\n            switch (symbol[0]) {\n                case \"int\":\n                    // Set interval and restart\n                    this.interval = symbol[1];\n                    if (this.running == true) this.start();\n                    break;\n                case \"float\":\n                    // Set interval (parsed as int) and restart\n                    this.interval = parseInt(symbol[1]);\n                    if (this.running == true) this.start();\n                    break;\n                default:\n                    // Unknown message for inlet 1\n                    console.log(\"Unknown message for inlet 1\");\n            }\n        }\n    }\n}","// Exporting the delay class\nexport class delay {\n    // Constructor initializes properties from parent object\n    constructor(parent) {\n        this.workspaceId = parent.workspaceId; // Workspace identifier\n        this.id = parent.id; // Unique object ID\n        this.textWords = parent.textWords; // Array of text arguments\n        this.numInlets = 2; // Number of inlets\n        this.numOutlets = 1; // Number of outlets\n\n        // Set interval from arguments or default to 5\n        if (this.textWords[1]) {\n            this.interval = parseInt(this.textWords[1]);\n        }\n        else {\n            this.interval = 5;\n        }\n\n        this.running = false; // Indicates if timer is running\n    }\n\n    // Start the delay timer\n    start() {\n        const parent = window.instances[this.workspaceId].get(this.id);\n        // If already running, clear previous timer\n        if (this.running === true) clearInterval(this.timer);\n\n        // Set a timeout to send \"bang\" after interval\n        this.timer = setTimeout(() => {\n            parent.send(\"bang\");\n        }, this.interval);\n\n        this.running = false; // Mark as not running after starting\n    }\n\n    // Stop the delay timer\n    stop() {\n        // If running, clear the timer\n        if (this.running === true) clearInterval(this.timer);\n\n        this.running = false; // Mark as not running\n    }\n\n    // Handle incoming messages\n    receive(data, inletIndex) {\n        const symbol = data.trim().split(\" \"); // Parse message\n\n        if (inletIndex === 0) { // Main inlet\n            switch (symbol[0]) {\n                case \"int\":\n                    this.interval = parseInt(symbol[1]); // Set interval\n                    this.start(); // Start timer\n                    break;\n                case \"float\":\n                    this.interval = parseInt(symbol[1]); // Set interval\n                    this.start(); // Start timer\n                    break;\n                case \"bang\":\n                    this.start(); // Start timer\n                    break;\n                case \"stop\":\n                    this.stop(); // Stop timer\n                    break;\n                case \"clock\":\n                    //Must implement a function for setclock handling\n                default:\n                    //Must implement a function for max time formats handling\n            }\n        } else if (inletIndex === 1) { // Secondary inlet\n            switch (symbol[0]) {\n                case \"int\":\n                    this.interval = symbol[1]; // Set interval (should parseInt for consistency)\n                    break;\n                case \"float\":\n                    this.interval = parseInt(symbol[1]); // Set interval\n                    break;\n                default:\n                    console.log(\"Unknown message for inlet 1\");\n            }\n        }\n    }\n}","// Toggle class represents a toggle UI element with SVG rendering and message passing\nimport { SVG } from '@svgdotjs/svg.js';\nimport '@svgdotjs/svg.draggable.js';\n\nexport class toggle {\n    constructor(workspaceId, data) {\n        this.workspaceId = workspaceId;\n        this.id = data.id;\n        this.type = \"toggle\";\n        this.numInlets = 1;\n        this.numOutlets = 1;\n        this.outletType = \"int\";\n        this.patchingRect = data.patching_rect;\n        this.inletsPos = [];\n        this.outletsPos = [];\n        this.initialRect = [...this.patchingRect];\n\n        this.value = 0; // Initial toggle state\n\n        this.createBox();\n        this.createCircles();\n    }\n\n    // Handles click event to toggle state\n    click() {\n        if (this.value != 0) {\n            this.setOff();\n            this.value = 0;\n        }\n        else {\n            this.setOn();\n            this.value = 1;\n        }\n    }\n\n    // Sets the toggle to \"on\" state visually and sends message\n    setOn() {\n        const line1 = this.svgElement.querySelector(\"line:nth-child(2)\");\n        const line2 = this.svgElement.querySelector(\"line:nth-child(3)\");\n\n        line1.setAttribute(\"stroke\", \"#80dddf\");\n        line2.setAttribute(\"stroke\", \"#80dddf\");\n        this.send(\"int 1\");\n    }\n\n    // Sets the toggle to \"off\" state visually and sends message\n    setOff() {\n        const line1 = this.svgElement.querySelector(\"line:nth-child(2)\");\n        const line2 = this.svgElement.querySelector(\"line:nth-child(3)\");\n\n        line1.setAttribute(\"stroke\", \"#434343\");\n        line2.setAttribute(\"stroke\", \"#434343\");\n        this.send(\"int 0\");\n    }\n\n    // Creates the SVG group for the toggle box and lines\n    createBox() {\n        const svgNS = \"http://www.w3.org/2000/svg\";\n        const box = document.createElementNS(svgNS, \"g\");\n        box.setAttribute(\"transform\", `translate(${this.patchingRect[0]}, ${this.patchingRect[1]})`);\n\n        // Outer rectangle\n        const outerRect = document.createElementNS(svgNS, \"rect\");\n        outerRect.setAttribute(\"width\", this.patchingRect[2]);\n        outerRect.setAttribute(\"height\", this.patchingRect[3]);\n        outerRect.setAttribute(\"fill\", \"#292929\");\n        box.appendChild(outerRect);\n\n        // First diagonal line\n        const line1 = document.createElementNS(svgNS, \"line\");\n        line1.setAttribute(\"x1\", this.patchingRect[2] * 0.26);\n        line1.setAttribute(\"y1\", this.patchingRect[3] * 0.26);\n        line1.setAttribute(\"x2\", this.patchingRect[2] * 0.74);\n        line1.setAttribute(\"y2\", this.patchingRect[3] * 0.74);\n        line1.setAttribute(\"stroke\", \"#434343\");\n        line1.setAttribute(\"stroke-width\", 2);\n        box.appendChild(line1);\n\n        // Second diagonal line\n        const line2 = document.createElementNS(svgNS, \"line\");\n        line2.setAttribute(\"x1\", this.patchingRect[2] * 0.26);\n        line2.setAttribute(\"y1\", this.patchingRect[3] * 0.74);\n        line2.setAttribute(\"x2\", this.patchingRect[2] * 0.74);\n        line2.setAttribute(\"y2\", this.patchingRect[3] * 0.26);\n        line2.setAttribute(\"stroke\", \"#434343\");\n        line2.setAttribute(\"stroke-width\", 2);\n        box.appendChild(line2);\n\n        this.svgElement = box;\n        document.getElementById(this.workspaceId).appendChild(this.svgElement);\n\n        // Implement svg.draggable.js on svgElement\n        const draw = SVG(this.svgElement);\n\n        draw.draggable(window.lockState[this.workspaceId] == 0);\n\n        draw.on('dragmove', (event) => {\n\n            const { box } = event.detail;\n\n            this.patchingRect[0] = this.initialRect[0] + box.x;\n            this.patchingRect[1] = this.initialRect[1] + box.y;\n\n            this.updateCables();\n        });\n\n        draw.on(\"click\", () => {\n            if (window.lockState[this.workspaceId] == 1) this.click();\n        });\n\n        document.addEventListener(\"lockChange\", (e) => {\n            if (e.detail.workspace == this.workspaceId) {\n                this.onLockChange(e.detail.state);\n            }\n        });\n    }\n\n    onLockChange(state) {\n        const draw = SVG(this.svgElement);\n\n        if (state == 1) {\n            draw.draggable(false);\n            \n            this.circles.setAttribute(\"opacity\", \"0\");\n        } else if (state == 0) {\n            draw.draggable(true);\n\n            this.circles.setAttribute(\"opacity\", \"100\");\n        }\n    }\n\n    // Method to update the cables svg elements\n    updateCables() {\n        const instances = window.instances[this.workspaceId]; //cable instances\n\n        // Update cables for outlets\n        let matchinKeys = instances.keys().filter(key => {\n            return (key.includes(`cable_source:${this.id}:`));\n        });\n        matchinKeys.forEach(key => {\n            const cableInstance = instances.get(key);\n            cableInstance.svgElement.remove();\n            \n            const outlet = key.match(new RegExp(`cable_source:${this.id}:(\\\\d+)`));\n            if (outlet[1] < this.numOutlets) {\n                cableInstance.createCable();\n            }\n        });\n\n        // Update cables for inlets\n        matchinKeys = instances.keys().filter(key => {\n            return (key.includes(`cable_destination:${this.id}:`));\n        });\n        matchinKeys.forEach(key => {\n            const cableInstance = instances.get(key);\n            cableInstance.svgElement.remove();\n            \n            const inlet = key.match(new RegExp(`cable_destination:${this.id}:(\\\\d+)`));\n            if (inlet[1] < this.numInlets) {\n                cableInstance.createCable();\n            }\n        });\n    }\n\n    // Method to create the circles for inlets and outlets\n    createCircles() {\n        const svgNS = \"http://www.w3.org/2000/svg\";\n        \n        // Remove existing circles if they exist and initialize arrays\n        if (this.circles) this.circles.remove();\n        this.inletsPos.length = this.numInlets;\n        this.outletsPos.length = this.numOutlets;\n        \n        const box = this.svgElement;\n        const outerRect = box.querySelector(\"rect\");\n        \n        // Create a group for the circles\n        this.circles = document.createElementNS(svgNS, \"g\");\n        this.circles.setAttribute(\"transform\", `translate(-${this.initialRect[0]}, -${this.initialRect[1]})`);\n        \n        // Create inlets circles\n        for (let i = 0; i < this.numInlets; i++) {\n            const path = document.createElementNS(svgNS, \"path\");\n        \n            // Set the position of the circle based on the number of inlets\n            const cx = (this.numInlets === 1)\n            ? 9.5\n            : 9.5 + (parseFloat(outerRect.getAttribute(\"width\")) - 19) * (i / (this.numInlets - 1));\n            const cy = 0;\n            \n            const d = \"M \" + (cx - 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]) +\n                \"A 3.55 3.55 0 0 0\" + (cx + 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]);\n\n            path.setAttribute(\"d\", d);\n            path.setAttribute(\"fill\", \"#909090\");\n            this.circles.appendChild(path);\n\n            // Store the inlet instance\n            this.inletsPos[i] = [cx, cy];\n        }\n\n        // Create outlets circles\n        for (let i = 0; i < this.numOutlets; i++) {\n            const path = document.createElementNS(svgNS, \"path\");\n    \n            // Set the position of the circle based on the number of outlets\n            const cx = (this.numOutlets === 1)\n                ? 9.5\n                : 9.5 + (parseFloat(outerRect.getAttribute(\"width\")) - 19) * (i / (this.numOutlets - 1));\n            const cy = parseFloat(outerRect.getAttribute(\"height\"));\n\n            const d = \"M \" + (cx - 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]) +\n                \"A 3.55 3.55 0 0 1\" + (cx + 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]);\n\n            path.setAttribute(\"d\", d);\n            path.setAttribute(\"fill\", \"#909090\");\n            this.circles.appendChild(path);\n\n            //store the outlet instance\n            this.outletsPos[i] = [cx, cy];\n        }\n    \n        this.circles.setAttribute(\"opacity\", `${window.lockState[this.workspaceId] == 0 ? \"100\" : \"0\"}`);\n\n        box.appendChild(this.circles);\n    }\n\n    // Handles incoming messages to the toggle\n    receive(data) {\n        // Split the message into selector and arguments\n        const symbol = data.trim().split(\" \");\n\n        switch (symbol[0]) {\n            case \"int\":\n                this.toggle_in1(symbol[1]);\n                break;\n            case \"float\":\n                this.toggle_in1(symbol[1]);\n                break;\n            case \"bang\":\n                this.click();\n                break;\n            case \"outputvalue\":\n                this.send(`int ${this.value}`);\n                break;\n            case \"set\":\n                this.toggle_set(symbol[1]);\n                break;\n            default:\n                console.log(\"Unknown message for toggle\");\n        }\n    }\n\n    send(data) {\n        const key = `${this.id}:0`;\n        const connections = window.connections[this.workspaceId];\n        const instances = window.instances[this.workspaceId];\n\n        if (connections?.get(key)) {\n            // Collect destinations with the X coordinates of the inlets\n            const destinations = [];\n\n            connections.get(key).forEach(destinationArray => {\n                const destinationId = destinationArray[0];\n                const inletIndex = destinationArray[1];\n                const destinationObject = instances.get(destinationId);\n            \n                if (destinationObject) {\n                    const inletPos = destinationObject.inletsPos[inletIndex];\n                    if (inletPos) {\n                        destinations.push({\n                            destinationObject,\n                            inletIndex,\n                            x: inletPos[0],\n                            y: inletPos[1]\n                        });\n                    }\n                }\n            });\n\n            // Sort from rightmost (higher x) to leftmost (lower x)\n            destinations.sort((a, b) => {\n                if (b.x !== a.x) return b.x - a.x;       // rightmost first\n                return a.y - b.y;                        // if x is the same, sort by y (top to bottom)\n            });\n\n            // Call receive in the right order\n            destinations.forEach(dest => {\n                dest.destinationObject.receive(data, dest.inletIndex);\n            });\n        }\n    }\n\n    // Handles \"int\" or \"float\" messages to set toggle state\n    toggle_in1(data) {\n        if (!data) return;\n        else if(parseInt(data) === 0) {\n            this.send(`int ${parseInt(data)}`);\n            this.setOff();\n            this.value = (parseInt(data));\n        }\n        else {\n            this.send(`int ${parseInt(data)}`);\n            this.setOn();\n            this.value = (parseInt(data));\n        }\n    }\n\n    // Handles \"set\" message to update toggle state without sending output\n    toggle_set(data) {\n        const line1 = this.svgElement.querySelector(\"line:nth-child(2)\");\n        const line2 = this.svgElement.querySelector(\"line:nth-child(3)\");\n\n        if (!data) return;\n        else if(parseInt(data) === 0) {\n            this.value = (parseInt(data));\n            line1.setAttribute(\"stroke\", \"#434343\");\n            line2.setAttribute(\"stroke\", \"#434343\");\n        }\n        else {\n            this.value = (parseInt(data));\n            line1.setAttribute(\"stroke\", \"#80dddf\");\n            line2.setAttribute(\"stroke\", \"#80dddf\");\n        }\n    }\n}","import { Box, Element, G, extend, off, on } from '@svgdotjs/svg.js'\n\nconst getCoordsFromEvent = (ev) => {\n  if (ev.changedTouches) {\n    ev = ev.changedTouches[0]\n  }\n  return { x: ev.clientX, y: ev.clientY }\n}\n\n// Creates handler, saves it\nclass DragHandler {\n  constructor(el) {\n    el.remember('_draggable', this)\n    this.el = el\n\n    this.drag = this.drag.bind(this)\n    this.startDrag = this.startDrag.bind(this)\n    this.endDrag = this.endDrag.bind(this)\n  }\n\n  // Enables or disabled drag based on input\n  init(enabled) {\n    if (enabled) {\n      this.el.on('mousedown.drag', this.startDrag)\n      this.el.on('touchstart.drag', this.startDrag, { passive: false })\n    } else {\n      this.el.off('mousedown.drag')\n      this.el.off('touchstart.drag')\n    }\n  }\n\n  // Start dragging\n  startDrag(ev) {\n    const isMouse = !ev.type.indexOf('mouse')\n\n    // Check for left button\n    if (isMouse && ev.which !== 1 && ev.buttons !== 0) {\n      return\n    }\n\n    // Fire beforedrag event\n    if (\n      this.el.dispatch('beforedrag', { event: ev, handler: this })\n        .defaultPrevented\n    ) {\n      return\n    }\n\n    // Prevent browser drag behavior as soon as possible\n    ev.preventDefault()\n\n    // Prevent propagation to a parent that might also have dragging enabled\n    ev.stopPropagation()\n\n    // Make sure that start events are unbound so that one element\n    // is only dragged by one input only\n    this.init(false)\n\n    this.box = this.el.bbox()\n    this.lastClick = this.el.point(getCoordsFromEvent(ev))\n\n    const eventMove = (isMouse ? 'mousemove' : 'touchmove') + '.drag'\n    const eventEnd = (isMouse ? 'mouseup' : 'touchend') + '.drag'\n\n    // Bind drag and end events to window\n    on(window, eventMove, this.drag, this, { passive: false })\n    on(window, eventEnd, this.endDrag, this, { passive: false })\n\n    // Fire dragstart event\n    this.el.fire('dragstart', { event: ev, handler: this, box: this.box })\n  }\n\n  // While dragging\n  drag(ev) {\n    const { box, lastClick } = this\n\n    const currentClick = this.el.point(getCoordsFromEvent(ev))\n    const dx = currentClick.x - lastClick.x\n    const dy = currentClick.y - lastClick.y\n\n    if (!dx && !dy) return box\n\n    const x = box.x + dx\n    const y = box.y + dy\n    this.box = new Box(x, y, box.w, box.h)\n    this.lastClick = currentClick\n\n    if (\n      this.el.dispatch('dragmove', {\n        event: ev,\n        handler: this,\n        box: this.box,\n        dx,\n        dy,\n      }).defaultPrevented\n    ) {\n      return\n    }\n\n    this.move(x, y)\n  }\n\n  move(x, y) {\n    // Svg elements bbox depends on their content even though they have\n    // x, y, width and height - strange!\n    // Thats why we handle them the same as groups\n    if (this.el.type === 'svg') {\n      G.prototype.move.call(this.el, x, y)\n    } else {\n      this.el.move(x, y)\n    }\n  }\n\n  endDrag(ev) {\n    // final drag\n    this.drag(ev)\n\n    // fire dragend event\n    this.el.fire('dragend', { event: ev, handler: this, box: this.box })\n\n    // unbind events\n    off(window, 'mousemove.drag')\n    off(window, 'touchmove.drag')\n    off(window, 'mouseup.drag')\n    off(window, 'touchend.drag')\n\n    // Rebind initial Events\n    this.init(true)\n  }\n}\n\nextend(Element, {\n  draggable(enable = true) {\n    const dragHandler = this.remember('_draggable') || new DragHandler(this)\n    dragHandler.init(enable)\n    return this\n  },\n})\n","import { SVG } from '@svgdotjs/svg.js';\nimport '@svgdotjs/svg.draggable.js';\n\nexport class button {\n    constructor(workspaceId, data) {\n        this.workspaceId = workspaceId;\n        this.id = data.id;\n        this.type = \"button\";\n        this.numInlets = 1;\n        this.numOutlets = 1;\n        this.outletType = \"bang\";\n        this.patchingRect = data.patching_rect;\n        this.inletsPos = [];\n        this.outletsPos = [];\n        this.initialRect = [...this.patchingRect];\n\n        this.createBox();\n        this.createCircles();\n    }\n\n    // Method to create the SVG group for the button box\n    createBox() {\n        const svgNS = \"http://www.w3.org/2000/svg\";\n        const box = document.createElementNS(svgNS, \"g\");\n        box.setAttribute(\"transform\", `translate(${this.patchingRect[0]}, ${this.patchingRect[1]})`);\n        const outerRect = document.createElementNS(svgNS, \"rect\");\n        outerRect.setAttribute(\"width\", this.patchingRect[2]);\n        outerRect.setAttribute(\"height\", this.patchingRect[3]);\n        outerRect.setAttribute(\"fill\", \"#292929\");\n        box.appendChild(outerRect);\n\n        const outerCircle = document.createElementNS(svgNS, \"circle\");\n        outerCircle.setAttribute(\"cx\", this.patchingRect[2] / 2);\n        outerCircle.setAttribute(\"cy\", this.patchingRect[3] / 2);\n        outerCircle.setAttribute(\"r\", this.patchingRect[3] / 3.4);\n        outerCircle.setAttribute(\"fill\", \"none\");\n        outerCircle.setAttribute(\"stroke\", \"#434343\");\n        outerCircle.setAttribute(\"stroke-width\", 2);\n        box.appendChild(outerCircle);\n\n        const innerCircle = document.createElementNS(svgNS, \"circle\");\n        innerCircle.setAttribute(\"cx\", this.patchingRect[2] / 2);\n        innerCircle.setAttribute(\"cy\", this.patchingRect[3] / 2);\n        innerCircle.setAttribute(\"r\", this.patchingRect[3] / 6.8);\n        innerCircle.setAttribute(\"fill\", \"#80dddf\");\n        innerCircle.setAttribute(\"opacity\", 0);\n        box.appendChild(innerCircle);\n\n        this.svgElement = box;\n        document.getElementById(this.workspaceId).appendChild(this.svgElement);\n\n        // Implement svg.draggable.js on svgElement\n        const draw = SVG(this.svgElement);\n\n        draw.draggable(window.lockState[this.workspaceId] == 0);\n\n        draw.on('dragmove', (event) => {\n\n            const { box } = event.detail;\n\n            this.patchingRect[0] = this.initialRect[0] + box.x;\n            this.patchingRect[1] = this.initialRect[1] + box.y;\n\n            this.updateCables();\n        });\n\n        draw.on(\"mousedown\", () => {\n            if (window.lockState[this.workspaceId] == 1) {\n                const circle = this.svgElement.querySelector(\"circle:nth-child(3)\");\n                circle.setAttribute(\"opacity\", 1);\n\n                this.send(\"bang\");\n            }\n            document.addEventListener(\"mouseup\", () => {\n                const circle = this.svgElement.querySelector(\"circle:nth-child(3)\");\n                circle.setAttribute(\"opacity\", 0);\n            });\n        });\n\n        document.addEventListener(\"lockChange\", (e) => {\n            if (e.detail.workspace == this.workspaceId) {\n                this.onLockChange(e.detail.state);\n            }\n        });\n    }\n\n    onLockChange(state) {\n        const draw = SVG(this.svgElement);\n\n        if (state == 1) {\n            draw.draggable(false);\n\n            this.circles.setAttribute(\"opacity\", \"0\");\n        } else if (state == 0) {\n            draw.draggable(true);\n\n            this.circles.setAttribute(\"opacity\", \"100\");\n        }\n    }\n\n    // Method to update the cables svg elements\n    updateCables() {\n        const instances = window.instances[this.workspaceId]; //cable instances\n\n        // Update cables for outlets\n        let matchinKeys = instances.keys().filter(key => {\n            return (key.includes(`cable_source:${this.id}:`));\n        });\n        matchinKeys.forEach(key => {\n            const cableInstance = instances.get(key);\n            cableInstance.svgElement.remove();\n            \n            const outlet = key.match(new RegExp(`cable_source:${this.id}:(\\\\d+)`));\n            if (outlet[1] < this.numOutlets) {\n                cableInstance.createCable();\n            }\n        });\n\n        // Update cables for inlets\n        matchinKeys = instances.keys().filter(key => {\n            return (key.includes(`cable_destination:${this.id}:`));\n        });\n        matchinKeys.forEach(key => {\n            const cableInstance = instances.get(key);\n            cableInstance.svgElement.remove();\n            \n            const inlet = key.match(new RegExp(`cable_destination:${this.id}:(\\\\d+)`));\n            if (inlet[1] < this.numInlets) {\n                cableInstance.createCable();\n            }\n        });\n    }\n\n    // Method to create the circles for inlets and outlets\n    createCircles() {\n        const svgNS = \"http://www.w3.org/2000/svg\";\n        \n        // Remove existing circles if they exist and initialize arrays\n        if (this.circles) this.circles.remove();\n        this.inletsPos.length = this.numInlets;\n        this.outletsPos.length = this.numOutlets;\n        \n        const box = this.svgElement;\n        const outerRect = box.querySelector(\"rect\");\n        \n        // Create a group for the circles\n        this.circles = document.createElementNS(svgNS, \"g\");\n        this.circles.setAttribute(\"transform\", `translate(-${this.initialRect[0]}, -${this.initialRect[1]})`);\n        \n        // Create inlets circles\n        for (let i = 0; i < this.numInlets; i++) {\n            const path = document.createElementNS(svgNS, \"path\");\n        \n            // Set the position of the circle based on the number of inlets\n            const cx = (this.numInlets === 1)\n            ? 9.5\n            : 9.5 + (parseFloat(outerRect.getAttribute(\"width\")) - 19) * (i / (this.numInlets - 1));\n            const cy = 0;\n            \n            const d = \"M \" + (cx - 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]) +\n                \"A 3.55 3.55 0 0 0\" + (cx + 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]);\n\n            path.setAttribute(\"d\", d);\n            path.setAttribute(\"fill\", \"#909090\");\n            this.circles.appendChild(path);\n\n            // Store the inlet instance\n            this.inletsPos[i] = [cx, cy];\n        }\n\n        // Create outlets circles\n        for (let i = 0; i < this.numOutlets; i++) {\n            const path = document.createElementNS(svgNS, \"path\");\n    \n            // Set the position of the circle based on the number of outlets\n            const cx = (this.numOutlets === 1)\n                ? 9.5\n                : 9.5 + (parseFloat(outerRect.getAttribute(\"width\")) - 19) * (i / (this.numOutlets - 1));\n            const cy = parseFloat(outerRect.getAttribute(\"height\"));\n\n            const d = \"M \" + (cx - 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]) +\n                \"A 3.55 3.55 0 0 1\" + (cx + 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]);\n\n            path.setAttribute(\"d\", d);\n            path.setAttribute(\"fill\", \"#909090\");\n            this.circles.appendChild(path);\n\n            //store the outlet instance\n            this.outletsPos[i] = [cx, cy];\n        }\n\n        this.circles.setAttribute(\"opacity\", `${window.lockState[this.workspaceId] == 0 ? \"100\" : \"0\"}`);\n    \n        box.appendChild(this.circles);\n    }\n\n    receive(data) {\n        // split the message by selector and arguments\n        const symbol = data.trim().split(\" \");\n\n        switch (symbol[0]) {\n            default:\n                this.activated();\n        }\n    }\n\n    send(data) {\n        const key = `${this.id}:0`;\n        const connections = window.connections[this.workspaceId];\n        const instances = window.instances[this.workspaceId];\n\n        if (connections?.get(key)) {\n            // Collect destinations with the X coordinates of the inlets\n            const destinations = [];\n\n            connections.get(key).forEach(destinationArray => {\n                const destinationId = destinationArray[0];\n                const inletIndex = destinationArray[1];\n                const destinationObject = instances.get(destinationId);\n            \n                if (destinationObject) {\n                    const inletPos = destinationObject.inletsPos[inletIndex];\n                    if (inletPos) {\n                        destinations.push({\n                            destinationObject,\n                            inletIndex,\n                            x: inletPos[0],\n                            y: inletPos[1]\n                        });\n                    }\n                }\n            });\n\n            // Sort from rightmost (higher x) to leftmost (lower x)\n            destinations.sort((a, b) => {\n                if (b.x !== a.x) return b.x - a.x;       // rightmost first\n                return a.y - b.y;                        // if x is the same, sort by y (top to bottom)\n            });\n\n            // Call receive in the right order\n            destinations.forEach(dest => {\n                dest.destinationObject.receive(data, dest.inletIndex);\n            });\n        }\n    }\n\n    // Method to handle the button activation\n    activated() {\n        const circle = this.svgElement.querySelector(\"circle:nth-child(3)\");\n        if (this.active) clearTimeout(this.timer);\n        this.send(\"bang\");\n\n        circle.setAttribute(\"opacity\", 1);\n        this.active = true;\n        this.timer = setTimeout(() => {\n            circle.setAttribute(\"opacity\", 0);\n        }, 260);\n    }\n}","// Dummy class  for testing purposes\nexport class dummy {\n    // Constructor initializes the object with parent properties and parses the initial value\n    constructor(parent) {\n        this.workspaceId = parent.workspaceId; // Workspace identifier\n        this.id = parent.id;                   // Object identifier\n        this.textWords = parent.textWords;     // Array of text arguments\n        this.numInlets = 1;                    // Number of inlets\n        this.numOutlets = 1;                   // Number of outlets\n        }\n    }","// Max Class: message\nimport { SVG } from '@svgdotjs/svg.js';\nimport '@svgdotjs/svg.draggable.js';\n\nexport class message {\n    constructor(workspaceId, data) {\n        this.workspaceId = workspaceId;\n        this.id = data.id;\n        this.type = data.maxclass;\n        this.numInlets = 2;\n        this.numOutlets = 1;\n        this.outletType = \"\";\n        this.patchingRect = data.patching_rect;\n        this.text = data.text || \"\\u200A\";\n        this.inletsPos = [];\n        this.outletsPos = [];\n        this.initialRect = [...this.patchingRect];\n\n        this.createBox();\n        this.createCircles();\n    }\n\n    createBox() {\n        const svgNS = \"http://www.w3.org/2000/svg\";\n        const box = document.createElementNS(svgNS, \"g\");\n        box.setAttribute(\"transform\", `translate(${this.patchingRect[0]}, ${this.patchingRect[1]})`);\n        const outerRect = document.createElementNS(svgNS, \"rect\");\n        outerRect.setAttribute(\"width\", this.patchingRect[2]);\n        outerRect.setAttribute(\"height\", this.patchingRect[3]);\n        outerRect.setAttribute(\"fill\", \"#333333\");\n        outerRect.setAttribute(\"rx\", 5.7);\n        outerRect.setAttribute(\"ry\", 5.7);\n        box.appendChild(outerRect);\n        \n        const foreignObject = document.createElementNS(svgNS, \"foreignObject\");\n        foreignObject.setAttribute(\"width\", this.patchingRect[2] - 8.015);\n        foreignObject.setAttribute(\"height\", this.patchingRect[3]);\n        foreignObject.setAttribute(\"x\", 4);\n        foreignObject.setAttribute(\"y\", 4.6);\n        \n        const div = document.createElement(\"div\");\n        div.innerText = this.text.replace(/\\r/g, \"\\n\");\n        div.setAttribute(\"contenteditable\", `${!window.lockState[this.workspaceId]}`);\n        div.style.display = \"inline-block\";\n        div.style.verticalAlign = \"top\";\n        div.style.wordBreak = \"break-word\";\n        div.style.whiteSpace = \"pre-wrap\";\n        div.style.fontSize = \"12px\";\n        div.style.color = \"#f7f7f7\";\n        div.style.lineHeight = \"13.2px\";\n        div.style.fontFamily = \"Arial, sans-serif\";\n        div.style.fontWeight = \"normal\";\n        div.style.outline = \"none\";\n        div.style.border = \"none\";\n        div.oninput = () => this.resizeOnInput();\n        div.onblur = () => {\n            div.innerHTML = div.innerHTML.trim();\n            this.semicolonCheck();\n            draw.draggable(window.lockState[this.workspaceId] == 0);\n        }\n        \n        foreignObject.appendChild(div);\n        box.appendChild(foreignObject);\n\n        this.svgElement = box;\n        document.getElementById(this.workspaceId).appendChild(this.svgElement);\n\n        // Implement svg.draggable.js on svgElement\n        const draw = SVG(this.svgElement);\n\n        draw.draggable(window.lockState[this.workspaceId] == 0);\n\n        draw.on('dragmove', (event) => {\n\n            const { box } = event.detail;\n\n            this.patchingRect[0] = this.initialRect[0] + box.x;\n            this.patchingRect[1] = this.initialRect[1] + box.y;\n            \n            this.updateCables();\n        });\n\n        draw.on(\"mousedown\", () => {\n            if (window.lockState[this.workspaceId] == 1) {\n                foreignObject.setAttribute(\"transform\", 'translate(1.5,1.5)');\n                this.message_bang();\n            } else if (!window.lockState[this.workspaceId]) {\n                if (div.innerHTML.trim() === \"\") {\n                    div.innerHTML = \"\\u200A\";\n                }\n            }\n            document.addEventListener(\"mouseup\", () => {\n                if (window.lockState[this.workspaceId] == 1) {\n                    foreignObject.setAttribute(\"transform\", 'translate(0,0)');\n                }\n            });\n        });\n\n        document.addEventListener(\"lockChange\", (e) => {\n            if (e.detail.workspace == this.workspaceId) {\n                this.onLockChange(e.detail.state);\n            }\n        });\n    }\n\n    onLockChange(state) {\n        const div = this.svgElement.querySelector(\"div\");\n        const draw = SVG(this.svgElement);\n\n        if (state == 1) {\n            draw.draggable(false);\n            div.setAttribute(\"contenteditable\", \"false\");\n            draw.on(\"click\", () => {});\n\n            this.circles.setAttribute(\"opacity\", \"0\");\n        } else if (state == 0) {\n            draw.draggable(true);\n            div.setAttribute(\"contenteditable\", \"true\");\n            draw.on(\"click\", () => {\n                draw.draggable(false);\n                this.editing = true;\n                div.focus();\n                const range = document.createRange();\n                range.selectNodeContents(div);\n                const sel = window.getSelection();\n                sel.removeAllRanges();\n                sel.addRange(range);\n            });\n\n            this.circles.setAttribute(\"opacity\", \"100\");\n        }\n    }\n\n    // Method to update the cables svg elements\n    updateCables() {\n        const instances = window.instances[this.workspaceId]; //cable instances\n\n        // Update cables for outlets\n        let matchinKeys = instances.keys().filter(key => {\n            return (key.includes(`cable_source:${this.id}:`));\n        });\n        matchinKeys.forEach(key => {\n            const cableInstance = instances.get(key);\n            cableInstance.svgElement.remove();\n            \n            const outlet = key.match(new RegExp(`cable_source:${this.id}:(\\\\d+)`));\n            if (outlet[1] < this.numOutlets) {\n                cableInstance.createCable();\n            }\n        });\n\n        // Update cables for inlets\n        matchinKeys = instances.keys().filter(key => {\n            return (key.includes(`cable_destination:${this.id}:`));\n        });\n        matchinKeys.forEach(key => {\n            const cableInstance = instances.get(key);\n            cableInstance.svgElement.remove();\n            \n            const inlet = key.match(new RegExp(`cable_destination:${this.id}:(\\\\d+)`));\n            if (inlet[1] < this.numInlets) {\n                cableInstance.createCable();\n            }\n        });\n    }\n\n    // Method to create the circles for inlets and outlets\n    createCircles() {\n        const svgNS = \"http://www.w3.org/2000/svg\";\n        \n        // Remove existing circles if they exist and initialize arrays\n        if (this.circles) this.circles.remove();\n        this.inletsPos.length = this.numInlets;\n        this.outletsPos.length = this.numOutlets;\n        \n        const box = this.svgElement;\n        const outerRect = box.querySelector(\"rect\");\n        \n        // Create a group for the circles\n        this.circles = document.createElementNS(svgNS, \"g\");\n        this.circles.setAttribute(\"transform\", `translate(-${this.initialRect[0]}, -${this.initialRect[1]})`);\n        \n        // Create inlets circles\n        for (let i = 0; i < this.numInlets; i++) {\n            const path = document.createElementNS(svgNS, \"path\");\n        \n            // Set the position of the circle based on the number of inlets\n            const cx = (this.numInlets === 1)\n            ? 9.5\n            : 9.5 + (parseFloat(outerRect.getAttribute(\"width\")) - 19) * (i / (this.numInlets - 1));\n            const cy = 0;\n            \n            const d = \"M \" + (cx - 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]) +\n                \"A 3.55 3.55 0 0 0\" + (cx + 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]);\n\n            path.setAttribute(\"d\", d);\n            path.setAttribute(\"fill\", \"#909090\");\n            this.circles.appendChild(path);\n\n            // Store the inlet instance\n            this.inletsPos[i] = [cx, cy];\n        }\n\n        // Create outlets circles\n        for (let i = 0; i < this.numOutlets; i++) {\n            const path = document.createElementNS(svgNS, \"path\");\n    \n            // Set the position of the circle based on the number of outlets\n            const cx = (this.numOutlets === 1)\n                ? 9.5\n                : 9.5 + (parseFloat(outerRect.getAttribute(\"width\")) - 19) * (i / (this.numOutlets - 1));\n            const cy = parseFloat(outerRect.getAttribute(\"height\"));\n\n            const d = \"M \" + (cx - 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]) +\n                \"A 3.55 3.55 0 0 1\" + (cx + 3.55 + this.patchingRect[0]) + \" \" + (cy + this.patchingRect[1]);\n\n            path.setAttribute(\"d\", d);\n            path.setAttribute(\"fill\", \"#909090\");\n            this.circles.appendChild(path);\n\n            //store the outlet instance\n            this.outletsPos[i] = [cx, cy];\n        }\n    \n        this.circles.setAttribute(\"opacity\", `${window.lockState[this.workspaceId] == 0 ? \"100\" : \"0\"}`);\n\n        box.appendChild(this.circles);\n    }\n    \n    resizeOnInput() {\n        const box = this.svgElement;\n        \n        const outerRect = box.querySelector(\"rect\");\n        const foreignObject = box.querySelector(\"foreignObject\");\n        const div = foreignObject.querySelector('div');\n\n        // Set the div to nowrap to get all text in one line\n        div.style.wordBreak = \"keep-all\";\n        div.style.whiteSpace = \"nowrap\";\n\n        if (div.innerHTML.trim() === \"\") {\n            div.innerHTML = \"\\u200A\";\n        }\n\n        const divLength = div.offsetWidth;\n        const divHeight = div.offsetHeight;\n\n        outerRect.setAttribute(\"width\", Math.max(divLength + 8, 34));\n        outerRect.setAttribute(\"height\", Math.max(divHeight + 9, 22));\n        foreignObject.setAttribute(\"width\", Math.max(divLength + 8, 34));\n        foreignObject.setAttribute(\"height\", Math.max(divHeight + 9, 22));\n\n        this.createCircles();\n        this.updateCables();\n    }\n\n    // Check for semicolons and format the text accordingly to Max formatting\n    semicolonCheck() {\n        const box = this.svgElement;\n        const foreignObject = box.querySelector(\"foreignObject\");\n        const div = foreignObject.querySelector('div');\n    \n        // Set the div to wrap to get all text in multiple lines\n        div.style.wordBreak = \"keep-all\";\n        div.style.whiteSpace = \"nowrap\";\n\n        // Replace <br> tags with spaces\n        let text = div.innerHTML.replace(/<br>/g, \" \");\n\n        // Split the text by semicolons and join with \";<br>\"\n        let formattedText = text.split(\";\").join(\";<br>\");\n\n        // Set the HTML of the div to maintain the formatting\n        div.innerHTML = formattedText;\n\n        // Resize the box\n        const outerRect = box.querySelector(\"rect\");\n        const divLength = div.offsetWidth;\n        const divHeight = div.offsetHeight;\n\n        outerRect.setAttribute(\"width\", Math.max(divLength + 8, 34));\n        outerRect.setAttribute(\"height\", Math.max(divHeight + 9, 22));\n        foreignObject.setAttribute(\"width\", Math.max(divLength + 8, 34));\n        foreignObject.setAttribute(\"height\", Math.max(divHeight + 9, 22));\n\n        this.createCircles();\n        this.updateCables();\n    }\n\n    updateCables() {\n        const instances = window.instances[this.workspaceId];\n\n        const matchinkeys = instances.keys().filter(key => {\n            return (key.split(\":\")[0] === \"cable_source\") && key.includes(`${this.id}:`);\n        });\n        matchinkeys.forEach(key => {\n            const cableInstance = instances.get(key);\n            cableInstance.svgElement.remove();\n            cableInstance.createCable();\n        });\n    }\n\n    receive(data, inletIndex) {\n        // split the message by selector and arguments\n        const symbol = data.trim().split(\" \");\n\n        if (inletIndex == 0) {\n            switch (symbol[0]) {\n                default:\n                    this.message_bang();\n            }\n        } else if (inletIndex == 1) {\n             switch (symbol[0]) {\n                case \"int\":\n                    this.message_in1(data); break;\n                case \"float\":\n                    this.message_ft1(data); break;\n                default:\n                    this.message_anything1(data);\n             }\n        }\n    }\n\n    send(data) {\n        const key = `${this.id}:0`;\n        const connections = window.connections[this.workspaceId];\n        const instances = window.instances[this.workspaceId];\n\n        if (connections?.get(key)) {\n            // Collect destinations with the X coordinates of the inlets\n            const destinations = [];\n\n            connections.get(key).forEach(destinationArray => {\n                const destinationId = destinationArray[0];\n                const inletIndex = destinationArray[1];\n                const destinationObject = instances.get(destinationId);\n            \n                if (destinationObject) {\n                    const inletPos = destinationObject.inletsPos[inletIndex];\n                    if (inletPos) {\n                        destinations.push({\n                            destinationObject,\n                            inletIndex,\n                            x: inletPos[0],\n                            y: inletPos[1]\n                        });\n                    }\n                }\n            });\n\n            // Sort from rightmost (higher x) to leftmost (lower x)\n            destinations.sort((a, b) => {\n                if (b.x !== a.x) return b.x - a.x;       // rightmost first\n                return a.y - b.y;                        // if x is the same, sort by y (top to bottom)\n            });\n\n            // Call receive in the right order\n            destinations.forEach(dest => {\n                dest.destinationObject.receive(data, dest.inletIndex);\n            });\n        }\n    }\n\n\n    message_in1(data) {\n        const box = this.svgElement;\n        const foreignObject = box.querySelector(\"foreignObject\");\n        const div = this.svgElement.querySelector(\"foreignObject\").querySelector('div');\n\n        // Set the div to wrap to get all text in multiple lines\n        div.style.wordBreak = \"break-word\";\n        div.style.whiteSpace = \"pre-wrap\";\n\n        div.innerHTML = data.split(\" \")[1];\n\n        // Resize the box\n        const outerRect = box.querySelector(\"rect\");\n        const divHeight = div.offsetHeight;\n\n        outerRect.setAttribute(\"height\", Math.max(divHeight + 9, 22));\n        foreignObject.setAttribute(\"height\", Math.max(divHeight + 9, 22));\n\n        this.createCircles();\n        this.updateCables();\n    }\n    \n    message_ft1(data) {\n        const box = this.svgElement;\n        const foreignObject = box.querySelector(\"foreignObject\");\n        const div = this.svgElement.querySelector(\"foreignObject\").querySelector('div');\n\n        // Set the div to wrap to get all text in multiple lines\n        div.style.wordBreak = \"break-word\";\n        div.style.whiteSpace = \"pre-wrap\";\n\n        const formattedData = data.split(\" \")[1].split(\".\");\n        div.innerHTML = formattedData[0] + \".\" + (formattedData[1] || \"\");\n\n        // Resize the box\n        const outerRect = box.querySelector(\"rect\");\n        const divHeight = div.offsetHeight;\n\n        outerRect.setAttribute(\"height\", Math.max(divHeight + 9, 22));\n        foreignObject.setAttribute(\"height\", Math.max(divHeight + 9, 22));\n\n        this.createCircles();\n        this.updateCables();\n    }\n\n    message_anything1(data) {\n        const box = this.svgElement;\n        const foreignObject = box.querySelector(\"foreignObject\");\n        const div = foreignObject.querySelector('div');\n    \n        // Set the div to wrap to get all text in multiple lines\n        div.style.wordBreak = \"break-word\";\n        div.style.whiteSpace = \"pre-wrap\";\n\n        div.innerHTML = data;\n\n        // Resize the box\n        const outerRect = box.querySelector(\"rect\");\n        const divHeight = div.offsetHeight;\n\n        outerRect.setAttribute(\"height\", Math.max(divHeight + 9, 22));\n        foreignObject.setAttribute(\"height\", Math.max(divHeight + 9, 22));\n\n        this.createCircles();\n        this.updateCables();\n    }\n\n    message_bang() {\n        const div = this.svgElement.querySelector(\"foreignObject\").querySelector('div');\n        const textWords = div.innerHTML.trim().split(/\\s+/);\n        \n        switch (this.testNumber(textWords[0])) {\n            case \"int\":\n                this.send(`int ${textWords.join(\" \")}`);\n                break;\n            case \"float\":\n                this.send(`float ${textWords.join(\" \")}`);\n                break;\n            case \"string\":\n                this.send(`${textWords.join(\" \")}`);\n                break;\n            default:\n                console.log(\"Unknown content type for message box\");\n        }\n    }\n\n    testNumber(input) {\n        const str = String(input).trim();\n    \n        if (!/^\\d+(\\.\\d*)?$/.test(str)) {\n          return \"string\";\n        }\n    \n        if (str.includes('.')) {\n          return \"float\";\n        } else {\n          return \"int\";\n        }\n    }\n}","export class cable {\n    constructor(workspaceId, source, destination) {\n        this.workspaceId = workspaceId;\n        this.source = source;\n        this.destination = destination;\n\n        this.createCable();\n    }\n\n    // Method to create the cable SVG element and append it to the workspace\n    createCable() {\n        const instances = window.instances[this.workspaceId];\n\n        const sourceInstance = instances.get(this.source[0]);\n        const sourcePos = sourceInstance.patchingRect;\n        const outletPos = sourceInstance.outletsPos[this.source[1]];\n        \n        const destinationInstance = instances.get(this.destination[0]);\n        const destinationPos = destinationInstance.patchingRect;\n        const inletPos = destinationInstance.inletsPos[this.destination[1]];\n\n        const cableType = sourceInstance.outletType[this.source[1]];\n        switch (cableType) {\n            case \"signal\":\n                //color green\n                break;\n            default:\n                //color grey\n        }\n\n        const svgNS = \"http://www.w3.org/2000/svg\";\n        const cable = document.createElementNS(svgNS, \"path\");\n        cable.setAttribute(\"d\", `M ${sourcePos[0] + outletPos[0]} ${sourcePos[1] + outletPos[1]} C ${sourcePos[0] + outletPos[0]} ${destinationPos[1] + inletPos[1]} ${destinationPos[0] + inletPos[0]} ${sourcePos[1] + outletPos[1]} ${destinationPos[0] + inletPos[0]} ${destinationPos[1] + inletPos[1]}`);\n        cable.setAttribute(\"stroke\", \"#373737\");\n        cable.setAttribute(\"fill\", \"none\");\n        cable.setAttribute(\"stroke-width\", \"2\");\n        \n        this.svgElement = cable;\n        document.getElementById(this.workspaceId).appendChild(cable); \n    }\n}"],"names":["methods","names","registerMethods","name","m","Array","isArray","_name","addMethodNames","Object","getOwnPropertyNames","assign","getMethodsFor","getMethodNames","Set","_names","push","map","array","block","i","il","length","result","filter","radians","d","Math","PI","degrees","r","unCamelCase","s","replace","g","toLowerCase","capitalize","charAt","toUpperCase","slice","proportionalSize","element","width","height","box","bbox","getOrigin","o","origin","ox","originX","oy","originY","x","y","condX","condY","includes","descriptiveElements","isDescriptive","has","nodeName","writeDataToDom","data","defaults","cloned","key","valueOf","keys","node","setAttribute","JSON","stringify","removeAttribute","svg","html","xmlns","xlink","globals","window","document","registerWindow","win","doc","save","saveWindow","restoreWindow","withWindow","fn","getWindow","Base","elements","root","create","ns","createElementNS","makeInstance","isHTML","adopter","querySelector","wrapper","createElement","innerHTML","firstChild","removeChild","nodeOrNew","Node","ownerDocument","defaultView","adopt","instance","Fragment","className","mockAdopt","mock","register","asRoot","prototype","getClass","did","eid","assignNewId","children","id","extend","modules","wrapWithAttrCheck","args","constructor","apply","attr","siblings","parent","position","index","next","prev","forward","p","add","remove","backward","front","back","before","after","insertBefore","insertAfter","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isBlank","isNumber","isImage","delimiter","isPathLetter","classes","trim","split","hasClass","indexOf","addClass","join","removeClass","c","toggleClass","css","style","val","ret","arguments","cssText","el","forEach","t","cased","getPropertyValue","setProperty","test","show","hide","visible","a","v","attributes","parse","e","remember","k","memory","forget","_memory","sixDigitHex","substring","componentHex","component","integer","round","bounded","max","min","toString","is","object","space","getParameters","b","params","_a","_b","_c","_d","z","h","l","cieSpace","hueToRgb","q","Color","inputs","init","isColor","color","random","mode","sin","pi","grey","Error","cmyk","hsl","isGrey","delta","values","noWhitespace","exec","parseInt","hexParse","components","lab","xyz","lch","sqrt","atan2","dToR","cos","yL","xL","zL","ct","mx","nm","rU","gU","bU","pow","bd","toArray","toHex","_clamped","toRgb","rV","gV","bV","string","r255","g255","b255","rL","gL","bL","xU","yU","zU","format","Point","clone","base","source","transform","transformO","Matrix","isMatrixLike","f","point","screenCTM","inverseO","closeEnough","threshold","abs","formatTransforms","flipBoth","flip","flipX","flipY","skewX","skew","isFinite","skewY","scaleX","scale","scaleY","shear","theta","rotate","around","px","positionX","NaN","py","positionY","translate","tx","translateX","ty","translateY","relative","rx","relativeX","ry","relativeY","fromArray","matrixMultiply","cx","cy","matrix","aroundO","dx","dy","translateO","lmultiplyO","decompose","determinant","ccw","sx","thetaRad","st","lam","sy","equals","other","comp","axis","flipO","scaleO","Element","matrixify","parseFloat","call","inverse","det","na","nb","nc","nd","ne","nf","lmultiply","multiply","multiplyO","rotateO","shearO","lx","skewO","tan","ly","current","transformer","ctm","getCTM","isRoot","rect","getScreenCTM","console","warn","parser","nodes","size","path","parentNode","body","documentElement","addTo","isNulledBox","domContains","contains","Box","addOffset","pageXOffset","pageYOffset","left","top","w","x2","y2","isNulled","merge","xMin","Infinity","xMax","yMin","yMax","pts","getBox","getBBoxFn","retry","getBBox","rbox","getRBox","getBoundingClientRect","inside","viewbox","zoom","level","clientWidth","clientHeight","zoomX","zoomY","zoomAmount","Number","MAX_SAFE_INTEGER","List","arr","each","fnOrMethodName","concat","reserved","reduce","obj","attrs","baseFind","query","querySelectorAll","find","findOne","listenerId","windowEvents","getEvents","n","getEventHolder","events","getEventTarget","clearEvents","on","listener","binding","options","bind","bag","_svgjsListenerId","event","ev","addEventListener","off","namespace","removeEventListener","dispatch","Event","dispatchEvent","CustomEvent","detail","cancelable","EventTarget","type","j","defaultPrevented","fire","noop","timeline","duration","ease","delay","fill","stroke","opacity","offset","SVGArray","toSet","SVGNumber","convert","unit","value","divide","number","isNaN","match","minus","plus","times","toJSON","colorAttributes","hooks","registerAttrHook","nodeValue","last","curr","getAttribute","_val","hook","leading","setAttributeNS","rebuild","Dom","removeNamespace","SVGElement","appendChild","childNodes","put","clear","hasChildNodes","lastChild","deep","assignNewIds","nodeClone","cloneNode","first","get","htmlOrFn","outerHTML","xml","matches","selector","matcher","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","putIn","removeElement","replaceChild","precision","factor","svgOrFn","outerSVG","words","text","textContent","wrap","xmlOrFn","outerXML","_this","well","fragment","createDocumentFragment","len","firstElementChild","dom","hasAttribute","setData","center","defs","dmove","move","parents","until","isSelector","sugar","prefix","extension","mat","angle","direction","radius","_element","getTotalLength","pointAt","getPointAtLength","font","untransform","str","kv","reverse","toParent","pCtm","toRoot","decomposed","cleanRelative","Container","flatten","ungroup","Defs","Shape","Ellipse","circled","ellipse","from","fx","fy","x1","y1","to","Gradient","targets","url","update","gradiented","gradient","Pattern","pattern","patternUnits","Image","load","callback","img","src","image","PointArray","maxX","maxY","minX","minY","points","pop","toLine","MorphArray","Line","plot","pointed","line","Marker","orient","ref","marker","makeSetterGetter","easing","pos","bezier","steps","stepPosition","jumps","beforeFlag","step","floor","jumping","Stepper","done","Ease","Controller","stepper","target","dt","recalculate","_duration","overshoot","_overshoot","eps","os","log","zeta","wn","Spring","velocity","acceleration","newPosition","PID","windup","integral","error","_windup","P","I","D","segmentParameters","M","L","H","V","C","S","Q","T","A","Z","pathHandlers","p0","mlhvqtcsaz","jl","makeAbsolut","command","segment","segmentComplete","startNewSegment","token","inNumber","finalizeNumber","pathLetter","lastCommand","small","isSmall","inSegment","pointSeen","hasExponent","finalizeSegment","absolute","segments","isArcFlag","isArc","isExponential","lastToken","pathDelimiters","pathParser","toAbsolute","arrayToString","PathArray","getClassForType","NonMorphable","morphableTypes","ObjectBag","Morphable","_stepper","_from","_to","_type","_context","_morphObj","at","morph","complete","_set","align","toConsumable","TransformBag","sortByKey","splice","defaultObject","toDelete","objOrArr","entries","Type","sort","shift","num","registerMorphableType","makeMorphable","context","mapper","Path","_array","Polygon","polygon","poly","Polyline","polyline","Rect","Queue","_first","_last","item","Animator","nextDraw","frames","timeouts","immediates","timer","performance","Date","frame","run","requestAnimationFrame","_draw","timeout","time","now","immediate","cancelFrame","clearTimeout","cancelImmediate","nextTimeout","lastTimeout","nextFrame","lastFrame","nextImmediate","makeSchedule","runnerInfo","start","runner","end","defaultSource","Timeline","timeSource","_timeSource","terminate","active","_nextFrame","finish","getEndTimeOfTimeline","pause","getEndTime","lastRunnerInfo","getLastRunnerInfo","lastDuration","lastStartTime","_time","endTimes","_runners","getRunnerInfoById","_lastRunnerId","_runnerIds","_paused","_continue","persist","dtOrForever","_persist","play","updateTime","yes","currentSpeed","speed","positive","schedule","when","absoluteStartTime","endTime","unschedule","info","seek","_speed","stop","_lastSourceTime","immediateStep","_stepImmediate","_step","_stepFn","dtSource","dtTime","_lastStepTime","dtToStart","reset","runnersLeft","finished","_startTime","_timeline","Runner","_queue","_isDeclarative","_history","enabled","_lastTime","_reseted","transformId","_haveReversed","_reverse","_loopsDone","_swing","_wait","_times","_frameId","sanitise","swing","wait","addTransform","animate","loop","clearTransform","clearTransformsFromQueue","isTransform","during","queue","_prepareRunner","loops","loopDuration","loopsDone","relativeTime","whole","partial","swinging","backwards","uncliped","clipped","swingForward","forwards","progress","initFn","runFn","retargetFn","initialiser","retarget","initialised","running","_lastPosition","justStarted","justFinished","declarative","converged","_initialise","_run","needsIt","_rememberMorpher","method","morpher","caller","positionOrDt","allfinished","_tryRetarget","extra","FakeRunner","mergeWith","getRunnerTransform","mergeTransforms","runners","_transformationRunners","netTransform","RunnerArray","ids","clearBefore","deleteCnt","edit","newRunner","getByID","lastRunner","condition","by","_clearTransformRunnersBefore","currentRunner","_currentTransform","_addRunner","difference","styleAttr","nameOrAttrs","newToAttrs","newKeys","differences","addedFromAttrs","oldFromAttrs","oldToAttrs","newLevel","newPoint","affine","isMatrix","currentAngle","startTransform","setup","undefined","rTarget","rCurrent","possibilities","distances","shortest","affineParameters","newTransforms","_queueNumber","ax","ay","_queueNumberDelta","newTo","_queueObject","amove","Svg","version","nested","Symbol","symbol","plain","_build","createTextNode","getComputedTextLength","build","Text","_rebuild","self","blankLineOffset","fontSize","getComputedStyle","newLined","firstLine","nodeType","newLine","textable","Tspan","tspan","Circle","circle","ClipPath","unclip","clip","clipper","clipWith","ForeignObject","foreignObject","child","SVGSVGElement","G","containerGeometry","group","link","unlink","linker","linkTo","Mask","unmask","mask","masker","maskWith","Stop","cssRule","rule","Style","addText","fontFamily","fontface","TextPath","track","pathArray","textPath","importNodes","Use","use","file","SVG"],"version":3,"file":"index.js.map"}